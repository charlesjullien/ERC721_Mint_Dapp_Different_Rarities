{"id":"a450364fce0ac794892fef7d431a7991","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/Mint.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n// import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\"; \nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Mint is ERC721URIStorage, Ownable {\n     \n    using Counters for Counters.Counter;\n    Counters.Counter public goldsMinted;\n    Counters.Counter public diamondsMinted;\n    Counters.Counter public totalMinted;\n\n    using Strings for uint256;\n\n    string internal baseURIVenus;\n    string internal baseURIMars_1;\n    string internal baseURIJupiter;\n    string internal baseURIUranus;\n    string internal baseURINeptune;\n    string internal baseURIMars_2;\n\n    uint private indexVenus;\n    uint private indexMars_1;\n    uint private indexJupiterG;\n    uint private indexJupiterD;\n    uint private indexUranus;\n    uint private indexNeptune;\n    uint private indexMars_2;\n\n    address payable incAccount;\n    uint public balance;\n\n    bool public canWhitelistforPreMint;\n    bool public canWhitelistforFreeMint;\n    uint public goldCost = 1 ether; // 25 MATIC normally\n    uint public diamondCost = 5 ether; // 130 MATIC normally\n    uint private nonce;\n\n    struct User {\n        uint diamondsBought;\n        uint goldsBought;\n    }\n\n    mapping (address => User) users;\n\n    mapping (address => bool) canPreMint;\n    mapping (address => bool) canFreeMint;\n    \n\n    event UserCanPreMint(address userAddress);\n    event UserCanFreeMint(address userAddress);\n\n    constructor (string memory _collectionName, string memory _collectionSymbol, string[] memory _baseURIs) ERC721 (_collectionName, _collectionSymbol) {\n        setBaseURI(_baseURIs);\n        canWhitelistforPreMint = true;\n        nonce = 0;\n        incAccount = payable(msg.sender);\n    }\n\n    modifier preMintAllowed () {\n        require (canPreMint[msg.sender], \"You are not whitelisted for pre mint\");\n        _;\n    }\n\n    modifier freeMintAllowed () {\n        require (canFreeMint[msg.sender], \"You are not whitelisted for free mint\");\n        _;\n    }\n\n    function setBaseURI (string[] memory _baseURIs) internal onlyOwner {\n        baseURIVenus = _baseURIs[0];\n        baseURIMars_1 = _baseURIs[1];\n        baseURIJupiter = _baseURIs[2];\n        baseURIUranus = _baseURIs[3];\n        baseURINeptune = _baseURIs[4];\n        baseURIMars_2 = _baseURIs[5];\n    }\n\n    function whitelistForPreMint (address _address) external onlyOwner {\n        require(canWhitelistforPreMint == true, \"pre mint whitelisting phase is over\");\n        canPreMint[_address] = true;\n        emit UserCanPreMint(_address);\n    }\n\n    function whitelistForFreeMint (address _address) external onlyOwner {\n        require(canWhitelistforFreeMint == true, \"free mint whitelisting phase is over\");\n        canFreeMint[_address] = true;\n        emit UserCanFreeMint(_address);\n    }\n\n    function finishPreMintListing () external onlyOwner {\n        require(canWhitelistforPreMint == true, \"pre mint whitelisting phase is over\");\n        canWhitelistforPreMint = false;\n        canWhitelistforFreeMint = true;\n    }\n\n    function finishFreeMintListing () external onlyOwner {\n        require(canWhitelistforFreeMint == true, \"free mint whitelisting phase is over\");\n        canWhitelistforFreeMint = false;\n    }\n\n    function random(uint from, uint to) private returns (uint) {\n        uint range = to - from;\n        uint randomNumber = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, nonce)));\n        nonce++;\n        return (randomNumber % range) + from;\n    }\n\n    function startMint(uint id, string memory characterURI) internal {\n        string memory currentURI = string(abi.encodePacked(characterURI, id.toString(), \".json\"));\n        _mint(msg.sender, totalMinted._value + 1);\n        _setTokenURI(totalMinted._value + 1, currentURI);\n        totalMinted.increment();\n    }\n\n\n    function gold() internal {\n        uint id = random(1, 100);\n        if (id >= 1 && id <= 50)\n        {\n            if (indexVenus >= 350)\n            {\n                if (indexMars_1 >= 245)\n                {\n                    indexJupiterG++;\n                    startMint(indexJupiterG, baseURIJupiter);\n                }\n                indexMars_1++;\n                startMint(indexMars_1, baseURIMars_1);\n            }\n            else\n            {\n                indexVenus++;\n                startMint(indexVenus, baseURIVenus);\n            }\n        }\n        else if (id >= 51 && id <= 85)\n        {\n            if (indexMars_1 >= 245)\n            {\n                if (indexVenus >= 350)\n                {\n                    indexJupiterG++;\n                    startMint(indexJupiterG, baseURIJupiter);\n                }\n                indexVenus++;\n                startMint(indexVenus, baseURIVenus);\n            }\n            else\n            {\n                indexMars_1++;\n                startMint(indexMars_1, baseURIMars_1);\n            }\n        }\n        else if (id >= 86 && id <= 100)\n        {\n            if (indexJupiterG >= 105)\n            {\n                if (indexVenus >= 350)\n                {\n                    indexMars_1++;\n                    startMint(indexMars_1, baseURIMars_1);\n                }\n                indexVenus++;\n                startMint(indexVenus, baseURIVenus);\n            }\n            else\n            {\n                indexJupiterG++;\n                startMint(indexJupiterG, baseURIJupiter);\n            }\n        }\n    }\n\n    function diamond() internal {\n        uint id = random(1, 1000);\n        if (id >= 1 && id <= 350)\n        {\n            if (indexJupiterD >= 105)\n            {\n                if (indexUranus >= 90)\n                {\n                    if (indexNeptune >= 53)\n                    {\n                        indexMars_2++;\n                        startMint(indexMars_2, baseURIMars_2);\n                    }\n                    else\n                    {\n                        indexNeptune++;\n                        startMint(indexNeptune, baseURINeptune);\n                    }\n                }\n                else\n                {\n                    indexUranus++;\n                    startMint(indexUranus, baseURIUranus);\n                }\n            }\n            else\n            {\n                indexJupiterD++;\n                startMint(indexJupiterD, baseURIJupiter);\n            }\n        }\n        else if (id >= 351 && id <= 650)\n        {\n            if (indexUranus >= 90)\n            {\n                if (indexJupiterD >= 105)\n                {\n                    if (indexNeptune >= 53)\n                    {\n                        indexMars_2++;\n                        startMint(indexMars_2, baseURIMars_2);\n                    }\n                    else\n                    {\n                        indexNeptune++;\n                        startMint(indexNeptune, baseURINeptune);\n                    }\n                }\n                else\n                {\n                    indexJupiterD++;\n                    startMint(indexJupiterD, baseURIJupiter);\n                }\n            }\n            else\n            {\n                indexUranus++;\n                startMint(indexUranus, baseURIUranus);\n            }\n        }\n        else if (id >= 651 && id <= 827)\n        {\n            if (indexNeptune >= 53)\n            {\n                if (indexJupiterD >= 105)\n                {\n                    if (indexUranus >= 90)\n                    {\n                        indexMars_2++;\n                        startMint(indexMars_2, baseURIMars_2);\n                    }\n                    else\n                    {\n                        indexUranus++;\n                        startMint(indexUranus, baseURIUranus);\n                    }\n                }\n                else\n                {\n                    indexJupiterD++;\n                    startMint(indexJupiterD, baseURIJupiter);\n                }\n            }\n            else\n            {\n                indexNeptune++;\n                startMint(indexNeptune, baseURINeptune);\n            }\n        }\n        else if (id >= 828 && id <= 1000)\n        {\n            if (indexMars_2 >= 52)\n            {\n                if (indexJupiterD >= 105)\n                {\n                    if (indexUranus >= 90)\n                    {\n                        indexNeptune++;\n                        startMint(indexNeptune, baseURINeptune);\n                    }\n                    else\n                    {\n                        indexUranus++;\n                        startMint(indexUranus, baseURIUranus);\n                    }\n                }\n                else\n                {\n                    indexJupiterD++;\n                    startMint(indexJupiterD, baseURIJupiter);\n                }\n            }\n            else\n            {\n                indexMars_2++;\n                startMint(indexMars_2, baseURIMars_2);\n            }\n        }\n    } \n\n    function preMintGold () external payable preMintAllowed {\n        require(users[msg.sender].goldsBought < 5, \"You cannot mint anymore gold capsule\");\n        require(msg.value == goldCost, \"Price is 25 Matic\");\n        require(goldsMinted._value <= 700, \"All gold capsules have been minted\");\n        gold();\n        incAccount.transfer(msg.value);\n        goldsMinted.increment();\n        users[msg.sender].goldsBought++;\n    }\n\n    function preMintDiamond () external payable preMintAllowed {\n        require(users[msg.sender].diamondsBought < 2, \"You cannot mint anymore diamond capsule\");\n        require(msg.value == diamondCost, \"Price is 130 Matic\");\n        require(diamondsMinted._value <= 300, \"All diamond capsules have been minted\");\n        diamond();\n        incAccount.transfer(msg.value);\n        diamondsMinted.increment();\n        users[msg.sender].goldsBought++;\n    }\n\n    function withdrawAll() external onlyOwner {\n        address ownr = owner(); \n        payable(ownr).transfer(address(this).balance);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1749],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":1750,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1749,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,1749],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1885:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1895:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1895:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1875:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1875:9:0"},"nodeType":"ModifierInvocation","src":"1875:9:0"}],"name":"renounceOwnership","nameLocation":"1840:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1857:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1885:0:0"},"scope":112,"src":"1831:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2151:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2169:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2161:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2263:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2244:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2244:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1938:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2141:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2141:9:0"},"nodeType":"ModifierInvocation","src":"2141:9:0"}],"name":"transferOwnership","nameLocation":"2090:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2108:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2151:0:0"},"scope":112,"src":"2081:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2496:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2506:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2525:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2541:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2550:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2541:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2594:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2604:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2573:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2568:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2285:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2461:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2496:0:0"},"scope":112,"src":"2433:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1968:0","usedErrors":[]}],"src":"102:2521:0"},"id":0},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[166]},"id":167,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:1"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"137:750:1","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":166,"linearizedBaseContracts":[166],"name":"ReentrancyGuard","nameLocation":"906:15:1","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":118,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1701:12:1","nodeType":"VariableDeclaration","scope":166,"src":"1676:41:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":116,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":121,"mutability":"constant","name":"_ENTERED","nameLocation":"1748:8:1","nodeType":"VariableDeclaration","scope":166,"src":"1723:37:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":119,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":123,"mutability":"mutable","name":"_status","nameLocation":"1783:7:1","nodeType":"VariableDeclaration","scope":166,"src":"1767:23:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":122,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":130,"nodeType":"Block","src":"1811:39:1","statements":[{"expression":{"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":126,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"1821:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":127,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"1831:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1821:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"nodeType":"ExpressionStatement","src":"1821:22:1"}]},"id":131,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":124,"nodeType":"ParameterList","parameters":[],"src":"1808:2:1"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[],"src":"1811:0:1"},"scope":166,"src":"1797:53:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":141,"nodeType":"Block","src":"2251:79:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":134,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":157,"src":"2261:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2261:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":136,"nodeType":"ExpressionStatement","src":"2261:21:1"},{"id":137,"nodeType":"PlaceholderStatement","src":"2292:1:1"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":138,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"2303:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":140,"nodeType":"ExpressionStatement","src":"2303:20:1"}]},"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"1856:366:1","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":142,"name":"nonReentrant","nameLocation":"2236:12:1","nodeType":"ModifierDefinition","parameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"2248:2:1"},"src":"2227:103:1","virtual":false,"visibility":"internal"},{"body":{"id":156,"nodeType":"Block","src":"2375:248:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":146,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"2468:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":147,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"2479:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2468:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:33:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":145,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2460:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2460:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":151,"nodeType":"ExpressionStatement","src":"2460:63:1"},{"expression":{"id":154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":152,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"2598:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":153,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"2608:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2598:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":155,"nodeType":"ExpressionStatement","src":"2598:18:1"}]},"id":157,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2345:19:1","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[],"src":"2364:2:1"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[],"src":"2375:0:1"},"scope":166,"src":"2336:287:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":164,"nodeType":"Block","src":"2667:171:1","statements":[{"expression":{"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":160,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"2809:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":161,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"2819:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2809:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":163,"nodeType":"ExpressionStatement","src":"2809:22:1"}]},"id":165,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2638:18:1","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[],"src":"2656:2:1"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"2667:0:1"},"scope":166,"src":"2629:209:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":167,"src":"888:1952:1","usedErrors":[]}],"src":"112:2729:1"},"id":1},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1727],"Context":[1749],"ERC165":[2022],"ERC721":[1111],"IERC165":[2034],"IERC721":[1227],"IERC721Metadata":[1397],"IERC721Receiver":[1245],"Math":[2899],"Strings":[1998]},"id":1112,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":168,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":169,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1112,"sourceUnit":1228,"src":"132:23:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":170,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1112,"sourceUnit":1246,"src":"156:31:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":171,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1112,"sourceUnit":1398,"src":"188:42:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":172,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1112,"sourceUnit":1728,"src":"231:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":173,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1112,"sourceUnit":1750,"src":"265:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":174,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1112,"sourceUnit":1999,"src":"299:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":175,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1112,"sourceUnit":2023,"src":"333:46:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":177,"name":"Context","nameLocations":["647:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1749,"src":"647:7:2"},"id":178,"nodeType":"InheritanceSpecifier","src":"647:7:2"},{"baseName":{"id":179,"name":"ERC165","nameLocations":["656:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":2022,"src":"656:6:2"},"id":180,"nodeType":"InheritanceSpecifier","src":"656:6:2"},{"baseName":{"id":181,"name":"IERC721","nameLocations":["664:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1227,"src":"664:7:2"},"id":182,"nodeType":"InheritanceSpecifier","src":"664:7:2"},{"baseName":{"id":183,"name":"IERC721Metadata","nameLocations":["673:15:2"],"nodeType":"IdentifierPath","referencedDeclaration":1397,"src":"673:15:2"},"id":184,"nodeType":"InheritanceSpecifier","src":"673:15:2"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"381:246:2","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1111,"linearizedBaseContracts":[1111,1397,1227,2022,2034,1749],"name":"ERC721","nameLocation":"637:6:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":187,"libraryName":{"id":185,"name":"Address","nameLocations":["701:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1727,"src":"701:7:2"},"nodeType":"UsingForDirective","src":"695:26:2","typeName":{"id":186,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":190,"libraryName":{"id":188,"name":"Strings","nameLocations":["732:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1998,"src":"732:7:2"},"nodeType":"UsingForDirective","src":"726:26:2","typeName":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":192,"mutability":"mutable","name":"_name","nameLocation":"791:5:2","nodeType":"VariableDeclaration","scope":1111,"src":"776:20:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":191,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":194,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:2","nodeType":"VariableDeclaration","scope":1111,"src":"823:22:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":193,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":198,"mutability":"mutable","name":"_owners","nameLocation":"934:7:2","nodeType":"VariableDeclaration","scope":1111,"src":"898:43:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":197,"keyType":{"id":195,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":196,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":202,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:2","nodeType":"VariableDeclaration","scope":1111,"src":"992:45:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":201,"keyType":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":200,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":206,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:2","nodeType":"VariableDeclaration","scope":1111,"src":"1093:51:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":205,"keyType":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":204,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":212,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:2","nodeType":"VariableDeclaration","scope":1111,"src":"1199:71:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":211,"keyType":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":210,"keyType":{"id":208,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":209,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":228,"nodeType":"Block","src":"1446:57:2","statements":[{"expression":{"id":222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":220,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"1456:5:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":221,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"1464:5:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":223,"nodeType":"ExpressionStatement","src":"1456:13:2"},{"expression":{"id":226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":224,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1479:7:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":225,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"1489:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":227,"nodeType":"ExpressionStatement","src":"1479:17:2"}]},"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"1277:108:2","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":229,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"name_","nameLocation":"1416:5:2","nodeType":"VariableDeclaration","scope":229,"src":"1402:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":214,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":217,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:2","nodeType":"VariableDeclaration","scope":229,"src":"1423:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":216,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:2"},"returnParameters":{"id":219,"nodeType":"ParameterList","parameters":[],"src":"1446:0:2"},"scope":1111,"src":"1390:113:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2021,2033],"body":{"id":259,"nodeType":"Block","src":"1678:192:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":240,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"1707:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":242,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"1727:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1227_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1227_$","typeString":"type(contract IERC721)"}],"id":241,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1227","typeString":"type(contract IERC721)"}},"id":244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1736:11:2","memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":246,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"1763:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":248,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"1783:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1397_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1397_$","typeString":"type(contract IERC721Metadata)"}],"id":247,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1397","typeString":"type(contract IERC721Metadata)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:2","memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":255,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"1851:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":253,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1111_$","typeString":"type(contract super ERC721)"}},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:17:2","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2021,"src":"1827:23:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":239,"id":258,"nodeType":"Return","src":"1688:175:2"}]},"documentation":{"id":230,"nodeType":"StructuredDocumentation","src":"1509:56:2","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":260,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:2","nodeType":"FunctionDefinition","overrides":{"id":236,"nodeType":"OverrideSpecifier","overrides":[{"id":234,"name":"ERC165","nameLocations":["1646:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":2022,"src":"1646:6:2"},{"id":235,"name":"IERC165","nameLocations":["1654:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2034,"src":"1654:7:2"}],"src":"1637:25:2"},"parameters":{"id":233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":232,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:2","nodeType":"VariableDeclaration","scope":260,"src":"1597:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":231,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:2"},"returnParameters":{"id":239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":260,"src":"1672:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":237,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:2"},"scope":1111,"src":"1570:300:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1152],"body":{"id":283,"nodeType":"Block","src":"2010:123:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":270,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"2028:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":271,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:2","typeDescriptions":{}}},"id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2037:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":269,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:73:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":278,"nodeType":"ExpressionStatement","src":"2020:73:2"},{"expression":{"baseExpression":{"id":279,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2110:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":281,"indexExpression":{"id":280,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"2120:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":268,"id":282,"nodeType":"Return","src":"2103:23:2"}]},"documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"1876:48:2","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":284,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:2","nodeType":"FunctionDefinition","overrides":{"id":265,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:2"},"parameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"owner","nameLocation":"1956:5:2","nodeType":"VariableDeclaration","scope":284,"src":"1948:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":262,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:2"},"returnParameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":284,"src":"2001:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":266,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:2"},"scope":1111,"src":"1929:204:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1160],"body":{"id":311,"nodeType":"Block","src":"2271:138:2","statements":[{"assignments":[294],"declarations":[{"constant":false,"id":294,"mutability":"mutable","name":"owner","nameLocation":"2289:5:2","nodeType":"VariableDeclaration","scope":311,"src":"2281:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":298,"initialValue":{"arguments":[{"id":296,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"2306:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":295,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2297:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":300,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"2332:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":301,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:2","typeDescriptions":{}}},"id":304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":299,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2324:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":308,"nodeType":"ExpressionStatement","src":"2324:56:2"},{"expression":{"id":309,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"2397:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":292,"id":310,"nodeType":"Return","src":"2390:12:2"}]},"documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"2139:46:2","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":312,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:2","nodeType":"FunctionDefinition","overrides":{"id":289,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:2"},"parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:2","nodeType":"VariableDeclaration","scope":312,"src":"2207:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:2"},"returnParameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":312,"src":"2262:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":290,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:2"},"scope":1111,"src":"2190:219:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1382],"body":{"id":321,"nodeType":"Block","src":"2540:29:2","statements":[{"expression":{"id":319,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"2557:5:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":318,"id":320,"nodeType":"Return","src":"2550:12:2"}]},"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"2415:51:2","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":322,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:2","nodeType":"FunctionDefinition","overrides":{"id":315,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:2"},"parameters":{"id":314,"nodeType":"ParameterList","parameters":[],"src":"2484:2:2"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":322,"src":"2525:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":316,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:2"},"scope":1111,"src":"2471:98:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1388],"body":{"id":331,"nodeType":"Block","src":"2704:31:2","statements":[{"expression":{"id":329,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"2721:7:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":328,"id":330,"nodeType":"Return","src":"2714:14:2"}]},"documentation":{"id":323,"nodeType":"StructuredDocumentation","src":"2575:53:2","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":332,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:2","nodeType":"FunctionDefinition","overrides":{"id":325,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:2"},"parameters":{"id":324,"nodeType":"ParameterList","parameters":[],"src":"2648:2:2"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":332,"src":"2689:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":326,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:2"},"scope":1111,"src":"2633:102:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1396],"body":{"id":370,"nodeType":"Block","src":"2889:188:2","statements":[{"expression":{"arguments":[{"id":342,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2914:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":341,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"2899:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":344,"nodeType":"ExpressionStatement","src":"2899:23:2"},{"assignments":[346],"declarations":[{"constant":false,"id":346,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:2","nodeType":"VariableDeclaration","scope":370,"src":"2933:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":345,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":349,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":347,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"2957:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:2"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":352,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"2990:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":350,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:2","typeDescriptions":{}}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:2","memberName":"length","nodeType":"MemberAccess","src":"2984:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:2","trueExpression":{"arguments":[{"arguments":[{"id":361,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"3036:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":362,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"3045:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:8:2","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1881,"src":"3045:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":359,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:45:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":358,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":357,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:2","typeDescriptions":{}}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":340,"id":369,"nodeType":"Return","src":"2977:93:2"}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"2741:55:2","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":371,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:2","nodeType":"FunctionDefinition","overrides":{"id":337,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:2"},"parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:2","nodeType":"VariableDeclaration","scope":371,"src":"2819:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":334,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:2"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":371,"src":"2874:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":338,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:2"},"scope":1111,"src":"2801:276:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":379,"nodeType":"Block","src":"3385:26:2","statements":[{"expression":{"hexValue":"","id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":376,"id":378,"nodeType":"Return","src":"3395:9:2"}]},"documentation":{"id":372,"nodeType":"StructuredDocumentation","src":"3083:231:2","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":380,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:2","nodeType":"FunctionDefinition","parameters":{"id":373,"nodeType":"ParameterList","parameters":[],"src":"3336:2:2"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":380,"src":"3370:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":374,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:2"},"scope":1111,"src":"3319:92:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1200],"body":{"id":422,"nodeType":"Block","src":"3538:336:2","statements":[{"assignments":[390],"declarations":[{"constant":false,"id":390,"mutability":"mutable","name":"owner","nameLocation":"3556:5:2","nodeType":"VariableDeclaration","scope":422,"src":"3548:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":395,"initialValue":{"arguments":[{"id":393,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"3579:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":391,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"3564:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1111_$","typeString":"type(contract ERC721)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:7:2","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"3564:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":397,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"3605:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":398,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"3611:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":396,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3597:57:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"ExpressionStatement","src":"3597:57:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":404,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"3686:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":406,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"3702:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":409,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"3728:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":410,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"3735:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":408,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"3711:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":403,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:170:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":416,"nodeType":"ExpressionStatement","src":"3665:170:2"},{"expression":{"arguments":[{"id":418,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"3855:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":419,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"3859:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":417,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"3846:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":421,"nodeType":"ExpressionStatement","src":"3846:21:2"}]},"documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"3417:46:2","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":423,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:2","nodeType":"FunctionDefinition","overrides":{"id":387,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:2"},"parameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"to","nameLocation":"3493:2:2","nodeType":"VariableDeclaration","scope":423,"src":"3485:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:2","nodeType":"VariableDeclaration","scope":423,"src":"3497:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":384,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:2"},"returnParameters":{"id":388,"nodeType":"ParameterList","parameters":[],"src":"3538:0:2"},"scope":1111,"src":"3468:406:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1216],"body":{"id":440,"nodeType":"Block","src":"4020:82:2","statements":[{"expression":{"arguments":[{"id":433,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"4045:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":432,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"4030:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4030:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":435,"nodeType":"ExpressionStatement","src":"4030:23:2"},{"expression":{"baseExpression":{"id":436,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"4071:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":438,"indexExpression":{"id":437,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"4087:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":431,"id":439,"nodeType":"Return","src":"4064:31:2"}]},"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"3880:50:2","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":441,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:2","nodeType":"FunctionDefinition","overrides":{"id":428,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:2"},"parameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:2","nodeType":"VariableDeclaration","scope":441,"src":"3956:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":425,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:2"},"returnParameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":441,"src":"4011:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":429,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:2"},"scope":1111,"src":"3935:167:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1208],"body":{"id":457,"nodeType":"Block","src":"4253:69:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":451,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"4282:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4282:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":453,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"4296:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":454,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"4306:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":450,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"4263:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":456,"nodeType":"ExpressionStatement","src":"4263:52:2"}]},"documentation":{"id":442,"nodeType":"StructuredDocumentation","src":"4108:56:2","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":458,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:2","nodeType":"FunctionDefinition","overrides":{"id":448,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:2"},"parameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"mutability":"mutable","name":"operator","nameLocation":"4204:8:2","nodeType":"VariableDeclaration","scope":458,"src":"4196:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":443,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"approved","nameLocation":"4219:8:2","nodeType":"VariableDeclaration","scope":458,"src":"4214:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":445,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:2"},"returnParameters":{"id":449,"nodeType":"ParameterList","parameters":[],"src":"4253:0:2"},"scope":1111,"src":"4169:153:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1226],"body":{"id":475,"nodeType":"Block","src":"4491:59:2","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":469,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"4508:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":471,"indexExpression":{"id":470,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"4527:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":473,"indexExpression":{"id":472,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"4534:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":468,"id":474,"nodeType":"Return","src":"4501:42:2"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"4328:55:2","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":476,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:2","nodeType":"FunctionDefinition","overrides":{"id":465,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:2"},"parameters":{"id":464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"owner","nameLocation":"4422:5:2","nodeType":"VariableDeclaration","scope":476,"src":"4414:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":460,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":463,"mutability":"mutable","name":"operator","nameLocation":"4437:8:2","nodeType":"VariableDeclaration","scope":476,"src":"4429:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":462,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:2"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":476,"src":"4485:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":466,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:2"},"scope":1111,"src":"4388:162:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1192],"body":{"id":502,"nodeType":"Block","src":"4731:207:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":489,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"4820:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4820:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":491,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"4834:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":488,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"4801:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4801:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":487,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4793:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4793:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":495,"nodeType":"ExpressionStatement","src":"4793:99:2"},{"expression":{"arguments":[{"id":497,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"4913:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":498,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"4919:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":499,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"4923:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":496,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"4903:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4903:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":501,"nodeType":"ExpressionStatement","src":"4903:28:2"}]},"documentation":{"id":477,"nodeType":"StructuredDocumentation","src":"4556:51:2","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":503,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:2","nodeType":"FunctionDefinition","overrides":{"id":485,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:2"},"parameters":{"id":484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"from","nameLocation":"4651:4:2","nodeType":"VariableDeclaration","scope":503,"src":"4643:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":481,"mutability":"mutable","name":"to","nameLocation":"4673:2:2","nodeType":"VariableDeclaration","scope":503,"src":"4665:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":480,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:2","nodeType":"VariableDeclaration","scope":503,"src":"4685:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":482,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:2"},"returnParameters":{"id":486,"nodeType":"ParameterList","parameters":[],"src":"4731:0:2"},"scope":1111,"src":"4612:326:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1182],"body":{"id":521,"nodeType":"Block","src":"5127:56:2","statements":[{"expression":{"arguments":[{"id":515,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"5154:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":516,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"5160:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":517,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"5164:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":514,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[522,552],"referencedDeclaration":552,"src":"5137:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5137:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":520,"nodeType":"ExpressionStatement","src":"5137:39:2"}]},"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"4944:55:2","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":522,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:2","nodeType":"FunctionDefinition","overrides":{"id":512,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:2"},"parameters":{"id":511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"from","nameLocation":"5047:4:2","nodeType":"VariableDeclaration","scope":522,"src":"5039:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"to","nameLocation":"5069:2:2","nodeType":"VariableDeclaration","scope":522,"src":"5061:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":507,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":510,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:2","nodeType":"VariableDeclaration","scope":522,"src":"5081:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":509,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:2"},"returnParameters":{"id":513,"nodeType":"ParameterList","parameters":[],"src":"5127:0:2"},"scope":1111,"src":"5004:179:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1172],"body":{"id":551,"nodeType":"Block","src":"5399:164:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":537,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"5436:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5436:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":539,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"5450:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":536,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"5417:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5417:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":535,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5409:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5409:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":543,"nodeType":"ExpressionStatement","src":"5409:99:2"},{"expression":{"arguments":[{"id":545,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"5532:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":546,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"5538:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":547,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"5542:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":548,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"5551:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":544,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"5518:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5518:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":550,"nodeType":"ExpressionStatement","src":"5518:38:2"}]},"documentation":{"id":523,"nodeType":"StructuredDocumentation","src":"5189:55:2","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":552,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:2","nodeType":"FunctionDefinition","overrides":{"id":533,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:2"},"parameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"from","nameLocation":"5292:4:2","nodeType":"VariableDeclaration","scope":552,"src":"5284:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":524,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":527,"mutability":"mutable","name":"to","nameLocation":"5314:2:2","nodeType":"VariableDeclaration","scope":552,"src":"5306:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":526,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":529,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:2","nodeType":"VariableDeclaration","scope":552,"src":"5326:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":528,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"data","nameLocation":"5364:4:2","nodeType":"VariableDeclaration","scope":552,"src":"5351:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":530,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:2"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[],"src":"5399:0:2"},"scope":1111,"src":"5249:314:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":580,"nodeType":"Block","src":"6564:165:2","statements":[{"expression":{"arguments":[{"id":565,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"6584:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":566,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"6590:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":567,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"6594:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":564,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"6574:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6574:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":569,"nodeType":"ExpressionStatement","src":"6574:28:2"},{"expression":{"arguments":[{"arguments":[{"id":572,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"6643:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":573,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"6649:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":574,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"6653:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":575,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6662:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":571,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"6620:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6620:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":570,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6612:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6612:110:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":579,"nodeType":"ExpressionStatement","src":"6612:110:2"}]},"documentation":{"id":553,"nodeType":"StructuredDocumentation","src":"5569:850:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":581,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:2","nodeType":"FunctionDefinition","parameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":555,"mutability":"mutable","name":"from","nameLocation":"6464:4:2","nodeType":"VariableDeclaration","scope":581,"src":"6456:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":554,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":557,"mutability":"mutable","name":"to","nameLocation":"6486:2:2","nodeType":"VariableDeclaration","scope":581,"src":"6478:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":556,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":559,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:2","nodeType":"VariableDeclaration","scope":581,"src":"6498:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":558,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":561,"mutability":"mutable","name":"data","nameLocation":"6536:4:2","nodeType":"VariableDeclaration","scope":581,"src":"6523:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":560,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:2"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[],"src":"6564:0:2"},"scope":1111,"src":"6424:305:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":593,"nodeType":"Block","src":"6913:40:2","statements":[{"expression":{"baseExpression":{"id":589,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"6930:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":591,"indexExpression":{"id":590,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"6938:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":588,"id":592,"nodeType":"Return","src":"6923:23:2"}]},"documentation":{"id":582,"nodeType":"StructuredDocumentation","src":"6735:98:2","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":594,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:2","nodeType":"FunctionDefinition","parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:2","nodeType":"VariableDeclaration","scope":594,"src":"6856:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:2"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":594,"src":"6904:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":586,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:2"},"scope":1111,"src":"6838:115:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":611,"nodeType":"Block","src":"7327:55:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":603,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7353:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":602,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"7344:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:2","typeDescriptions":{}}},"id":608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7365:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":601,"id":610,"nodeType":"Return","src":"7337:38:2"}]},"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"6959:292:2","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":612,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:2","nodeType":"FunctionDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:2","nodeType":"VariableDeclaration","scope":612,"src":"7273:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:2"},"returnParameters":{"id":601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":612,"src":"7321:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":599,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:2"},"scope":1111,"src":"7256:126:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":645,"nodeType":"Block","src":"7639:162:2","statements":[{"assignments":[623],"declarations":[{"constant":false,"id":623,"mutability":"mutable","name":"owner","nameLocation":"7657:5:2","nodeType":"VariableDeclaration","scope":645,"src":"7649:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":622,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":628,"initialValue":{"arguments":[{"id":626,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"7680:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":624,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"7665:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1111_$","typeString":"type(contract ERC721)"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7672:7:2","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"7665:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7665:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:2"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":629,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"7706:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":630,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"7717:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":633,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"7743:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":634,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"7750:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":632,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"7726:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7726:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":638,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"7774:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":637,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"7762:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7762:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":640,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"7786:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":643,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":621,"id":644,"nodeType":"Return","src":"7698:96:2"}]},"documentation":{"id":613,"nodeType":"StructuredDocumentation","src":"7388:147:2","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":646,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:2","nodeType":"FunctionDefinition","parameters":{"id":618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":615,"mutability":"mutable","name":"spender","nameLocation":"7576:7:2","nodeType":"VariableDeclaration","scope":646,"src":"7568:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":614,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":617,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:2","nodeType":"VariableDeclaration","scope":646,"src":"7585:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":616,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:2"},"returnParameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":646,"src":"7633:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":619,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:2"},"scope":1111,"src":"7540:261:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":660,"nodeType":"Block","src":"8196:43:2","statements":[{"expression":{"arguments":[{"id":655,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"8216:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"8220:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":654,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[661,690],"referencedDeclaration":690,"src":"8206:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8206:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":659,"nodeType":"ExpressionStatement","src":"8206:26:2"}]},"documentation":{"id":647,"nodeType":"StructuredDocumentation","src":"7807:319:2","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":661,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:2","nodeType":"FunctionDefinition","parameters":{"id":652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":649,"mutability":"mutable","name":"to","nameLocation":"8158:2:2","nodeType":"VariableDeclaration","scope":661,"src":"8150:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":648,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":651,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:2","nodeType":"VariableDeclaration","scope":661,"src":"8162:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":650,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:2"},"returnParameters":{"id":653,"nodeType":"ParameterList","parameters":[],"src":"8196:0:2"},"scope":1111,"src":"8131:108:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":689,"nodeType":"Block","src":"8574:195:2","statements":[{"expression":{"arguments":[{"id":672,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"8590:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":673,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"8594:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":671,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"8584:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8584:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":675,"nodeType":"ExpressionStatement","src":"8584:18:2"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":678,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:2","typeDescriptions":{}}},"id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8656:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":682,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"8668:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":683,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"8672:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":684,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"8681:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":677,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"8633:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8633:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":676,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8612:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8612:150:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":688,"nodeType":"ExpressionStatement","src":"8612:150:2"}]},"documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"8245:210:2","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":690,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:2","nodeType":"FunctionDefinition","parameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"to","nameLocation":"8496:2:2","nodeType":"VariableDeclaration","scope":690,"src":"8488:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":666,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:2","nodeType":"VariableDeclaration","scope":690,"src":"8508:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":665,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":668,"mutability":"mutable","name":"data","nameLocation":"8546:4:2","nodeType":"VariableDeclaration","scope":690,"src":"8533:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":667,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:2"},"returnParameters":{"id":670,"nodeType":"ParameterList","parameters":[],"src":"8574:0:2"},"scope":1111,"src":"8460:309:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":766,"nodeType":"Block","src":"9152:859:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":699,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9170:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:2","typeDescriptions":{}}},"id":703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9176:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":698,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9162:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9162:61:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":707,"nodeType":"ExpressionStatement","src":"9162:61:2"},{"expression":{"arguments":[{"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:2","subExpression":{"arguments":[{"id":710,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9250:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":709,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"9242:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9242:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":708,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9233:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9233:58:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":715,"nodeType":"ExpressionStatement","src":"9233:58:2"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":718,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":717,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:2","typeDescriptions":{}}},"id":720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9323:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":721,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9335:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":722,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9339:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":716,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"9302:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9302:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":725,"nodeType":"ExpressionStatement","src":"9302:48:2"},{"expression":{"arguments":[{"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:2","subExpression":{"arguments":[{"id":728,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9454:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":727,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"9446:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9446:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":726,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9437:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9437:58:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":733,"nodeType":"ExpressionStatement","src":"9437:58:2"},{"id":740,"nodeType":"UncheckedBlock","src":"9506:360:2","statements":[{"expression":{"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":734,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"9837:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":736,"indexExpression":{"id":735,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9847:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":739,"nodeType":"ExpressionStatement","src":"9837:18:2"}]},{"expression":{"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":741,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"9876:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":743,"indexExpression":{"id":742,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9884:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":744,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9895:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":746,"nodeType":"ExpressionStatement","src":"9876:21:2"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:2","typeDescriptions":{}}},"id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9922:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":752,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9934:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":753,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9938:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":747,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"9913:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9913:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":755,"nodeType":"EmitStatement","src":"9908:38:2"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":757,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:2","typeDescriptions":{}}},"id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9977:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":761,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9989:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":762,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9993:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":756,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"9957:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9957:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":765,"nodeType":"ExpressionStatement","src":"9957:47:2"}]},"documentation":{"id":691,"nodeType":"StructuredDocumentation","src":"8775:311:2","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":767,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:2","nodeType":"FunctionDefinition","parameters":{"id":696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"to","nameLocation":"9114:2:2","nodeType":"VariableDeclaration","scope":767,"src":"9106:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":692,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":695,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:2","nodeType":"VariableDeclaration","scope":767,"src":"9118:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:2"},"returnParameters":{"id":697,"nodeType":"ParameterList","parameters":[],"src":"9152:0:2"},"scope":1111,"src":"9091:920:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":833,"nodeType":"Block","src":"10386:713:2","statements":[{"assignments":[774],"declarations":[{"constant":false,"id":774,"mutability":"mutable","name":"owner","nameLocation":"10404:5:2","nodeType":"VariableDeclaration","scope":833,"src":"10396:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":773,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":779,"initialValue":{"arguments":[{"id":777,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"10427:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":775,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10412:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1111_$","typeString":"type(contract ERC721)"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10419:7:2","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"10412:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10412:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:2"},{"expression":{"arguments":[{"id":781,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"10467:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:2","typeDescriptions":{}}},"id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10474:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":786,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"10486:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":780,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"10446:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10446:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":789,"nodeType":"ExpressionStatement","src":"10446:51:2"},{"expression":{"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":790,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"10599:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":793,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"10622:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":791,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10607:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1111_$","typeString":"type(contract ERC721)"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10614:7:2","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"10607:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10607:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":796,"nodeType":"ExpressionStatement","src":"10599:31:2"},{"expression":{"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:2","subExpression":{"baseExpression":{"id":797,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"10675:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":799,"indexExpression":{"id":798,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"10691:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":801,"nodeType":"ExpressionStatement","src":"10668:31:2"},{"id":808,"nodeType":"UncheckedBlock","src":"10710:237:2","statements":[{"expression":{"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":802,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"10915:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":804,"indexExpression":{"id":803,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"10925:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":807,"nodeType":"ExpressionStatement","src":"10915:21:2"}]},{"expression":{"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:2","subExpression":{"baseExpression":{"id":809,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"10963:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":811,"indexExpression":{"id":810,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"10971:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":813,"nodeType":"ExpressionStatement","src":"10956:23:2"},{"eventCall":{"arguments":[{"id":815,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"11004:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":816,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:2","typeDescriptions":{}}},"id":819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11011:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":820,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"11023:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":814,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"10995:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10995:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":822,"nodeType":"EmitStatement","src":"10990:41:2"},{"expression":{"arguments":[{"id":824,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"11062:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:2","typeDescriptions":{}}},"id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11069:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":829,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"11081:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":823,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"11042:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11042:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":832,"nodeType":"ExpressionStatement","src":"11042:50:2"}]},"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"10017:315:2","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":834,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:2","nodeType":"FunctionDefinition","parameters":{"id":771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:2","nodeType":"VariableDeclaration","scope":834,"src":"10352:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":769,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:2"},"returnParameters":{"id":772,"nodeType":"ParameterList","parameters":[],"src":"10386:0:2"},"scope":1111,"src":"10337:762:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":918,"nodeType":"Block","src":"11532:1124:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":847,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"11565:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":845,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"11550:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1111_$","typeString":"type(contract ERC721)"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11557:7:2","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"11550:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11550:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":849,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"11577:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":844,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11542:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11542:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":853,"nodeType":"ExpressionStatement","src":"11542:81:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":855,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"11641:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":856,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:2","typeDescriptions":{}}},"id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":854,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11633:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11633:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"ExpressionStatement","src":"11633:65:2"},{"expression":{"arguments":[{"id":865,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"11730:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":866,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"11736:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":867,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"11740:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":864,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"11709:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11709:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":870,"nodeType":"ExpressionStatement","src":"11709:42:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":874,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"11866:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":872,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"11851:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1111_$","typeString":"type(contract ERC721)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11858:7:2","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"11851:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11851:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":876,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"11878:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":871,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11843:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11843:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":880,"nodeType":"ExpressionStatement","src":"11843:81:2"},{"expression":{"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:2","subExpression":{"baseExpression":{"id":881,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"11993:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":883,"indexExpression":{"id":882,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"12009:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":885,"nodeType":"ExpressionStatement","src":"11986:31:2"},{"id":898,"nodeType":"UncheckedBlock","src":"12028:496:2","statements":[{"expression":{"id":890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":886,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"12461:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":888,"indexExpression":{"id":887,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"12471:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":891,"nodeType":"ExpressionStatement","src":"12461:20:2"},{"expression":{"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":892,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"12495:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":894,"indexExpression":{"id":893,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"12505:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":897,"nodeType":"ExpressionStatement","src":"12495:18:2"}]},{"expression":{"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":899,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"12533:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":901,"indexExpression":{"id":900,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"12541:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":902,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"12552:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":904,"nodeType":"ExpressionStatement","src":"12533:21:2"},{"eventCall":{"arguments":[{"id":906,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"12579:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":907,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"12585:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":908,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"12589:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":905,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"12570:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12570:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":910,"nodeType":"EmitStatement","src":"12565:32:2"},{"expression":{"arguments":[{"id":912,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"12628:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":913,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"12634:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":914,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"12638:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":911,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"12608:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12608:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":917,"nodeType":"ExpressionStatement","src":"12608:41:2"}]},"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"11105:313:2","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":919,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:2","nodeType":"FunctionDefinition","parameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"from","nameLocation":"11459:4:2","nodeType":"VariableDeclaration","scope":919,"src":"11451:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":839,"mutability":"mutable","name":"to","nameLocation":"11481:2:2","nodeType":"VariableDeclaration","scope":919,"src":"11473:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:2","nodeType":"VariableDeclaration","scope":919,"src":"11493:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:2"},"returnParameters":{"id":843,"nodeType":"ParameterList","parameters":[],"src":"11532:0:2"},"scope":1111,"src":"11423:1233:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":942,"nodeType":"Block","src":"12832:107:2","statements":[{"expression":{"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":927,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"12842:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":929,"indexExpression":{"id":928,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"12858:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":930,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"12869:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":932,"nodeType":"ExpressionStatement","src":"12842:29:2"},{"eventCall":{"arguments":[{"arguments":[{"id":936,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"12910:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":934,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"12895:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1111_$","typeString":"type(contract ERC721)"}},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12902:7:2","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"12895:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12895:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":938,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"12920:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":939,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"12924:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":933,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"12886:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12886:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":941,"nodeType":"EmitStatement","src":"12881:51:2"}]},"documentation":{"id":920,"nodeType":"StructuredDocumentation","src":"12662:101:2","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":943,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:2","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":922,"mutability":"mutable","name":"to","nameLocation":"12794:2:2","nodeType":"VariableDeclaration","scope":943,"src":"12786:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":921,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":924,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:2","nodeType":"VariableDeclaration","scope":943,"src":"12798:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:2"},"returnParameters":{"id":926,"nodeType":"ParameterList","parameters":[],"src":"12832:0:2"},"scope":1111,"src":"12768:171:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":974,"nodeType":"Block","src":"13198:184:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":954,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"13216:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":955,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"13225:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":953,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13208:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13208:55:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":959,"nodeType":"ExpressionStatement","src":"13208:55:2"},{"expression":{"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":960,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"13273:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":963,"indexExpression":{"id":961,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"13292:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":964,"indexExpression":{"id":962,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"13299:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":965,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"13311:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":967,"nodeType":"ExpressionStatement","src":"13273:46:2"},{"eventCall":{"arguments":[{"id":969,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"13349:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":970,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"13356:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":971,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"13366:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":968,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"13334:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13334:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":973,"nodeType":"EmitStatement","src":"13329:46:2"}]},"documentation":{"id":944,"nodeType":"StructuredDocumentation","src":"12945:125:2","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":975,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:2","nodeType":"FunctionDefinition","parameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":946,"mutability":"mutable","name":"owner","nameLocation":"13120:5:2","nodeType":"VariableDeclaration","scope":975,"src":"13112:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":945,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":948,"mutability":"mutable","name":"operator","nameLocation":"13143:8:2","nodeType":"VariableDeclaration","scope":975,"src":"13135:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":947,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":950,"mutability":"mutable","name":"approved","nameLocation":"13166:8:2","nodeType":"VariableDeclaration","scope":975,"src":"13161:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":949,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:2"},"returnParameters":{"id":952,"nodeType":"ParameterList","parameters":[],"src":"13198:0:2"},"scope":1111,"src":"13075:307:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":988,"nodeType":"Block","src":"13529:70:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":983,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"13555:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":982,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"13547:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13547:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":981,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13539:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13539:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":987,"nodeType":"ExpressionStatement","src":"13539:53:2"}]},"documentation":{"id":976,"nodeType":"StructuredDocumentation","src":"13388:73:2","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":989,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:2","nodeType":"FunctionDefinition","parameters":{"id":979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":978,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:2","nodeType":"VariableDeclaration","scope":989,"src":"13490:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":977,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:2"},"returnParameters":{"id":980,"nodeType":"ParameterList","parameters":[],"src":"13529:0:2"},"scope":1111,"src":"13466:133:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1050,"nodeType":"Block","src":"14306:676:2","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1003,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"14320:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14323:10:2","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1415,"src":"14320:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14320:15:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1048,"nodeType":"Block","src":"14940:36:2","statements":[{"expression":{"hexValue":"74727565","id":1046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1002,"id":1047,"nodeType":"Return","src":"14954:11:2"}]},"id":1049,"nodeType":"IfStatement","src":"14316:660:2","trueBody":{"id":1045,"nodeType":"Block","src":"14337:597:2","statements":[{"clauses":[{"block":{"id":1025,"nodeType":"Block","src":"14451:91:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1019,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"14476:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1020,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"14486:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1245_$","typeString":"type(contract IERC721Receiver)"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14502:16:2","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1244,"src":"14486:32:2","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14519:8:2","memberName":"selector","nodeType":"MemberAccess","src":"14486:41:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1002,"id":1024,"nodeType":"Return","src":"14469:58:2"}]},"errorName":"","id":1026,"nodeType":"TryCatchClause","parameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"retval","nameLocation":"14443:6:2","nodeType":"VariableDeclaration","scope":1026,"src":"14436:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1016,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:2"},"src":"14427:115:2"},{"block":{"id":1042,"nodeType":"Block","src":"14571:353:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1030,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"14593:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14600:6:2","memberName":"length","nodeType":"MemberAccess","src":"14593:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1040,"nodeType":"Block","src":"14720:190:2","statements":[{"AST":{"nodeType":"YulBlock","src":"14806:86:2","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14843:2:2","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14847:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:2"},"nodeType":"YulFunctionCall","src":"14839:15:2"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14862:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14856:5:2"},"nodeType":"YulFunctionCall","src":"14856:13:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14832:6:2"},"nodeType":"YulFunctionCall","src":"14832:38:2"},"nodeType":"YulExpressionStatement","src":"14832:38:2"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1028,"isOffset":false,"isSlot":false,"src":"14847:6:2","valueSize":1},{"declaration":1028,"isOffset":false,"isSlot":false,"src":"14862:6:2","valueSize":1}],"id":1039,"nodeType":"InlineAssembly","src":"14797:95:2"}]},"id":1041,"nodeType":"IfStatement","src":"14589:321:2","trueBody":{"id":1038,"nodeType":"Block","src":"14613:101:2","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1034,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14635:60:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1037,"nodeType":"ExpressionStatement","src":"14635:60:2"}]}}]},"errorName":"","id":1043,"nodeType":"TryCatchClause","parameters":{"id":1029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"reason","nameLocation":"14563:6:2","nodeType":"VariableDeclaration","scope":1043,"src":"14550:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1027,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:2"},"src":"14543:381:2"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1010,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"14392:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14392:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1012,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"14406:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1013,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"14412:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1014,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"14421:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1007,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"14371:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1006,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"14355:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1245_$","typeString":"type(contract IERC721Receiver)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1245","typeString":"contract IERC721Receiver"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14375:16:2","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1244,"src":"14355:36:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14355:71:2","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1044,"nodeType":"TryStatement","src":"14351:573:2"}]}}]},"documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"13605:541:2","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":1051,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:2","nodeType":"FunctionDefinition","parameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"from","nameLocation":"14200:4:2","nodeType":"VariableDeclaration","scope":1051,"src":"14192:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":994,"mutability":"mutable","name":"to","nameLocation":"14222:2:2","nodeType":"VariableDeclaration","scope":1051,"src":"14214:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":993,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":996,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:2","nodeType":"VariableDeclaration","scope":1051,"src":"14234:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":995,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":998,"mutability":"mutable","name":"data","nameLocation":"14272:4:2","nodeType":"VariableDeclaration","scope":1051,"src":"14259:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":997,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:2"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1051,"src":"14300:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1000,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:2"},"scope":1111,"src":"14151:831:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1096,"nodeType":"Block","src":"15856:238:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1063,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"15870:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15882:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15870:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1095,"nodeType":"IfStatement","src":"15866:222:2","trueBody":{"id":1094,"nodeType":"Block","src":"15885:203:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1066,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"15903:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15919:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15911:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"15911:7:2","typeDescriptions":{}}},"id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15911:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15903:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1079,"nodeType":"IfStatement","src":"15899:85:2","trueBody":{"id":1078,"nodeType":"Block","src":"15923:61:2","statements":[{"expression":{"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1072,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"15941:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1074,"indexExpression":{"id":1073,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"15951:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15941:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1075,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"15960:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15941:28:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1077,"nodeType":"ExpressionStatement","src":"15941:28:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1080,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"16001:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16015:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16007:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1081,"name":"address","nodeType":"ElementaryTypeName","src":"16007:7:2","typeDescriptions":{}}},"id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16007:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16001:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1093,"nodeType":"IfStatement","src":"15997:81:2","trueBody":{"id":1092,"nodeType":"Block","src":"16019:59:2","statements":[{"expression":{"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1086,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"16037:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1088,"indexExpression":{"id":1087,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"16047:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16037:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1089,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"16054:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16037:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1091,"nodeType":"ExpressionStatement","src":"16037:26:2"}]}}]}}]},"documentation":{"id":1052,"nodeType":"StructuredDocumentation","src":"14988:705:2","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1097,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:2","nodeType":"FunctionDefinition","parameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1054,"mutability":"mutable","name":"from","nameLocation":"15745:4:2","nodeType":"VariableDeclaration","scope":1097,"src":"15737:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1053,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1056,"mutability":"mutable","name":"to","nameLocation":"15767:2:2","nodeType":"VariableDeclaration","scope":1097,"src":"15759:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1055,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1058,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1097,"src":"15779:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1057,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1060,"mutability":"mutable","name":"batchSize","nameLocation":"15823:9:2","nodeType":"VariableDeclaration","scope":1097,"src":"15815:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1059,"name":"uint256","nodeType":"ElementaryTypeName","src":"15815:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:111:2"},"returnParameters":{"id":1062,"nodeType":"ParameterList","parameters":[],"src":"15856:0:2"},"scope":1111,"src":"15698:396:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1109,"nodeType":"Block","src":"16951:2:2","statements":[]},"documentation":{"id":1098,"nodeType":"StructuredDocumentation","src":"16100:695:2","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1110,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16809:19:2","nodeType":"FunctionDefinition","parameters":{"id":1107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1100,"mutability":"mutable","name":"from","nameLocation":"16846:4:2","nodeType":"VariableDeclaration","scope":1110,"src":"16838:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1099,"name":"address","nodeType":"ElementaryTypeName","src":"16838:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1102,"mutability":"mutable","name":"to","nameLocation":"16868:2:2","nodeType":"VariableDeclaration","scope":1110,"src":"16860:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1101,"name":"address","nodeType":"ElementaryTypeName","src":"16860:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1104,"mutability":"mutable","name":"firstTokenId","nameLocation":"16888:12:2","nodeType":"VariableDeclaration","scope":1110,"src":"16880:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1103,"name":"uint256","nodeType":"ElementaryTypeName","src":"16880:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1106,"mutability":"mutable","name":"batchSize","nameLocation":"16918:9:2","nodeType":"VariableDeclaration","scope":1110,"src":"16910:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1105,"name":"uint256","nodeType":"ElementaryTypeName","src":"16910:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16828:105:2"},"returnParameters":{"id":1108,"nodeType":"ParameterList","parameters":[],"src":"16951:0:2"},"scope":1111,"src":"16800:153:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1112,"src":"628:16327:2","usedErrors":[]}],"src":"107:16849:2"},"id":2},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[2034],"IERC721":[1227]},"id":1228,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1113,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:3"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1114,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1228,"sourceUnit":2035,"src":"133:47:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1116,"name":"IERC165","nameLocations":["271:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2034,"src":"271:7:3"},"id":1117,"nodeType":"InheritanceSpecifier","src":"271:7:3"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1115,"nodeType":"StructuredDocumentation","src":"182:67:3","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1227,"linearizedBaseContracts":[1227,2034],"name":"IERC721","nameLocation":"260:7:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1118,"nodeType":"StructuredDocumentation","src":"285:88:3","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1126,"name":"Transfer","nameLocation":"384:8:3","nodeType":"EventDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:3","nodeType":"VariableDeclaration","scope":1126,"src":"393:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1119,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1122,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:3","nodeType":"VariableDeclaration","scope":1126,"src":"415:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1121,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1124,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:3","nodeType":"VariableDeclaration","scope":1126,"src":"435:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1123,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:3"},"src":"378:82:3"},{"anonymous":false,"documentation":{"id":1127,"nodeType":"StructuredDocumentation","src":"466:94:3","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1135,"name":"Approval","nameLocation":"571:8:3","nodeType":"EventDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1129,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:3","nodeType":"VariableDeclaration","scope":1135,"src":"580:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1128,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1131,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:3","nodeType":"VariableDeclaration","scope":1135,"src":"603:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1130,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1133,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:3","nodeType":"VariableDeclaration","scope":1135,"src":"629:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1132,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:3"},"src":"565:89:3"},{"anonymous":false,"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"660:117:3","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1144,"name":"ApprovalForAll","nameLocation":"788:14:3","nodeType":"EventDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:3","nodeType":"VariableDeclaration","scope":1144,"src":"803:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1137,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1140,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:3","nodeType":"VariableDeclaration","scope":1144,"src":"826:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1139,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1142,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:3","nodeType":"VariableDeclaration","scope":1144,"src":"852:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1141,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:3"},"src":"782:85:3"},{"documentation":{"id":1145,"nodeType":"StructuredDocumentation","src":"873:76:3","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1152,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:3","nodeType":"FunctionDefinition","parameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1147,"mutability":"mutable","name":"owner","nameLocation":"981:5:3","nodeType":"VariableDeclaration","scope":1152,"src":"973:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1146,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:3"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"balance","nameLocation":"1019:7:3","nodeType":"VariableDeclaration","scope":1152,"src":"1011:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1149,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:3"},"scope":1227,"src":"954:74:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1153,"nodeType":"StructuredDocumentation","src":"1034:131:3","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1160,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:3","nodeType":"FunctionDefinition","parameters":{"id":1156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1155,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:3","nodeType":"VariableDeclaration","scope":1160,"src":"1187:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1154,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:3"},"returnParameters":{"id":1159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"owner","nameLocation":"1235:5:3","nodeType":"VariableDeclaration","scope":1160,"src":"1227:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1157,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:3"},"scope":1227,"src":"1170:72:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1161,"nodeType":"StructuredDocumentation","src":"1248:556:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1172,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:3","nodeType":"FunctionDefinition","parameters":{"id":1170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"from","nameLocation":"1852:4:3","nodeType":"VariableDeclaration","scope":1172,"src":"1844:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1162,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1165,"mutability":"mutable","name":"to","nameLocation":"1874:2:3","nodeType":"VariableDeclaration","scope":1172,"src":"1866:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:3","nodeType":"VariableDeclaration","scope":1172,"src":"1886:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1166,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1169,"mutability":"mutable","name":"data","nameLocation":"1926:4:3","nodeType":"VariableDeclaration","scope":1172,"src":"1911:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1168,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:3"},"returnParameters":{"id":1171,"nodeType":"ParameterList","parameters":[],"src":"1945:0:3"},"scope":1227,"src":"1809:137:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1173,"nodeType":"StructuredDocumentation","src":"1952:687:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1182,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:3","nodeType":"FunctionDefinition","parameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1175,"mutability":"mutable","name":"from","nameLocation":"2687:4:3","nodeType":"VariableDeclaration","scope":1182,"src":"2679:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1174,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1177,"mutability":"mutable","name":"to","nameLocation":"2709:2:3","nodeType":"VariableDeclaration","scope":1182,"src":"2701:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1176,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:3","nodeType":"VariableDeclaration","scope":1182,"src":"2721:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:3"},"returnParameters":{"id":1181,"nodeType":"ParameterList","parameters":[],"src":"2751:0:3"},"scope":1227,"src":"2644:108:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1183,"nodeType":"StructuredDocumentation","src":"2758:732:3","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1192,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:3","nodeType":"FunctionDefinition","parameters":{"id":1190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"from","nameLocation":"3534:4:3","nodeType":"VariableDeclaration","scope":1192,"src":"3526:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1184,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1187,"mutability":"mutable","name":"to","nameLocation":"3556:2:3","nodeType":"VariableDeclaration","scope":1192,"src":"3548:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1186,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1189,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:3","nodeType":"VariableDeclaration","scope":1192,"src":"3568:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1188,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:3"},"returnParameters":{"id":1191,"nodeType":"ParameterList","parameters":[],"src":"3598:0:3"},"scope":1227,"src":"3495:104:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1193,"nodeType":"StructuredDocumentation","src":"3605:452:3","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1200,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:3","nodeType":"FunctionDefinition","parameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1195,"mutability":"mutable","name":"to","nameLocation":"4087:2:3","nodeType":"VariableDeclaration","scope":1200,"src":"4079:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1194,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1197,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:3","nodeType":"VariableDeclaration","scope":1200,"src":"4091:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1196,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:3"},"returnParameters":{"id":1199,"nodeType":"ParameterList","parameters":[],"src":"4116:0:3"},"scope":1227,"src":"4062:55:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1201,"nodeType":"StructuredDocumentation","src":"4123:309:3","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1208,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:3","nodeType":"FunctionDefinition","parameters":{"id":1206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1203,"mutability":"mutable","name":"operator","nameLocation":"4472:8:3","nodeType":"VariableDeclaration","scope":1208,"src":"4464:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1202,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:3","nodeType":"VariableDeclaration","scope":1208,"src":"4482:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1204,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:3"},"returnParameters":{"id":1207,"nodeType":"ParameterList","parameters":[],"src":"4506:0:3"},"scope":1227,"src":"4437:70:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1209,"nodeType":"StructuredDocumentation","src":"4513:139:3","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1216,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:3","nodeType":"FunctionDefinition","parameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:3","nodeType":"VariableDeclaration","scope":1216,"src":"4678:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1210,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:3"},"returnParameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1214,"mutability":"mutable","name":"operator","nameLocation":"4726:8:3","nodeType":"VariableDeclaration","scope":1216,"src":"4718:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1213,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:3"},"scope":1227,"src":"4657:79:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1217,"nodeType":"StructuredDocumentation","src":"4742:138:3","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1226,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:3","nodeType":"FunctionDefinition","parameters":{"id":1222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"mutability":"mutable","name":"owner","nameLocation":"4919:5:3","nodeType":"VariableDeclaration","scope":1226,"src":"4911:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1221,"mutability":"mutable","name":"operator","nameLocation":"4934:8:3","nodeType":"VariableDeclaration","scope":1226,"src":"4926:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1220,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:3"},"returnParameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1226,"src":"4967:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1223,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:3"},"scope":1227,"src":"4885:88:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1228,"src":"250:4725:3","usedErrors":[]}],"src":"108:4868:3"},"id":3},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1245]},"id":1246,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1229,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1230,"nodeType":"StructuredDocumentation","src":"141:152:4","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1245,"linearizedBaseContracts":[1245],"name":"IERC721Receiver","nameLocation":"304:15:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1231,"nodeType":"StructuredDocumentation","src":"326:493:4","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1244,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:4","nodeType":"FunctionDefinition","parameters":{"id":1240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1233,"mutability":"mutable","name":"operator","nameLocation":"867:8:4","nodeType":"VariableDeclaration","scope":1244,"src":"859:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1232,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1235,"mutability":"mutable","name":"from","nameLocation":"893:4:4","nodeType":"VariableDeclaration","scope":1244,"src":"885:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1234,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1237,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:4","nodeType":"VariableDeclaration","scope":1244,"src":"907:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1236,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1239,"mutability":"mutable","name":"data","nameLocation":"947:4:4","nodeType":"VariableDeclaration","scope":1244,"src":"932:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1238,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:4"},"returnParameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1242,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1244,"src":"976:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1241,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:4"},"scope":1245,"src":"824:160:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1246,"src":"294:692:4","usedErrors":[]}],"src":"116:871:4"},"id":4},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","exportedSymbols":{"Address":[1727],"Context":[1749],"ERC165":[2022],"ERC721":[1111],"ERC721URIStorage":[1370],"IERC165":[2034],"IERC721":[1227],"IERC721Metadata":[1397],"IERC721Receiver":[1245],"Math":[2899],"Strings":[1998]},"id":1371,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1247,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":1248,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1371,"sourceUnit":1112,"src":"153:23:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1250,"name":"ERC721","nameLocations":["286:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":1111,"src":"286:6:5"},"id":1251,"nodeType":"InheritanceSpecifier","src":"286:6:5"}],"canonicalName":"ERC721URIStorage","contractDependencies":[],"contractKind":"contract","documentation":{"id":1249,"nodeType":"StructuredDocumentation","src":"178:69:5","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":false,"id":1370,"linearizedBaseContracts":[1370,1111,1397,1227,2022,2034,1749],"name":"ERC721URIStorage","nameLocation":"266:16:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1254,"libraryName":{"id":1252,"name":"Strings","nameLocations":["305:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1998,"src":"305:7:5"},"nodeType":"UsingForDirective","src":"299:26:5","typeName":{"id":1253,"name":"uint256","nodeType":"ElementaryTypeName","src":"317:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1258,"mutability":"mutable","name":"_tokenURIs","nameLocation":"405:10:5","nodeType":"VariableDeclaration","scope":1370,"src":"370:45:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":1257,"keyType":{"id":1255,"name":"uint256","nodeType":"ElementaryTypeName","src":"378:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"370:26:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueType":{"id":1256,"name":"string","nodeType":"ElementaryTypeName","src":"389:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[371],"body":{"id":1316,"nodeType":"Block","src":"570:520:5","statements":[{"expression":{"arguments":[{"id":1268,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"595:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1267,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"580:14:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"580:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1270,"nodeType":"ExpressionStatement","src":"580:23:5"},{"assignments":[1272],"declarations":[{"constant":false,"id":1272,"mutability":"mutable","name":"_tokenURI","nameLocation":"628:9:5","nodeType":"VariableDeclaration","scope":1316,"src":"614:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1271,"name":"string","nodeType":"ElementaryTypeName","src":"614:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1276,"initialValue":{"baseExpression":{"id":1273,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"640:10:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1275,"indexExpression":{"id":1274,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"651:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"640:19:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"614:45:5"},{"assignments":[1278],"declarations":[{"constant":false,"id":1278,"mutability":"mutable","name":"base","nameLocation":"683:4:5","nodeType":"VariableDeclaration","scope":1316,"src":"669:18:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1277,"name":"string","nodeType":"ElementaryTypeName","src":"669:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1281,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1279,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"690:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"690:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"669:31:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1284,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"779:4:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"773:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1282,"name":"bytes","nodeType":"ElementaryTypeName","src":"773:5:5","typeDescriptions":{}}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"773:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"785:6:5","memberName":"length","nodeType":"MemberAccess","src":"773:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"795:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"773:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1292,"nodeType":"IfStatement","src":"769:70:5","trueBody":{"id":1291,"nodeType":"Block","src":"798:41:5","statements":[{"expression":{"id":1289,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"819:9:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1266,"id":1290,"nodeType":"Return","src":"812:16:5"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1295,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"947:9:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"941:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1293,"name":"bytes","nodeType":"ElementaryTypeName","src":"941:5:5","typeDescriptions":{}}},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"941:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"958:6:5","memberName":"length","nodeType":"MemberAccess","src":"941:23:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"967:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"941:27:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1310,"nodeType":"IfStatement","src":"937:106:5","trueBody":{"id":1309,"nodeType":"Block","src":"970:73:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1304,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"1015:4:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1305,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"1021:9:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1302,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"998:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1002:12:5","memberName":"encodePacked","nodeType":"MemberAccess","src":"998:16:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"998:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"991:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1300,"name":"string","nodeType":"ElementaryTypeName","src":"991:6:5","typeDescriptions":{}}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"991:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1266,"id":1308,"nodeType":"Return","src":"984:48:5"}]}},{"expression":{"arguments":[{"id":1313,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"1075:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1311,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1060:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1370_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1066:8:5","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":371,"src":"1060:14:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1060:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1266,"id":1315,"nodeType":"Return","src":"1053:30:5"}]},"documentation":{"id":1259,"nodeType":"StructuredDocumentation","src":"422:55:5","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1317,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"491:8:5","nodeType":"FunctionDefinition","overrides":{"id":1263,"nodeType":"OverrideSpecifier","overrides":[],"src":"537:8:5"},"parameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"tokenId","nameLocation":"508:7:5","nodeType":"VariableDeclaration","scope":1317,"src":"500:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1260,"name":"uint256","nodeType":"ElementaryTypeName","src":"500:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"499:17:5"},"returnParameters":{"id":1266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1317,"src":"555:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1264,"name":"string","nodeType":"ElementaryTypeName","src":"555:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"554:15:5"},"scope":1370,"src":"482:608:5","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1338,"nodeType":"Block","src":"1318:133:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1327,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"1344:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1326,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"1336:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1336:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e","id":1329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1354:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""},"value":"ERC721URIStorage: URI set of nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""}],"id":1325,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1328:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1328:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1331,"nodeType":"ExpressionStatement","src":"1328:75:5"},{"expression":{"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1332,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"1413:10:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1334,"indexExpression":{"id":1333,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"1424:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1413:19:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1335,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"1435:9:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1413:31:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1337,"nodeType":"ExpressionStatement","src":"1413:31:5"}]},"documentation":{"id":1318,"nodeType":"StructuredDocumentation","src":"1096:136:5","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":1339,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1246:12:5","nodeType":"FunctionDefinition","parameters":{"id":1323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1320,"mutability":"mutable","name":"tokenId","nameLocation":"1267:7:5","nodeType":"VariableDeclaration","scope":1339,"src":"1259:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1319,"name":"uint256","nodeType":"ElementaryTypeName","src":"1259:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"_tokenURI","nameLocation":"1290:9:5","nodeType":"VariableDeclaration","scope":1339,"src":"1276:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1321,"name":"string","nodeType":"ElementaryTypeName","src":"1276:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1258:42:5"},"returnParameters":{"id":1324,"nodeType":"ParameterList","parameters":[],"src":"1318:0:5"},"scope":1370,"src":"1237:214:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[834],"body":{"id":1368,"nodeType":"Block","src":"1727:142:5","statements":[{"expression":{"arguments":[{"id":1349,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"1749:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1346,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1737:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1370_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1743:5:5","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":834,"src":"1737:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1737:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1351,"nodeType":"ExpressionStatement","src":"1737:20:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"baseExpression":{"id":1354,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"1778:10:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1356,"indexExpression":{"id":1355,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"1789:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1778:19:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":1353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1772:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1352,"name":"bytes","nodeType":"ElementaryTypeName","src":"1772:5:5","typeDescriptions":{}}},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1799:6:5","memberName":"length","nodeType":"MemberAccess","src":"1772:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1809:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1772:38:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1367,"nodeType":"IfStatement","src":"1768:95:5","trueBody":{"id":1366,"nodeType":"Block","src":"1812:51:5","statements":[{"expression":{"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"1826:26:5","subExpression":{"baseExpression":{"id":1361,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"1833:10:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1363,"indexExpression":{"id":1362,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"1844:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1833:19:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1365,"nodeType":"ExpressionStatement","src":"1826:26:5"}]}}]},"documentation":{"id":1340,"nodeType":"StructuredDocumentation","src":"1457:207:5","text":" @dev See {ERC721-_burn}. This override additionally checks to see if a\n token-specific URI was set for the token, and if so, it deletes the token URI from\n the storage mapping."},"id":1369,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"1678:5:5","nodeType":"FunctionDefinition","overrides":{"id":1344,"nodeType":"OverrideSpecifier","overrides":[],"src":"1718:8:5"},"parameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1342,"mutability":"mutable","name":"tokenId","nameLocation":"1692:7:5","nodeType":"VariableDeclaration","scope":1369,"src":"1684:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1341,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1683:17:5"},"returnParameters":{"id":1345,"nodeType":"ParameterList","parameters":[],"src":"1727:0:5"},"scope":1370,"src":"1669:200:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1371,"src":"248:1623:5","usedErrors":[]}],"src":"128:1744:5"},"id":5},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[2034],"IERC721":[1227],"IERC721Metadata":[1397]},"id":1398,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1372,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1373,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1398,"sourceUnit":1228,"src":"137:24:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1375,"name":"IERC721","nameLocations":["326:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1227,"src":"326:7:6"},"id":1376,"nodeType":"InheritanceSpecifier","src":"326:7:6"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1374,"nodeType":"StructuredDocumentation","src":"163:133:6","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1397,"linearizedBaseContracts":[1397,1227,2034],"name":"IERC721Metadata","nameLocation":"307:15:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1377,"nodeType":"StructuredDocumentation","src":"340:58:6","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1382,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:6","nodeType":"FunctionDefinition","parameters":{"id":1378,"nodeType":"ParameterList","parameters":[],"src":"416:2:6"},"returnParameters":{"id":1381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1382,"src":"442:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1379,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:6"},"scope":1397,"src":"403:54:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1383,"nodeType":"StructuredDocumentation","src":"463:60:6","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1388,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:6","nodeType":"FunctionDefinition","parameters":{"id":1384,"nodeType":"ParameterList","parameters":[],"src":"543:2:6"},"returnParameters":{"id":1387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1388,"src":"569:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1385,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:6"},"scope":1397,"src":"528:56:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1389,"nodeType":"StructuredDocumentation","src":"590:90:6","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1396,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:6","nodeType":"FunctionDefinition","parameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:6","nodeType":"VariableDeclaration","scope":1396,"src":"703:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1390,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:6"},"returnParameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1396,"src":"743:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1393,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:6"},"scope":1397,"src":"685:73:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1398,"src":"297:463:6","usedErrors":[]}],"src":"112:649:6"},"id":6},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1727]},"id":1728,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1399,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1400,"nodeType":"StructuredDocumentation","src":"126:67:7","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1727,"linearizedBaseContracts":[1727],"name":"Address","nameLocation":"202:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1414,"nodeType":"Block","src":"1241:254:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1408,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"1465:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:7","memberName":"code","nodeType":"MemberAccess","src":"1465:12:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:7","memberName":"length","nodeType":"MemberAccess","src":"1465:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1407,"id":1413,"nodeType":"Return","src":"1458:30:7"}]},"documentation":{"id":1401,"nodeType":"StructuredDocumentation","src":"216:954:7","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1415,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:7","nodeType":"FunctionDefinition","parameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1403,"mutability":"mutable","name":"account","nameLocation":"1203:7:7","nodeType":"VariableDeclaration","scope":1415,"src":"1195:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1402,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:7"},"returnParameters":{"id":1407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1406,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1415,"src":"1235:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1405,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:7"},"scope":1727,"src":"1175:320:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1448,"nodeType":"Block","src":"2483:241:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1426,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1727","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1727","typeString":"library Address"}],"id":1425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1424,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:7","typeDescriptions":{}}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:7","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1429,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"2526:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1423,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1433,"nodeType":"ExpressionStatement","src":"2493:73:7"},{"assignments":[1435,null],"declarations":[{"constant":false,"id":1435,"mutability":"mutable","name":"success","nameLocation":"2583:7:7","nodeType":"VariableDeclaration","scope":1448,"src":"2578:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1434,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1442,"initialValue":{"arguments":[{"hexValue":"","id":1440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1436,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"2596:9:7","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:7","memberName":"call","nodeType":"MemberAccess","src":"2596:14:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1438,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"2618:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:7"},{"expression":{"arguments":[{"id":1444,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"2647:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1443,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1447,"nodeType":"ExpressionStatement","src":"2639:78:7"}]},"documentation":{"id":1416,"nodeType":"StructuredDocumentation","src":"1501:906:7","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1449,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:7","nodeType":"FunctionDefinition","parameters":{"id":1421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1418,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:7","nodeType":"VariableDeclaration","scope":1449,"src":"2431:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1420,"mutability":"mutable","name":"amount","nameLocation":"2466:6:7","nodeType":"VariableDeclaration","scope":1449,"src":"2458:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1419,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:7"},"returnParameters":{"id":1422,"nodeType":"ParameterList","parameters":[],"src":"2483:0:7"},"scope":1727,"src":"2412:312:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1466,"nodeType":"Block","src":"3555:96:7","statements":[{"expression":{"arguments":[{"id":1460,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"3594:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1461,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"3602:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1459,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1507,1551],"referencedDeclaration":1551,"src":"3572:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1458,"id":1465,"nodeType":"Return","src":"3565:79:7"}]},"documentation":{"id":1450,"nodeType":"StructuredDocumentation","src":"2730:731:7","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1467,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:7","nodeType":"FunctionDefinition","parameters":{"id":1455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1452,"mutability":"mutable","name":"target","nameLocation":"3496:6:7","nodeType":"VariableDeclaration","scope":1467,"src":"3488:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1451,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1454,"mutability":"mutable","name":"data","nameLocation":"3517:4:7","nodeType":"VariableDeclaration","scope":1467,"src":"3504:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1453,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:7"},"returnParameters":{"id":1458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1457,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1467,"src":"3541:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1456,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:7"},"scope":1727,"src":"3466:185:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1486,"nodeType":"Block","src":"4020:76:7","statements":[{"expression":{"arguments":[{"id":1480,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"4059:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1481,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"4067:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1483,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"4076:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1479,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1507,1551],"referencedDeclaration":1551,"src":"4037:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1478,"id":1485,"nodeType":"Return","src":"4030:59:7"}]},"documentation":{"id":1468,"nodeType":"StructuredDocumentation","src":"3657:211:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1487,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:7","nodeType":"FunctionDefinition","parameters":{"id":1475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1470,"mutability":"mutable","name":"target","nameLocation":"3912:6:7","nodeType":"VariableDeclaration","scope":1487,"src":"3904:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1469,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1472,"mutability":"mutable","name":"data","nameLocation":"3941:4:7","nodeType":"VariableDeclaration","scope":1487,"src":"3928:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1471,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1474,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:7","nodeType":"VariableDeclaration","scope":1487,"src":"3955:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1473,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:7"},"returnParameters":{"id":1478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1477,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1487,"src":"4006:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1476,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:7"},"scope":1727,"src":"3873:223:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1506,"nodeType":"Block","src":"4601:111:7","statements":[{"expression":{"arguments":[{"id":1500,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"4640:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1501,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"4648:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1502,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"4654:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1499,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1507,1551],"referencedDeclaration":1551,"src":"4618:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1498,"id":1505,"nodeType":"Return","src":"4611:94:7"}]},"documentation":{"id":1488,"nodeType":"StructuredDocumentation","src":"4102:351:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1507,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:7","nodeType":"FunctionDefinition","parameters":{"id":1495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1490,"mutability":"mutable","name":"target","nameLocation":"4506:6:7","nodeType":"VariableDeclaration","scope":1507,"src":"4498:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1489,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1492,"mutability":"mutable","name":"data","nameLocation":"4535:4:7","nodeType":"VariableDeclaration","scope":1507,"src":"4522:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1491,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1494,"mutability":"mutable","name":"value","nameLocation":"4557:5:7","nodeType":"VariableDeclaration","scope":1507,"src":"4549:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1493,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:7"},"returnParameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1507,"src":"4587:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1496,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:7"},"scope":1727,"src":"4458:254:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1550,"nodeType":"Block","src":"5139:267:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1524,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1727","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1727","typeString":"library Address"}],"id":1523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1522,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:7","typeDescriptions":{}}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:7","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"5182:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1521,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1531,"nodeType":"ExpressionStatement","src":"5149:81:7"},{"assignments":[1533,1535],"declarations":[{"constant":false,"id":1533,"mutability":"mutable","name":"success","nameLocation":"5246:7:7","nodeType":"VariableDeclaration","scope":1550,"src":"5241:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1532,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1535,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:7","nodeType":"VariableDeclaration","scope":1550,"src":"5255:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1534,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1542,"initialValue":{"arguments":[{"id":1540,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"5308:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1536,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"5282:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:7","memberName":"call","nodeType":"MemberAccess","src":"5282:11:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"5301:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:7"},{"expression":{"arguments":[{"id":1544,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"5357:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1545,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"5365:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1546,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"5374:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1547,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"5386:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1543,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"5330:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1520,"id":1549,"nodeType":"Return","src":"5323:76:7"}]},"documentation":{"id":1508,"nodeType":"StructuredDocumentation","src":"4718:237:7","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1551,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:7","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1510,"mutability":"mutable","name":"target","nameLocation":"5008:6:7","nodeType":"VariableDeclaration","scope":1551,"src":"5000:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1509,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1512,"mutability":"mutable","name":"data","nameLocation":"5037:4:7","nodeType":"VariableDeclaration","scope":1551,"src":"5024:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1511,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1514,"mutability":"mutable","name":"value","nameLocation":"5059:5:7","nodeType":"VariableDeclaration","scope":1551,"src":"5051:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1513,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1516,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:7","nodeType":"VariableDeclaration","scope":1551,"src":"5074:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1515,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:7"},"returnParameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1551,"src":"5125:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1518,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:7"},"scope":1727,"src":"4960:446:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1567,"nodeType":"Block","src":"5683:97:7","statements":[{"expression":{"arguments":[{"id":1562,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"5719:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1563,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"5727:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1561,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1568,1597],"referencedDeclaration":1597,"src":"5700:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1560,"id":1566,"nodeType":"Return","src":"5693:80:7"}]},"documentation":{"id":1552,"nodeType":"StructuredDocumentation","src":"5412:166:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1568,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:7","nodeType":"FunctionDefinition","parameters":{"id":1557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"target","nameLocation":"5619:6:7","nodeType":"VariableDeclaration","scope":1568,"src":"5611:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1553,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1556,"mutability":"mutable","name":"data","nameLocation":"5640:4:7","nodeType":"VariableDeclaration","scope":1568,"src":"5627:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1555,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:7"},"returnParameters":{"id":1560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1568,"src":"5669:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1558,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:7"},"scope":1727,"src":"5583:197:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1596,"nodeType":"Block","src":"6122:168:7","statements":[{"assignments":[1581,1583],"declarations":[{"constant":false,"id":1581,"mutability":"mutable","name":"success","nameLocation":"6138:7:7","nodeType":"VariableDeclaration","scope":1596,"src":"6133:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1580,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1583,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:7","nodeType":"VariableDeclaration","scope":1596,"src":"6147:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1582,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1588,"initialValue":{"arguments":[{"id":1586,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"6192:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1584,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"6174:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:7","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:7","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:7"},{"expression":{"arguments":[{"id":1590,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"6241:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1591,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"6249:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1592,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"6258:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1593,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"6270:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1589,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"6214:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1579,"id":1595,"nodeType":"Return","src":"6207:76:7"}]},"documentation":{"id":1569,"nodeType":"StructuredDocumentation","src":"5786:173:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1597,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:7","nodeType":"FunctionDefinition","parameters":{"id":1576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1571,"mutability":"mutable","name":"target","nameLocation":"6009:6:7","nodeType":"VariableDeclaration","scope":1597,"src":"6001:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1570,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1573,"mutability":"mutable","name":"data","nameLocation":"6038:4:7","nodeType":"VariableDeclaration","scope":1597,"src":"6025:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1572,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1575,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:7","nodeType":"VariableDeclaration","scope":1597,"src":"6052:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1574,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:7"},"returnParameters":{"id":1579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1578,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1597,"src":"6108:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1577,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:7"},"scope":1727,"src":"5964:326:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1613,"nodeType":"Block","src":"6566:101:7","statements":[{"expression":{"arguments":[{"id":1608,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"6604:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1609,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"6612:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1607,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1614,1643],"referencedDeclaration":1643,"src":"6583:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1606,"id":1612,"nodeType":"Return","src":"6576:84:7"}]},"documentation":{"id":1598,"nodeType":"StructuredDocumentation","src":"6296:168:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1614,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:7","nodeType":"FunctionDefinition","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1600,"mutability":"mutable","name":"target","nameLocation":"6507:6:7","nodeType":"VariableDeclaration","scope":1614,"src":"6499:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1599,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1602,"mutability":"mutable","name":"data","nameLocation":"6528:4:7","nodeType":"VariableDeclaration","scope":1614,"src":"6515:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1601,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:7"},"returnParameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1605,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1614,"src":"6552:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1604,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:7"},"scope":1727,"src":"6469:198:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1642,"nodeType":"Block","src":"7008:170:7","statements":[{"assignments":[1627,1629],"declarations":[{"constant":false,"id":1627,"mutability":"mutable","name":"success","nameLocation":"7024:7:7","nodeType":"VariableDeclaration","scope":1642,"src":"7019:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1626,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1629,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:7","nodeType":"VariableDeclaration","scope":1642,"src":"7033:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1628,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1634,"initialValue":{"arguments":[{"id":1632,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"7080:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1630,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"7060:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:7","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:7","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:7"},{"expression":{"arguments":[{"id":1636,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"7129:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1637,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"7137:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1638,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"7146:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1639,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"7158:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1635,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"7102:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1625,"id":1641,"nodeType":"Return","src":"7095:76:7"}]},"documentation":{"id":1615,"nodeType":"StructuredDocumentation","src":"6673:175:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1643,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:7","nodeType":"FunctionDefinition","parameters":{"id":1622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1617,"mutability":"mutable","name":"target","nameLocation":"6900:6:7","nodeType":"VariableDeclaration","scope":1643,"src":"6892:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1616,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1619,"mutability":"mutable","name":"data","nameLocation":"6929:4:7","nodeType":"VariableDeclaration","scope":1643,"src":"6916:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1618,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1621,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:7","nodeType":"VariableDeclaration","scope":1643,"src":"6943:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1620,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:7"},"returnParameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1643,"src":"6994:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1623,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:7"},"scope":1727,"src":"6853:325:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1681,"nodeType":"Block","src":"7660:434:7","statements":[{"condition":{"id":1657,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"7674:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1679,"nodeType":"Block","src":"8030:58:7","statements":[{"expression":{"arguments":[{"id":1675,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"8052:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1676,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"8064:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1674,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"8044:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1678,"nodeType":"ExpressionStatement","src":"8044:33:7"}]},"id":1680,"nodeType":"IfStatement","src":"7670:418:7","trueBody":{"id":1673,"nodeType":"Block","src":"7683:341:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1658,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"7701:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:7","memberName":"length","nodeType":"MemberAccess","src":"7701:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1670,"nodeType":"IfStatement","src":"7697:286:7","trueBody":{"id":1669,"nodeType":"Block","src":"7725:258:7","statements":[{"expression":{"arguments":[{"arguments":[{"id":1664,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"7927:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1663,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"7916:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1662,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1668,"nodeType":"ExpressionStatement","src":"7908:60:7"}]}},{"expression":{"id":1671,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"8003:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1656,"id":1672,"nodeType":"Return","src":"7996:17:7"}]}}]},"documentation":{"id":1644,"nodeType":"StructuredDocumentation","src":"7184:277:7","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1682,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:7","nodeType":"FunctionDefinition","parameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1646,"mutability":"mutable","name":"target","nameLocation":"7519:6:7","nodeType":"VariableDeclaration","scope":1682,"src":"7511:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1645,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1648,"mutability":"mutable","name":"success","nameLocation":"7540:7:7","nodeType":"VariableDeclaration","scope":1682,"src":"7535:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1647,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1650,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:7","nodeType":"VariableDeclaration","scope":1682,"src":"7557:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1649,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1652,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:7","nodeType":"VariableDeclaration","scope":1682,"src":"7590:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1651,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:7"},"returnParameters":{"id":1656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1682,"src":"7646:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1654,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:7"},"scope":1727,"src":"7466:628:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1705,"nodeType":"Block","src":"8475:135:7","statements":[{"condition":{"id":1694,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"8489:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1703,"nodeType":"Block","src":"8546:58:7","statements":[{"expression":{"arguments":[{"id":1699,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"8568:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1700,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"8580:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1698,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"8560:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1702,"nodeType":"ExpressionStatement","src":"8560:33:7"}]},"id":1704,"nodeType":"IfStatement","src":"8485:119:7","trueBody":{"id":1697,"nodeType":"Block","src":"8498:42:7","statements":[{"expression":{"id":1695,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"8519:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1693,"id":1696,"nodeType":"Return","src":"8512:17:7"}]}}]},"documentation":{"id":1683,"nodeType":"StructuredDocumentation","src":"8100:210:7","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1706,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:7","nodeType":"FunctionDefinition","parameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1685,"mutability":"mutable","name":"success","nameLocation":"8355:7:7","nodeType":"VariableDeclaration","scope":1706,"src":"8350:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1684,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1687,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:7","nodeType":"VariableDeclaration","scope":1706,"src":"8372:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1686,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1689,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:7","nodeType":"VariableDeclaration","scope":1706,"src":"8405:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1688,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:7"},"returnParameters":{"id":1693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1706,"src":"8461:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1691,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:7"},"scope":1727,"src":"8315:295:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1725,"nodeType":"Block","src":"8699:457:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1713,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"8775:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:7","memberName":"length","nodeType":"MemberAccess","src":"8775:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1723,"nodeType":"Block","src":"9105:45:7","statements":[{"expression":{"arguments":[{"id":1720,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"9126:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1719,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1722,"nodeType":"ExpressionStatement","src":"9119:20:7"}]},"id":1724,"nodeType":"IfStatement","src":"8771:379:7","trueBody":{"id":1718,"nodeType":"Block","src":"8798:301:7","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:7","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:7","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:7"},"nodeType":"YulFunctionCall","src":"8997:17:7"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:7","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:7"},"nodeType":"YulFunctionCall","src":"9038:19:7"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:7"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:7"},"nodeType":"YulFunctionCall","src":"9031:44:7"},"nodeType":"YulExpressionStatement","src":"9031:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1708,"isOffset":false,"isSlot":false,"src":"9003:10:7","valueSize":1},{"declaration":1708,"isOffset":false,"isSlot":false,"src":"9046:10:7","valueSize":1}],"id":1717,"nodeType":"InlineAssembly","src":"8947:142:7"}]}}]},"id":1726,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:7","nodeType":"FunctionDefinition","parameters":{"id":1711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:7","nodeType":"VariableDeclaration","scope":1726,"src":"8633:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1707,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1710,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:7","nodeType":"VariableDeclaration","scope":1726,"src":"8658:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1709,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:7"},"returnParameters":{"id":1712,"nodeType":"ParameterList","parameters":[],"src":"8699:0:7"},"scope":1727,"src":"8616:540:7","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1728,"src":"194:8964:7","usedErrors":[]}],"src":"101:9058:7"},"id":7},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1749]},"id":1750,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1729,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:8"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1730,"nodeType":"StructuredDocumentation","src":"111:496:8","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1749,"linearizedBaseContracts":[1749],"name":"Context","nameLocation":"626:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1738,"nodeType":"Block","src":"702:34:8","statements":[{"expression":{"expression":{"id":1735,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:8","memberName":"sender","nodeType":"MemberAccess","src":"719:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1734,"id":1737,"nodeType":"Return","src":"712:17:8"}]},"id":1739,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:8","nodeType":"FunctionDefinition","parameters":{"id":1731,"nodeType":"ParameterList","parameters":[],"src":"659:2:8"},"returnParameters":{"id":1734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1739,"src":"693:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1732,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:8"},"scope":1749,"src":"640:96:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1747,"nodeType":"Block","src":"809:32:8","statements":[{"expression":{"expression":{"id":1744,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:8","memberName":"data","nodeType":"MemberAccess","src":"826:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1743,"id":1746,"nodeType":"Return","src":"819:15:8"}]},"id":1748,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:8","nodeType":"FunctionDefinition","parameters":{"id":1740,"nodeType":"ParameterList","parameters":[],"src":"759:2:8"},"returnParameters":{"id":1743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1748,"src":"793:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1741,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:8"},"scope":1749,"src":"742:99:8","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1750,"src":"608:235:8","usedErrors":[]}],"src":"86:758:8"},"id":8},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[1823]},"id":1824,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1751,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":1752,"nodeType":"StructuredDocumentation","src":"112:311:9","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":1823,"linearizedBaseContracts":[1823],"name":"Counters","nameLocation":"432:8:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":1755,"members":[{"constant":false,"id":1754,"mutability":"mutable","name":"_value","nameLocation":"794:6:9","nodeType":"VariableDeclaration","scope":1755,"src":"786:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1753,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:9","nodeType":"StructDefinition","scope":1823,"src":"447:374:9","visibility":"public"},{"body":{"id":1766,"nodeType":"Block","src":"901:38:9","statements":[{"expression":{"expression":{"id":1763,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"918:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1764,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"926:6:9","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"918:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1762,"id":1765,"nodeType":"Return","src":"911:21:9"}]},"id":1767,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:9","nodeType":"FunctionDefinition","parameters":{"id":1759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1758,"mutability":"mutable","name":"counter","nameLocation":"860:7:9","nodeType":"VariableDeclaration","scope":1767,"src":"844:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1757,"nodeType":"UserDefinedTypeName","pathNode":{"id":1756,"name":"Counter","nameLocations":["844:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"844:7:9"},"referencedDeclaration":1755,"src":"844:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:9"},"returnParameters":{"id":1762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1767,"src":"892:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1760,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:9"},"scope":1823,"src":"827:112:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1780,"nodeType":"Block","src":"998:70:9","statements":[{"id":1779,"nodeType":"UncheckedBlock","src":"1008:54:9","statements":[{"expression":{"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1773,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"1032:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1040:6:9","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"1032:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1778,"nodeType":"ExpressionStatement","src":"1032:19:9"}]}]},"id":1781,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:9","nodeType":"FunctionDefinition","parameters":{"id":1771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1770,"mutability":"mutable","name":"counter","nameLocation":"980:7:9","nodeType":"VariableDeclaration","scope":1781,"src":"964:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1769,"nodeType":"UserDefinedTypeName","pathNode":{"id":1768,"name":"Counter","nameLocations":["964:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"964:7:9"},"referencedDeclaration":1755,"src":"964:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:9"},"returnParameters":{"id":1772,"nodeType":"ParameterList","parameters":[],"src":"998:0:9"},"scope":1823,"src":"945:123:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1808,"nodeType":"Block","src":"1127:176:9","statements":[{"assignments":[1788],"declarations":[{"constant":false,"id":1788,"mutability":"mutable","name":"value","nameLocation":"1145:5:9","nodeType":"VariableDeclaration","scope":1808,"src":"1137:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1787,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1791,"initialValue":{"expression":{"id":1789,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"1153:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1790,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1161:6:9","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"1153:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1793,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"1185:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":1796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":1792,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:49:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1798,"nodeType":"ExpressionStatement","src":"1177:49:9"},{"id":1807,"nodeType":"UncheckedBlock","src":"1236:61:9","statements":[{"expression":{"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1799,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"1260:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1801,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1268:6:9","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"1260:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1802,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"1277:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1806,"nodeType":"ExpressionStatement","src":"1260:26:9"}]}]},"id":1809,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:9","nodeType":"FunctionDefinition","parameters":{"id":1785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1784,"mutability":"mutable","name":"counter","nameLocation":"1109:7:9","nodeType":"VariableDeclaration","scope":1809,"src":"1093:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1783,"nodeType":"UserDefinedTypeName","pathNode":{"id":1782,"name":"Counter","nameLocations":["1093:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"1093:7:9"},"referencedDeclaration":1755,"src":"1093:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:9"},"returnParameters":{"id":1786,"nodeType":"ParameterList","parameters":[],"src":"1127:0:9"},"scope":1823,"src":"1074:229:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1821,"nodeType":"Block","src":"1358:35:9","statements":[{"expression":{"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1815,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"1368:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1817,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1376:6:9","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"1368:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1820,"nodeType":"ExpressionStatement","src":"1368:18:9"}]},"id":1822,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:9","nodeType":"FunctionDefinition","parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"counter","nameLocation":"1340:7:9","nodeType":"VariableDeclaration","scope":1822,"src":"1324:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1811,"nodeType":"UserDefinedTypeName","pathNode":{"id":1810,"name":"Counter","nameLocations":["1324:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"1324:7:9"},"referencedDeclaration":1755,"src":"1324:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:9"},"returnParameters":{"id":1814,"nodeType":"ParameterList","parameters":[],"src":"1358:0:9"},"scope":1823,"src":"1309:84:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1824,"src":"424:971:9","usedErrors":[]}],"src":"87:1309:9"},"id":9},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2899],"Strings":[1998]},"id":1999,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1825,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1826,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1999,"sourceUnit":2900,"src":"126:25:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1827,"nodeType":"StructuredDocumentation","src":"153:34:10","text":" @dev String operations."},"fullyImplemented":true,"id":1998,"linearizedBaseContracts":[1998],"name":"Strings","nameLocation":"196:7:10","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1830,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:10","nodeType":"VariableDeclaration","scope":1998,"src":"210:54:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1828,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1833,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:10","nodeType":"VariableDeclaration","scope":1998,"src":"270:43:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1831,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:10","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1880,"nodeType":"Block","src":"486:625:10","statements":[{"id":1879,"nodeType":"UncheckedBlock","src":"496:609:10","statements":[{"assignments":[1842],"declarations":[{"constant":false,"id":1842,"mutability":"mutable","name":"length","nameLocation":"528:6:10","nodeType":"VariableDeclaration","scope":1879,"src":"520:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1841,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1849,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1845,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"548:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1843,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"537:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2899_$","typeString":"type(library Math)"}},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:10","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2736,"src":"537:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:10"},{"assignments":[1851],"declarations":[{"constant":false,"id":1851,"mutability":"mutable","name":"buffer","nameLocation":"586:6:10","nodeType":"VariableDeclaration","scope":1879,"src":"572:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1850,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1856,"initialValue":{"arguments":[{"id":1854,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"606:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1852,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:10"},{"assignments":[1858],"declarations":[{"constant":false,"id":1858,"mutability":"mutable","name":"ptr","nameLocation":"635:3:10","nodeType":"VariableDeclaration","scope":1879,"src":"627:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1859,"nodeType":"VariableDeclarationStatement","src":"627:11:10"},{"AST":{"nodeType":"YulBlock","src":"708:67:10","statements":[{"nodeType":"YulAssignment","src":"726:35:10","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:10","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:10"},"nodeType":"YulFunctionCall","src":"745:15:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:10"},"nodeType":"YulFunctionCall","src":"733:28:10"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1851,"isOffset":false,"isSlot":false,"src":"737:6:10","valueSize":1},{"declaration":1842,"isOffset":false,"isSlot":false,"src":"753:6:10","valueSize":1},{"declaration":1858,"isOffset":false,"isSlot":false,"src":"726:3:10","valueSize":1}],"id":1860,"nodeType":"InlineAssembly","src":"699:76:10"},{"body":{"id":1875,"nodeType":"Block","src":"801:267:10","statements":[{"expression":{"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:10","subExpression":{"id":1862,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"819:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1864,"nodeType":"ExpressionStatement","src":"819:5:10"},{"AST":{"nodeType":"YulBlock","src":"902:84:10","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:10"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:10","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:10"},"nodeType":"YulFunctionCall","src":"942:14:10"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:10"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:10"},"nodeType":"YulFunctionCall","src":"937:30:10"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:10"},"nodeType":"YulFunctionCall","src":"924:44:10"},"nodeType":"YulExpressionStatement","src":"924:44:10"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1830,"isOffset":false,"isSlot":false,"src":"958:8:10","valueSize":1},{"declaration":1858,"isOffset":false,"isSlot":false,"src":"932:3:10","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"946:5:10","valueSize":1}],"id":1865,"nodeType":"InlineAssembly","src":"893:93:10"},{"expression":{"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1866,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"1003:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1869,"nodeType":"ExpressionStatement","src":"1003:11:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"1036:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1874,"nodeType":"IfStatement","src":"1032:21:10","trueBody":{"id":1873,"nodeType":"Break","src":"1048:5:10"}}]},"condition":{"hexValue":"74727565","id":1861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1876,"nodeType":"WhileStatement","src":"788:280:10"},{"expression":{"id":1877,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"1088:6:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1840,"id":1878,"nodeType":"Return","src":"1081:13:10"}]}]},"documentation":{"id":1834,"nodeType":"StructuredDocumentation","src":"320:90:10","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1881,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:10","nodeType":"FunctionDefinition","parameters":{"id":1837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1836,"mutability":"mutable","name":"value","nameLocation":"441:5:10","nodeType":"VariableDeclaration","scope":1881,"src":"433:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1835,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:10"},"returnParameters":{"id":1840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1881,"src":"471:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1838,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:10"},"scope":1998,"src":"415:696:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1900,"nodeType":"Block","src":"1290:100:10","statements":[{"id":1899,"nodeType":"UncheckedBlock","src":"1300:84:10","statements":[{"expression":{"arguments":[{"id":1890,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"1343:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1893,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"1362:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1891,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"1350:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2899_$","typeString":"type(library Math)"}},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:10","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2859,"src":"1350:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1889,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1901,1977,1997],"referencedDeclaration":1977,"src":"1331:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1888,"id":1898,"nodeType":"Return","src":"1324:49:10"}]}]},"documentation":{"id":1882,"nodeType":"StructuredDocumentation","src":"1117:94:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1901,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:10","nodeType":"FunctionDefinition","parameters":{"id":1885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1884,"mutability":"mutable","name":"value","nameLocation":"1245:5:10","nodeType":"VariableDeclaration","scope":1901,"src":"1237:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1883,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:10"},"returnParameters":{"id":1888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1901,"src":"1275:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1886,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:10"},"scope":1998,"src":"1216:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1976,"nodeType":"Block","src":"1603:347:10","statements":[{"assignments":[1912],"declarations":[{"constant":false,"id":1912,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:10","nodeType":"VariableDeclaration","scope":1976,"src":"1613:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1911,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1921,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1916,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"1649:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1914,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1913,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:10"},{"expression":{"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1922,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"1670:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1924,"indexExpression":{"hexValue":"30","id":1923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1927,"nodeType":"ExpressionStatement","src":"1670:15:10"},{"expression":{"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1928,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"1695:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1930,"indexExpression":{"hexValue":"31","id":1929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1933,"nodeType":"ExpressionStatement","src":"1695:15:10"},{"body":{"id":1962,"nodeType":"Block","src":"1765:83:10","statements":[{"expression":{"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1948,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"1779:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1950,"indexExpression":{"id":1949,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"1786:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1951,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"1791:8:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1955,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1952,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"1800:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:10","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1957,"nodeType":"ExpressionStatement","src":"1779:33:10"},{"expression":{"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1958,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"1826:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1961,"nodeType":"ExpressionStatement","src":"1826:11:10"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1942,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"1753:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1963,"initializationExpression":{"assignments":[1935],"declarations":[{"constant":false,"id":1935,"mutability":"mutable","name":"i","nameLocation":"1733:1:10","nodeType":"VariableDeclaration","scope":1963,"src":"1725:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1934,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1941,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1937,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"1741:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:10"},"loopExpression":{"expression":{"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:10","subExpression":{"id":1945,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"1762:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1947,"nodeType":"ExpressionStatement","src":"1760:3:10"},"nodeType":"ForStatement","src":"1720:128:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"1865:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1964,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1970,"nodeType":"ExpressionStatement","src":"1857:55:10"},{"expression":{"arguments":[{"id":1973,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"1936:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1971,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:10","typeDescriptions":{}}},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1910,"id":1975,"nodeType":"Return","src":"1922:21:10"}]},"documentation":{"id":1902,"nodeType":"StructuredDocumentation","src":"1396:112:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1977,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:10","nodeType":"FunctionDefinition","parameters":{"id":1907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1904,"mutability":"mutable","name":"value","nameLocation":"1542:5:10","nodeType":"VariableDeclaration","scope":1977,"src":"1534:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1903,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1906,"mutability":"mutable","name":"length","nameLocation":"1557:6:10","nodeType":"VariableDeclaration","scope":1977,"src":"1549:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1905,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:10"},"returnParameters":{"id":1910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1977,"src":"1588:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1908,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:10"},"scope":1998,"src":"1513:437:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1996,"nodeType":"Block","src":"2175:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1990,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"2220:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1988,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:10","typeDescriptions":{}}},"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1986,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:10","typeDescriptions":{}}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1993,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"2228:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1985,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1901,1977,1997],"referencedDeclaration":1977,"src":"2192:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1984,"id":1995,"nodeType":"Return","src":"2185:59:10"}]},"documentation":{"id":1978,"nodeType":"StructuredDocumentation","src":"1956:141:10","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1997,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:10","nodeType":"FunctionDefinition","parameters":{"id":1981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1980,"mutability":"mutable","name":"addr","nameLocation":"2131:4:10","nodeType":"VariableDeclaration","scope":1997,"src":"2123:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1979,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:10"},"returnParameters":{"id":1984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1997,"src":"2160:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1982,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:10"},"scope":1998,"src":"2102:149:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1999,"src":"188:2065:10","usedErrors":[]}],"src":"101:2153:10"},"id":10},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2022],"IERC165":[2034]},"id":2023,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2000,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:11"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2001,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2023,"sourceUnit":2035,"src":"124:23:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2003,"name":"IERC165","nameLocations":["754:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":2034,"src":"754:7:11"},"id":2004,"nodeType":"InheritanceSpecifier","src":"754:7:11"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2002,"nodeType":"StructuredDocumentation","src":"149:576:11","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2022,"linearizedBaseContracts":[2022,2034],"name":"ERC165","nameLocation":"744:6:11","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2033],"body":{"id":2020,"nodeType":"Block","src":"920:64:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2013,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"937:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2015,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"957:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2034_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2034_$","typeString":"type(contract IERC165)"}],"id":2014,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2034","typeString":"type(contract IERC165)"}},"id":2017,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2012,"id":2019,"nodeType":"Return","src":"930:47:11"}]},"documentation":{"id":2005,"nodeType":"StructuredDocumentation","src":"768:56:11","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2021,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:11","nodeType":"FunctionDefinition","overrides":{"id":2009,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:11"},"parameters":{"id":2008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2007,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:11","nodeType":"VariableDeclaration","scope":2021,"src":"856:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2006,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:11"},"returnParameters":{"id":2012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2021,"src":"914:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2010,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:11"},"scope":2022,"src":"829:155:11","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2023,"src":"726:260:11","usedErrors":[]}],"src":"99:888:11"},"id":11},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2034]},"id":2035,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2024,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2025,"nodeType":"StructuredDocumentation","src":"125:279:12","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2034,"linearizedBaseContracts":[2034],"name":"IERC165","nameLocation":"415:7:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2026,"nodeType":"StructuredDocumentation","src":"429:340:12","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2033,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:12","nodeType":"FunctionDefinition","parameters":{"id":2029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2028,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:12","nodeType":"VariableDeclaration","scope":2033,"src":"801:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2027,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:12"},"returnParameters":{"id":2032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2033,"src":"844:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2030,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:12"},"scope":2034,"src":"774:76:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2035,"src":"405:447:12","usedErrors":[]}],"src":"100:753:12"},"id":12},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2899]},"id":2900,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2036,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2037,"nodeType":"StructuredDocumentation","src":"128:73:13","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2899,"linearizedBaseContracts":[2899],"name":"Math","nameLocation":"210:4:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2041,"members":[{"id":2038,"name":"Down","nameLocation":"245:4:13","nodeType":"EnumValue","src":"245:4:13"},{"id":2039,"name":"Up","nameLocation":"287:2:13","nodeType":"EnumValue","src":"287:2:13"},{"id":2040,"name":"Zero","nameLocation":"318:4:13","nodeType":"EnumValue","src":"318:4:13"}],"name":"Rounding","nameLocation":"226:8:13","nodeType":"EnumDefinition","src":"221:122:13"},{"body":{"id":2058,"nodeType":"Block","src":"480:37:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2051,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"497:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2052,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"501:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2055,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"509:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:13","trueExpression":{"id":2054,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"505:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2050,"id":2057,"nodeType":"Return","src":"490:20:13"}]},"documentation":{"id":2042,"nodeType":"StructuredDocumentation","src":"349:59:13","text":" @dev Returns the largest of two numbers."},"id":2059,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:13","nodeType":"FunctionDefinition","parameters":{"id":2047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"mutability":"mutable","name":"a","nameLocation":"434:1:13","nodeType":"VariableDeclaration","scope":2059,"src":"426:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2043,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2046,"mutability":"mutable","name":"b","nameLocation":"445:1:13","nodeType":"VariableDeclaration","scope":2059,"src":"437:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2045,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:13"},"returnParameters":{"id":2050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2059,"src":"471:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:13"},"scope":2899,"src":"413:104:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2076,"nodeType":"Block","src":"655:37:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2069,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"672:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2070,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"676:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2073,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"684:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:13","trueExpression":{"id":2072,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"680:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2068,"id":2075,"nodeType":"Return","src":"665:20:13"}]},"documentation":{"id":2060,"nodeType":"StructuredDocumentation","src":"523:60:13","text":" @dev Returns the smallest of two numbers."},"id":2077,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:13","nodeType":"FunctionDefinition","parameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2062,"mutability":"mutable","name":"a","nameLocation":"609:1:13","nodeType":"VariableDeclaration","scope":2077,"src":"601:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2064,"mutability":"mutable","name":"b","nameLocation":"620:1:13","nodeType":"VariableDeclaration","scope":2077,"src":"612:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2063,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:13"},"returnParameters":{"id":2068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2067,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2077,"src":"646:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2066,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:13"},"scope":2899,"src":"588:104:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2099,"nodeType":"Block","src":"876:82:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2087,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"931:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2088,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"935:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2090,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2091,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"941:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2092,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"945:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2094,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2086,"id":2098,"nodeType":"Return","src":"923:28:13"}]},"documentation":{"id":2078,"nodeType":"StructuredDocumentation","src":"698:102:13","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2100,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:13","nodeType":"FunctionDefinition","parameters":{"id":2083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2080,"mutability":"mutable","name":"a","nameLocation":"830:1:13","nodeType":"VariableDeclaration","scope":2100,"src":"822:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2079,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2082,"mutability":"mutable","name":"b","nameLocation":"841:1:13","nodeType":"VariableDeclaration","scope":2100,"src":"833:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:13"},"returnParameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2085,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2100,"src":"867:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2084,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:13"},"scope":2899,"src":"805:153:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2124,"nodeType":"Block","src":"1228:123:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2110,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"1316:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2114,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"1330:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2117,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2118,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"1339:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:13","trueExpression":{"hexValue":"30","id":2113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2109,"id":2123,"nodeType":"Return","src":"1309:35:13"}]},"documentation":{"id":2101,"nodeType":"StructuredDocumentation","src":"964:188:13","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2125,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:13","nodeType":"FunctionDefinition","parameters":{"id":2106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2103,"mutability":"mutable","name":"a","nameLocation":"1182:1:13","nodeType":"VariableDeclaration","scope":2125,"src":"1174:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2102,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2105,"mutability":"mutable","name":"b","nameLocation":"1193:1:13","nodeType":"VariableDeclaration","scope":2125,"src":"1185:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2104,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:13"},"returnParameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2125,"src":"1219:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:13"},"scope":2899,"src":"1157:194:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2246,"nodeType":"Block","src":"1795:3797:13","statements":[{"id":2245,"nodeType":"UncheckedBlock","src":"1805:3781:13","statements":[{"assignments":[2138],"declarations":[{"constant":false,"id":2138,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:13","nodeType":"VariableDeclaration","scope":2245,"src":"2126:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2137,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2139,"nodeType":"VariableDeclarationStatement","src":"2126:13:13"},{"assignments":[2141],"declarations":[{"constant":false,"id":2141,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:13","nodeType":"VariableDeclaration","scope":2245,"src":"2198:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2140,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2142,"nodeType":"VariableDeclarationStatement","src":"2198:13:13"},{"AST":{"nodeType":"YulBlock","src":"2278:157:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:13","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:13"},"nodeType":"YulFunctionCall","src":"2319:6:13"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:13"},"nodeType":"YulFunctionCall","src":"2306:20:13"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:13","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:13"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:13"},"nodeType":"YulFunctionCall","src":"2352:9:13"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:13"}]},{"nodeType":"YulAssignment","src":"2378:43:13","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:13"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:13"},"nodeType":"YulFunctionCall","src":"2391:14:13"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:13"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:13"},"nodeType":"YulFunctionCall","src":"2407:13:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:13"},"nodeType":"YulFunctionCall","src":"2387:34:13"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:13"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2138,"isOffset":false,"isSlot":false,"src":"2343:5:13","valueSize":1},{"declaration":2138,"isOffset":false,"isSlot":false,"src":"2399:5:13","valueSize":1},{"declaration":2138,"isOffset":false,"isSlot":false,"src":"2414:5:13","valueSize":1},{"declaration":2141,"isOffset":false,"isSlot":false,"src":"2378:5:13","valueSize":1},{"declaration":2128,"isOffset":false,"isSlot":false,"src":"2313:1:13","valueSize":1},{"declaration":2128,"isOffset":false,"isSlot":false,"src":"2356:1:13","valueSize":1},{"declaration":2130,"isOffset":false,"isSlot":false,"src":"2316:1:13","valueSize":1},{"declaration":2130,"isOffset":false,"isSlot":false,"src":"2359:1:13","valueSize":1}],"id":2143,"nodeType":"InlineAssembly","src":"2269:166:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2144,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2516:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2152,"nodeType":"IfStatement","src":"2512:75:13","trueBody":{"id":2151,"nodeType":"Block","src":"2528:59:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2147,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"2553:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2148,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"2561:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2136,"id":2150,"nodeType":"Return","src":"2546:26:13"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2154,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"2697:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2155,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2711:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2153,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2158,"nodeType":"ExpressionStatement","src":"2689:28:13"},{"assignments":[2160],"declarations":[{"constant":false,"id":2160,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:13","nodeType":"VariableDeclaration","scope":2245,"src":"2973:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2159,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2161,"nodeType":"VariableDeclarationStatement","src":"2973:17:13"},{"AST":{"nodeType":"YulBlock","src":"3013:291:13","statements":[{"nodeType":"YulAssignment","src":"3082:38:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:13"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:13"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:13"},"nodeType":"YulFunctionCall","src":"3095:25:13"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:13"}]},{"nodeType":"YulAssignment","src":"3202:41:13","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:13"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:13"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:13"},"nodeType":"YulFunctionCall","src":"3222:20:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:13"},"nodeType":"YulFunctionCall","src":"3211:32:13"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:13"}]},{"nodeType":"YulAssignment","src":"3260:30:13","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:13"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:13"},"nodeType":"YulFunctionCall","src":"3269:21:13"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:13"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2132,"isOffset":false,"isSlot":false,"src":"3108:11:13","valueSize":1},{"declaration":2138,"isOffset":false,"isSlot":false,"src":"3236:5:13","valueSize":1},{"declaration":2138,"isOffset":false,"isSlot":false,"src":"3260:5:13","valueSize":1},{"declaration":2138,"isOffset":false,"isSlot":false,"src":"3273:5:13","valueSize":1},{"declaration":2141,"isOffset":false,"isSlot":false,"src":"3202:5:13","valueSize":1},{"declaration":2141,"isOffset":false,"isSlot":false,"src":"3215:5:13","valueSize":1},{"declaration":2160,"isOffset":false,"isSlot":false,"src":"3082:9:13","valueSize":1},{"declaration":2160,"isOffset":false,"isSlot":false,"src":"3225:9:13","valueSize":1},{"declaration":2160,"isOffset":false,"isSlot":false,"src":"3280:9:13","valueSize":1},{"declaration":2128,"isOffset":false,"isSlot":false,"src":"3102:1:13","valueSize":1},{"declaration":2130,"isOffset":false,"isSlot":false,"src":"3105:1:13","valueSize":1}],"id":2162,"nodeType":"InlineAssembly","src":"3004:300:13"},{"assignments":[2164],"declarations":[{"constant":false,"id":2164,"mutability":"mutable","name":"twos","nameLocation":"3619:4:13","nodeType":"VariableDeclaration","scope":2245,"src":"3611:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2163,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2172,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2165,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"3626:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:13","subExpression":{"id":2166,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"3642:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2170,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:13"},{"AST":{"nodeType":"YulBlock","src":"3681:362:13","statements":[{"nodeType":"YulAssignment","src":"3746:37:13","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:13"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:13"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:13"},"nodeType":"YulFunctionCall","src":"3761:22:13"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:13"}]},{"nodeType":"YulAssignment","src":"3850:25:13","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:13"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:13"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:13"},"nodeType":"YulFunctionCall","src":"3859:16:13"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:13"}]},{"nodeType":"YulAssignment","src":"3990:39:13","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:13","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:13"},"nodeType":"YulFunctionCall","src":"4006:12:13"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:13"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:13"},"nodeType":"YulFunctionCall","src":"4002:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:13"},"nodeType":"YulFunctionCall","src":"3998:31:13"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:13"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2132,"isOffset":false,"isSlot":false,"src":"3746:11:13","valueSize":1},{"declaration":2132,"isOffset":false,"isSlot":false,"src":"3765:11:13","valueSize":1},{"declaration":2138,"isOffset":false,"isSlot":false,"src":"3850:5:13","valueSize":1},{"declaration":2138,"isOffset":false,"isSlot":false,"src":"3863:5:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"3778:4:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"3870:4:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"3990:4:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"4013:4:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"4020:4:13","valueSize":1}],"id":2173,"nodeType":"InlineAssembly","src":"3672:371:13"},{"expression":{"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2174,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"4109:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"4118:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2176,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2164,"src":"4126:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2179,"nodeType":"ExpressionStatement","src":"4109:21:13"},{"assignments":[2181],"declarations":[{"constant":false,"id":2181,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:13","nodeType":"VariableDeclaration","scope":2245,"src":"4448:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2180,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2188,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2183,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4471:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2185,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:13"},{"expression":{"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2189,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"4704:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2191,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4719:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2192,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"4733:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2196,"nodeType":"ExpressionStatement","src":"4704:36:13"},{"expression":{"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2197,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"4773:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2199,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4788:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2200,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"4802:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2204,"nodeType":"ExpressionStatement","src":"4773:36:13"},{"expression":{"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2205,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"4843:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2207,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4858:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2208,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"4872:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2212,"nodeType":"ExpressionStatement","src":"4843:36:13"},{"expression":{"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2213,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"4913:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2215,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4928:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2216,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"4942:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2220,"nodeType":"ExpressionStatement","src":"4913:36:13"},{"expression":{"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2221,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"4983:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2223,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4998:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2224,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"5012:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2228,"nodeType":"ExpressionStatement","src":"4983:36:13"},{"expression":{"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2229,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"5054:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2231,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"5069:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2232,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"5083:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2236,"nodeType":"ExpressionStatement","src":"5054:36:13"},{"expression":{"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2237,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"5524:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2238,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"5533:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2239,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"5541:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2242,"nodeType":"ExpressionStatement","src":"5524:24:13"},{"expression":{"id":2243,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"5569:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2136,"id":2244,"nodeType":"Return","src":"5562:13:13"}]}]},"documentation":{"id":2126,"nodeType":"StructuredDocumentation","src":"1357:305:13","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2247,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:13","nodeType":"FunctionDefinition","parameters":{"id":2133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2128,"mutability":"mutable","name":"x","nameLocation":"1700:1:13","nodeType":"VariableDeclaration","scope":2247,"src":"1692:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2127,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2130,"mutability":"mutable","name":"y","nameLocation":"1719:1:13","nodeType":"VariableDeclaration","scope":2247,"src":"1711:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2129,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2132,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:13","nodeType":"VariableDeclaration","scope":2247,"src":"1730:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2131,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:13"},"returnParameters":{"id":2136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2135,"mutability":"mutable","name":"result","nameLocation":"1787:6:13","nodeType":"VariableDeclaration","scope":2247,"src":"1779:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2134,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:13"},"scope":2899,"src":"1667:3925:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2290,"nodeType":"Block","src":"5872:189:13","statements":[{"assignments":[2263],"declarations":[{"constant":false,"id":2263,"mutability":"mutable","name":"result","nameLocation":"5890:6:13","nodeType":"VariableDeclaration","scope":2290,"src":"5882:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2262,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2269,"initialValue":{"arguments":[{"id":2265,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"5906:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2266,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"5909:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2267,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"5912:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2264,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2247,2291],"referencedDeclaration":2247,"src":"5899:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:13"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"},"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2270,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2257,"src":"5938:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2271,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"5950:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2041_$","typeString":"type(enum Math.Rounding)"}},"id":2272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2039,"src":"5950:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"src":"5938:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2275,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"5972:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2276,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"5975:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2277,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"5978:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2274,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:13","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2287,"nodeType":"IfStatement","src":"5934:98:13","trueBody":{"id":2286,"nodeType":"Block","src":"5996:36:13","statements":[{"expression":{"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2282,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"6010:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2285,"nodeType":"ExpressionStatement","src":"6010:11:13"}]}},{"expression":{"id":2288,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"6048:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2261,"id":2289,"nodeType":"Return","src":"6041:13:13"}]},"documentation":{"id":2248,"nodeType":"StructuredDocumentation","src":"5598:121:13","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2291,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:13","nodeType":"FunctionDefinition","parameters":{"id":2258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2250,"mutability":"mutable","name":"x","nameLocation":"5757:1:13","nodeType":"VariableDeclaration","scope":2291,"src":"5749:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2249,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2252,"mutability":"mutable","name":"y","nameLocation":"5776:1:13","nodeType":"VariableDeclaration","scope":2291,"src":"5768:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2251,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2254,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:13","nodeType":"VariableDeclaration","scope":2291,"src":"5787:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2253,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2257,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:13","nodeType":"VariableDeclaration","scope":2291,"src":"5816:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"},"typeName":{"id":2256,"nodeType":"UserDefinedTypeName","pathNode":{"id":2255,"name":"Rounding","nameLocations":["5816:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2041,"src":"5816:8:13"},"referencedDeclaration":2041,"src":"5816:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:13"},"returnParameters":{"id":2261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2260,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2291,"src":"5863:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2259,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:13"},"scope":2899,"src":"5724:337:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2402,"nodeType":"Block","src":"6337:1585:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2299,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"6351:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2305,"nodeType":"IfStatement","src":"6347:45:13","trueBody":{"id":2304,"nodeType":"Block","src":"6359:33:13","statements":[{"expression":{"hexValue":"30","id":2302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2298,"id":2303,"nodeType":"Return","src":"6373:8:13"}]}},{"assignments":[2307],"declarations":[{"constant":false,"id":2307,"mutability":"mutable","name":"result","nameLocation":"7079:6:13","nodeType":"VariableDeclaration","scope":2402,"src":"7071:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2316,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2310,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"7099:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2309,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2571,2607],"referencedDeclaration":2571,"src":"7094:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2314,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:13"},{"id":2401,"nodeType":"UncheckedBlock","src":"7508:408:13","statements":[{"expression":{"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2317,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7532:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2318,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7542:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2319,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"7551:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2320,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7555:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2323,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2327,"nodeType":"ExpressionStatement","src":"7532:35:13"},{"expression":{"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2328,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7581:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2329,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7591:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2330,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"7600:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2331,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7604:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2334,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2338,"nodeType":"ExpressionStatement","src":"7581:35:13"},{"expression":{"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2339,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7630:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2340,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7640:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2341,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"7649:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2342,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7653:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2345,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2349,"nodeType":"ExpressionStatement","src":"7630:35:13"},{"expression":{"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2350,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7679:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2351,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7689:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2352,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"7698:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2353,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7702:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2356,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2360,"nodeType":"ExpressionStatement","src":"7679:35:13"},{"expression":{"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2361,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7728:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2362,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7738:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2363,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"7747:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2364,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7751:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2367,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2371,"nodeType":"ExpressionStatement","src":"7728:35:13"},{"expression":{"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2372,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7777:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2373,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7787:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2374,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"7796:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2375,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7800:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2378,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2382,"nodeType":"ExpressionStatement","src":"7777:35:13"},{"expression":{"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2383,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7826:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2384,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7836:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2385,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"7845:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2386,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7849:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2389,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2393,"nodeType":"ExpressionStatement","src":"7826:35:13"},{"expression":{"arguments":[{"id":2395,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7886:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2396,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"7894:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2397,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7898:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2394,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"7882:3:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2298,"id":2400,"nodeType":"Return","src":"7875:30:13"}]}]},"documentation":{"id":2292,"nodeType":"StructuredDocumentation","src":"6067:208:13","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2403,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:13","nodeType":"FunctionDefinition","parameters":{"id":2295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2294,"mutability":"mutable","name":"a","nameLocation":"6302:1:13","nodeType":"VariableDeclaration","scope":2403,"src":"6294:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2293,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:13"},"returnParameters":{"id":2298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2403,"src":"6328:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2296,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:13"},"scope":2899,"src":"6280:1642:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2438,"nodeType":"Block","src":"8098:161:13","statements":[{"id":2437,"nodeType":"UncheckedBlock","src":"8108:145:13","statements":[{"assignments":[2415],"declarations":[{"constant":false,"id":2415,"mutability":"mutable","name":"result","nameLocation":"8140:6:13","nodeType":"VariableDeclaration","scope":2437,"src":"8132:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2414,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2419,"initialValue":{"arguments":[{"id":2417,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2406,"src":"8154:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2416,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2403,2439],"referencedDeclaration":2403,"src":"8149:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2420,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8177:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2421,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"8187:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2422,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"8199:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2041_$","typeString":"type(enum Math.Rounding)"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2039,"src":"8199:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"src":"8187:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2425,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8214:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2426,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8223:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2428,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2406,"src":"8232:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:13","trueExpression":{"hexValue":"31","id":2431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2434,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2413,"id":2436,"nodeType":"Return","src":"8170:72:13"}]}]},"documentation":{"id":2404,"nodeType":"StructuredDocumentation","src":"7928:89:13","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2439,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:13","nodeType":"FunctionDefinition","parameters":{"id":2410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2406,"mutability":"mutable","name":"a","nameLocation":"8044:1:13","nodeType":"VariableDeclaration","scope":2439,"src":"8036:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2405,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2409,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:13","nodeType":"VariableDeclaration","scope":2439,"src":"8047:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"},"typeName":{"id":2408,"nodeType":"UserDefinedTypeName","pathNode":{"id":2407,"name":"Rounding","nameLocations":["8047:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2041,"src":"8047:8:13"},"referencedDeclaration":2041,"src":"8047:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:13"},"returnParameters":{"id":2413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2439,"src":"8089:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2411,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:13"},"scope":2899,"src":"8022:237:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2570,"nodeType":"Block","src":"8444:922:13","statements":[{"assignments":[2448],"declarations":[{"constant":false,"id":2448,"mutability":"mutable","name":"result","nameLocation":"8462:6:13","nodeType":"VariableDeclaration","scope":2570,"src":"8454:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2447,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2450,"initialValue":{"hexValue":"30","id":2449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:13"},{"id":2567,"nodeType":"UncheckedBlock","src":"8482:855:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2451,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"8510:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2465,"nodeType":"IfStatement","src":"8506:99:13","trueBody":{"id":2464,"nodeType":"Block","src":"8528:77:13","statements":[{"expression":{"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2456,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"8546:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2459,"nodeType":"ExpressionStatement","src":"8546:13:13"},{"expression":{"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2460,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"8577:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2463,"nodeType":"ExpressionStatement","src":"8577:13:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2466,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"8622:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2480,"nodeType":"IfStatement","src":"8618:96:13","trueBody":{"id":2479,"nodeType":"Block","src":"8639:75:13","statements":[{"expression":{"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"8657:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2474,"nodeType":"ExpressionStatement","src":"8657:12:13"},{"expression":{"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2475,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"8687:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2478,"nodeType":"ExpressionStatement","src":"8687:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2481,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"8731:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2495,"nodeType":"IfStatement","src":"8727:96:13","trueBody":{"id":2494,"nodeType":"Block","src":"8748:75:13","statements":[{"expression":{"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2486,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"8766:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2489,"nodeType":"ExpressionStatement","src":"8766:12:13"},{"expression":{"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2490,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"8796:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2493,"nodeType":"ExpressionStatement","src":"8796:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2496,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"8840:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2510,"nodeType":"IfStatement","src":"8836:96:13","trueBody":{"id":2509,"nodeType":"Block","src":"8857:75:13","statements":[{"expression":{"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2501,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"8875:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2504,"nodeType":"ExpressionStatement","src":"8875:12:13"},{"expression":{"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2505,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"8905:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2508,"nodeType":"ExpressionStatement","src":"8905:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"8949:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2525,"nodeType":"IfStatement","src":"8945:93:13","trueBody":{"id":2524,"nodeType":"Block","src":"8965:73:13","statements":[{"expression":{"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2516,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"8983:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2519,"nodeType":"ExpressionStatement","src":"8983:11:13"},{"expression":{"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2520,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"9012:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2523,"nodeType":"ExpressionStatement","src":"9012:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"9055:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2540,"nodeType":"IfStatement","src":"9051:93:13","trueBody":{"id":2539,"nodeType":"Block","src":"9071:73:13","statements":[{"expression":{"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2531,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"9089:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2534,"nodeType":"ExpressionStatement","src":"9089:11:13"},{"expression":{"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2535,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"9118:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2538,"nodeType":"ExpressionStatement","src":"9118:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"9161:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2555,"nodeType":"IfStatement","src":"9157:93:13","trueBody":{"id":2554,"nodeType":"Block","src":"9177:73:13","statements":[{"expression":{"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"9195:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2549,"nodeType":"ExpressionStatement","src":"9195:11:13"},{"expression":{"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2550,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"9224:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2553,"nodeType":"ExpressionStatement","src":"9224:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2556,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"9267:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2566,"nodeType":"IfStatement","src":"9263:64:13","trueBody":{"id":2565,"nodeType":"Block","src":"9283:44:13","statements":[{"expression":{"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"9301:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2564,"nodeType":"ExpressionStatement","src":"9301:11:13"}]}}]},{"expression":{"id":2568,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"9353:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2446,"id":2569,"nodeType":"Return","src":"9346:13:13"}]},"documentation":{"id":2440,"nodeType":"StructuredDocumentation","src":"8265:113:13","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2571,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:13","nodeType":"FunctionDefinition","parameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2442,"mutability":"mutable","name":"value","nameLocation":"8405:5:13","nodeType":"VariableDeclaration","scope":2571,"src":"8397:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2441,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:13"},"returnParameters":{"id":2446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2571,"src":"8435:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2444,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:13"},"scope":2899,"src":"8383:983:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2606,"nodeType":"Block","src":"9599:165:13","statements":[{"id":2605,"nodeType":"UncheckedBlock","src":"9609:149:13","statements":[{"assignments":[2583],"declarations":[{"constant":false,"id":2583,"mutability":"mutable","name":"result","nameLocation":"9641:6:13","nodeType":"VariableDeclaration","scope":2605,"src":"9633:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2582,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2587,"initialValue":{"arguments":[{"id":2585,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"9655:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2584,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2571,2607],"referencedDeclaration":2571,"src":"9650:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"9682:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2589,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"9692:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2590,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"9704:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2041_$","typeString":"type(enum Math.Rounding)"}},"id":2591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2039,"src":"9704:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"src":"9692:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2594,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"9724:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2596,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"9733:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:13","trueExpression":{"hexValue":"31","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2602,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2581,"id":2604,"nodeType":"Return","src":"9675:72:13"}]}]},"documentation":{"id":2572,"nodeType":"StructuredDocumentation","src":"9372:142:13","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2607,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:13","nodeType":"FunctionDefinition","parameters":{"id":2578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"mutability":"mutable","name":"value","nameLocation":"9541:5:13","nodeType":"VariableDeclaration","scope":2607,"src":"9533:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2573,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2577,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:13","nodeType":"VariableDeclaration","scope":2607,"src":"9548:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"},"typeName":{"id":2576,"nodeType":"UserDefinedTypeName","pathNode":{"id":2575,"name":"Rounding","nameLocations":["9548:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2041,"src":"9548:8:13"},"referencedDeclaration":2041,"src":"9548:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:13"},"returnParameters":{"id":2581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2580,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2607,"src":"9590:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2579,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:13"},"scope":2899,"src":"9519:245:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2735,"nodeType":"Block","src":"9951:828:13","statements":[{"assignments":[2616],"declarations":[{"constant":false,"id":2616,"mutability":"mutable","name":"result","nameLocation":"9969:6:13","nodeType":"VariableDeclaration","scope":2735,"src":"9961:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2615,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2618,"initialValue":{"hexValue":"30","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:13"},{"id":2732,"nodeType":"UncheckedBlock","src":"9989:761:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10017:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2635,"nodeType":"IfStatement","src":"10013:99:13","trueBody":{"id":2634,"nodeType":"Block","src":"10034:78:13","statements":[{"expression":{"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2624,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10052:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2629,"nodeType":"ExpressionStatement","src":"10052:15:13"},{"expression":{"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2630,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"10085:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2633,"nodeType":"ExpressionStatement","src":"10085:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10129:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2652,"nodeType":"IfStatement","src":"10125:99:13","trueBody":{"id":2651,"nodeType":"Block","src":"10146:78:13","statements":[{"expression":{"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10164:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2646,"nodeType":"ExpressionStatement","src":"10164:15:13"},{"expression":{"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2647,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"10197:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2650,"nodeType":"ExpressionStatement","src":"10197:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2653,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10241:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2656,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2669,"nodeType":"IfStatement","src":"10237:99:13","trueBody":{"id":2668,"nodeType":"Block","src":"10258:78:13","statements":[{"expression":{"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10276:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2663,"nodeType":"ExpressionStatement","src":"10276:15:13"},{"expression":{"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2664,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"10309:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2667,"nodeType":"ExpressionStatement","src":"10309:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10353:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2686,"nodeType":"IfStatement","src":"10349:96:13","trueBody":{"id":2685,"nodeType":"Block","src":"10369:76:13","statements":[{"expression":{"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10387:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2680,"nodeType":"ExpressionStatement","src":"10387:14:13"},{"expression":{"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2681,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"10419:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2684,"nodeType":"ExpressionStatement","src":"10419:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2687,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10462:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:13","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2703,"nodeType":"IfStatement","src":"10458:96:13","trueBody":{"id":2702,"nodeType":"Block","src":"10478:76:13","statements":[{"expression":{"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2692,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10496:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:13","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2697,"nodeType":"ExpressionStatement","src":"10496:14:13"},{"expression":{"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2698,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"10528:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2701,"nodeType":"ExpressionStatement","src":"10528:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2704,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10571:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:13","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2720,"nodeType":"IfStatement","src":"10567:96:13","trueBody":{"id":2719,"nodeType":"Block","src":"10587:76:13","statements":[{"expression":{"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10605:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:13","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2714,"nodeType":"ExpressionStatement","src":"10605:14:13"},{"expression":{"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2715,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"10637:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2718,"nodeType":"ExpressionStatement","src":"10637:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2721,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"10680:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2731,"nodeType":"IfStatement","src":"10676:64:13","trueBody":{"id":2730,"nodeType":"Block","src":"10696:44:13","statements":[{"expression":{"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2726,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"10714:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2729,"nodeType":"ExpressionStatement","src":"10714:11:13"}]}}]},{"expression":{"id":2733,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"10766:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2614,"id":2734,"nodeType":"Return","src":"10759:13:13"}]},"documentation":{"id":2608,"nodeType":"StructuredDocumentation","src":"9770:114:13","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2736,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:13","nodeType":"FunctionDefinition","parameters":{"id":2611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2610,"mutability":"mutable","name":"value","nameLocation":"9912:5:13","nodeType":"VariableDeclaration","scope":2736,"src":"9904:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2609,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:13"},"returnParameters":{"id":2614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2736,"src":"9942:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2612,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:13"},"scope":2899,"src":"9889:890:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2771,"nodeType":"Block","src":"11014:165:13","statements":[{"id":2770,"nodeType":"UncheckedBlock","src":"11024:149:13","statements":[{"assignments":[2748],"declarations":[{"constant":false,"id":2748,"mutability":"mutable","name":"result","nameLocation":"11056:6:13","nodeType":"VariableDeclaration","scope":2770,"src":"11048:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2747,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2752,"initialValue":{"arguments":[{"id":2750,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"11071:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2749,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2736,2772],"referencedDeclaration":2736,"src":"11065:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2753,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11098:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2754,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"11108:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2755,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"11120:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2041_$","typeString":"type(enum Math.Rounding)"}},"id":2756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2039,"src":"11120:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"src":"11108:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2759,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11139:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2761,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"11148:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:13","trueExpression":{"hexValue":"31","id":2764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2767,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2746,"id":2769,"nodeType":"Return","src":"11091:71:13"}]}]},"documentation":{"id":2737,"nodeType":"StructuredDocumentation","src":"10785:143:13","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2772,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:13","nodeType":"FunctionDefinition","parameters":{"id":2743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2739,"mutability":"mutable","name":"value","nameLocation":"10956:5:13","nodeType":"VariableDeclaration","scope":2772,"src":"10948:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2738,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2742,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:13","nodeType":"VariableDeclaration","scope":2772,"src":"10963:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"},"typeName":{"id":2741,"nodeType":"UserDefinedTypeName","pathNode":{"id":2740,"name":"Rounding","nameLocations":["10963:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2041,"src":"10963:8:13"},"referencedDeclaration":2041,"src":"10963:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:13"},"returnParameters":{"id":2746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2772,"src":"11005:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2744,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:13"},"scope":2899,"src":"10933:246:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2858,"nodeType":"Block","src":"11493:600:13","statements":[{"assignments":[2781],"declarations":[{"constant":false,"id":2781,"mutability":"mutable","name":"result","nameLocation":"11511:6:13","nodeType":"VariableDeclaration","scope":2858,"src":"11503:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2783,"initialValue":{"hexValue":"30","id":2782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:13"},{"id":2855,"nodeType":"UncheckedBlock","src":"11531:533:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2784,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"11559:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2798,"nodeType":"IfStatement","src":"11555:98:13","trueBody":{"id":2797,"nodeType":"Block","src":"11577:76:13","statements":[{"expression":{"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2789,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"11595:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2792,"nodeType":"ExpressionStatement","src":"11595:13:13"},{"expression":{"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2793,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"11626:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2796,"nodeType":"ExpressionStatement","src":"11626:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2799,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"11670:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2813,"nodeType":"IfStatement","src":"11666:95:13","trueBody":{"id":2812,"nodeType":"Block","src":"11687:74:13","statements":[{"expression":{"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2804,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"11705:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2807,"nodeType":"ExpressionStatement","src":"11705:12:13"},{"expression":{"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2808,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"11735:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2811,"nodeType":"ExpressionStatement","src":"11735:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"11778:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2828,"nodeType":"IfStatement","src":"11774:95:13","trueBody":{"id":2827,"nodeType":"Block","src":"11795:74:13","statements":[{"expression":{"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"11813:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2822,"nodeType":"ExpressionStatement","src":"11813:12:13"},{"expression":{"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2823,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"11843:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2826,"nodeType":"ExpressionStatement","src":"11843:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"11886:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2843,"nodeType":"IfStatement","src":"11882:95:13","trueBody":{"id":2842,"nodeType":"Block","src":"11903:74:13","statements":[{"expression":{"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2834,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"11921:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2837,"nodeType":"ExpressionStatement","src":"11921:12:13"},{"expression":{"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2838,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"11951:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2841,"nodeType":"ExpressionStatement","src":"11951:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"11994:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2854,"nodeType":"IfStatement","src":"11990:64:13","trueBody":{"id":2853,"nodeType":"Block","src":"12010:44:13","statements":[{"expression":{"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2849,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"12028:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2852,"nodeType":"ExpressionStatement","src":"12028:11:13"}]}}]},{"expression":{"id":2856,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"12080:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2779,"id":2857,"nodeType":"Return","src":"12073:13:13"}]},"documentation":{"id":2773,"nodeType":"StructuredDocumentation","src":"11185:240:13","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2859,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:13","nodeType":"FunctionDefinition","parameters":{"id":2776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2775,"mutability":"mutable","name":"value","nameLocation":"11454:5:13","nodeType":"VariableDeclaration","scope":2859,"src":"11446:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2774,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:13"},"returnParameters":{"id":2779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2859,"src":"11484:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2777,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:13"},"scope":2899,"src":"11430:663:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2897,"nodeType":"Block","src":"12329:173:13","statements":[{"id":2896,"nodeType":"UncheckedBlock","src":"12339:157:13","statements":[{"assignments":[2871],"declarations":[{"constant":false,"id":2871,"mutability":"mutable","name":"result","nameLocation":"12371:6:13","nodeType":"VariableDeclaration","scope":2896,"src":"12363:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2875,"initialValue":{"arguments":[{"id":2873,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"12387:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2872,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2859,2898],"referencedDeclaration":2859,"src":"12380:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2876,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"12414:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2877,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"12424:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2878,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"12436:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2041_$","typeString":"type(enum Math.Rounding)"}},"id":2879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:13","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2039,"src":"12436:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"src":"12424:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2882,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"12457:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2885,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2887,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"12471:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:13","trueExpression":{"hexValue":"31","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2893,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2869,"id":2895,"nodeType":"Return","src":"12407:78:13"}]}]},"documentation":{"id":2860,"nodeType":"StructuredDocumentation","src":"12099:143:13","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2898,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:13","nodeType":"FunctionDefinition","parameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2862,"mutability":"mutable","name":"value","nameLocation":"12271:5:13","nodeType":"VariableDeclaration","scope":2898,"src":"12263:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2861,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:13","nodeType":"VariableDeclaration","scope":2898,"src":"12278:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"},"typeName":{"id":2864,"nodeType":"UserDefinedTypeName","pathNode":{"id":2863,"name":"Rounding","nameLocations":["12278:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2041,"src":"12278:8:13"},"referencedDeclaration":2041,"src":"12278:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2041","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:13"},"returnParameters":{"id":2869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2868,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2898,"src":"12320:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2867,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:13"},"scope":2899,"src":"12247:255:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2900,"src":"202:12302:13","usedErrors":[]}],"src":"103:12402:13"},"id":13},"contracts/Mint.sol":{"ast":{"absolutePath":"contracts/Mint.sol","exportedSymbols":{"Address":[1727],"Context":[1749],"Counters":[1823],"ERC165":[2022],"ERC721":[1111],"ERC721URIStorage":[1370],"IERC165":[2034],"IERC721":[1227],"IERC721Metadata":[1397],"IERC721Receiver":[1245],"Math":[2899],"Mint":[3796],"Ownable":[112],"ReentrancyGuard":[166],"Strings":[1998]},"id":3797,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2901,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"33:23:14"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","id":2902,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3797,"sourceUnit":1371,"src":"140:78:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":2903,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3797,"sourceUnit":167,"src":"219:62:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":2904,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3797,"sourceUnit":1824,"src":"282:52:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":2905,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3797,"sourceUnit":1999,"src":"335:51:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":2906,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3797,"sourceUnit":113,"src":"388:52:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2907,"name":"ERC721URIStorage","nameLocations":["459:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"459:16:14"},"id":2908,"nodeType":"InheritanceSpecifier","src":"459:16:14"},{"baseName":{"id":2909,"name":"Ownable","nameLocations":["477:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"477:7:14"},"id":2910,"nodeType":"InheritanceSpecifier","src":"477:7:14"}],"canonicalName":"Mint","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3796,"linearizedBaseContracts":[3796,112,1370,1111,1397,1227,2022,2034,1749],"name":"Mint","nameLocation":"451:4:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2914,"libraryName":{"id":2911,"name":"Counters","nameLocations":["503:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1823,"src":"503:8:14"},"nodeType":"UsingForDirective","src":"497:36:14","typeName":{"id":2913,"nodeType":"UserDefinedTypeName","pathNode":{"id":2912,"name":"Counters.Counter","nameLocations":["516:8:14","525:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"516:16:14"},"referencedDeclaration":1755,"src":"516:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"functionSelector":"8d0a284b","id":2917,"mutability":"mutable","name":"goldsMinted","nameLocation":"562:11:14","nodeType":"VariableDeclaration","scope":3796,"src":"538:35:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage","typeString":"struct Counters.Counter"},"typeName":{"id":2916,"nodeType":"UserDefinedTypeName","pathNode":{"id":2915,"name":"Counters.Counter","nameLocations":["538:8:14","547:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"538:16:14"},"referencedDeclaration":1755,"src":"538:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"public"},{"constant":false,"functionSelector":"182ea932","id":2920,"mutability":"mutable","name":"diamondsMinted","nameLocation":"603:14:14","nodeType":"VariableDeclaration","scope":3796,"src":"579:38:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage","typeString":"struct Counters.Counter"},"typeName":{"id":2919,"nodeType":"UserDefinedTypeName","pathNode":{"id":2918,"name":"Counters.Counter","nameLocations":["579:8:14","588:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"579:16:14"},"referencedDeclaration":1755,"src":"579:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"public"},{"constant":false,"functionSelector":"a2309ff8","id":2923,"mutability":"mutable","name":"totalMinted","nameLocation":"647:11:14","nodeType":"VariableDeclaration","scope":3796,"src":"623:35:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage","typeString":"struct Counters.Counter"},"typeName":{"id":2922,"nodeType":"UserDefinedTypeName","pathNode":{"id":2921,"name":"Counters.Counter","nameLocations":["623:8:14","632:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":1755,"src":"623:16:14"},"referencedDeclaration":1755,"src":"623:16:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"public"},{"global":false,"id":2926,"libraryName":{"id":2924,"name":"Strings","nameLocations":["671:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":1998,"src":"671:7:14"},"nodeType":"UsingForDirective","src":"665:26:14","typeName":{"id":2925,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":2928,"mutability":"mutable","name":"baseURIVenus","nameLocation":"713:12:14","nodeType":"VariableDeclaration","scope":3796,"src":"697:28:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2927,"name":"string","nodeType":"ElementaryTypeName","src":"697:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2930,"mutability":"mutable","name":"baseURIMars_1","nameLocation":"747:13:14","nodeType":"VariableDeclaration","scope":3796,"src":"731:29:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2929,"name":"string","nodeType":"ElementaryTypeName","src":"731:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2932,"mutability":"mutable","name":"baseURIJupiter","nameLocation":"782:14:14","nodeType":"VariableDeclaration","scope":3796,"src":"766:30:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2931,"name":"string","nodeType":"ElementaryTypeName","src":"766:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2934,"mutability":"mutable","name":"baseURIUranus","nameLocation":"818:13:14","nodeType":"VariableDeclaration","scope":3796,"src":"802:29:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2933,"name":"string","nodeType":"ElementaryTypeName","src":"802:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2936,"mutability":"mutable","name":"baseURINeptune","nameLocation":"853:14:14","nodeType":"VariableDeclaration","scope":3796,"src":"837:30:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2935,"name":"string","nodeType":"ElementaryTypeName","src":"837:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2938,"mutability":"mutable","name":"baseURIMars_2","nameLocation":"889:13:14","nodeType":"VariableDeclaration","scope":3796,"src":"873:29:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2937,"name":"string","nodeType":"ElementaryTypeName","src":"873:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2940,"mutability":"mutable","name":"indexVenus","nameLocation":"922:10:14","nodeType":"VariableDeclaration","scope":3796,"src":"909:23:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2939,"name":"uint","nodeType":"ElementaryTypeName","src":"909:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2942,"mutability":"mutable","name":"indexMars_1","nameLocation":"951:11:14","nodeType":"VariableDeclaration","scope":3796,"src":"938:24:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2941,"name":"uint","nodeType":"ElementaryTypeName","src":"938:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2944,"mutability":"mutable","name":"indexJupiterG","nameLocation":"981:13:14","nodeType":"VariableDeclaration","scope":3796,"src":"968:26:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2943,"name":"uint","nodeType":"ElementaryTypeName","src":"968:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2946,"mutability":"mutable","name":"indexJupiterD","nameLocation":"1013:13:14","nodeType":"VariableDeclaration","scope":3796,"src":"1000:26:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2945,"name":"uint","nodeType":"ElementaryTypeName","src":"1000:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2948,"mutability":"mutable","name":"indexUranus","nameLocation":"1045:11:14","nodeType":"VariableDeclaration","scope":3796,"src":"1032:24:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2947,"name":"uint","nodeType":"ElementaryTypeName","src":"1032:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2950,"mutability":"mutable","name":"indexNeptune","nameLocation":"1075:12:14","nodeType":"VariableDeclaration","scope":3796,"src":"1062:25:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2949,"name":"uint","nodeType":"ElementaryTypeName","src":"1062:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2952,"mutability":"mutable","name":"indexMars_2","nameLocation":"1106:11:14","nodeType":"VariableDeclaration","scope":3796,"src":"1093:24:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2951,"name":"uint","nodeType":"ElementaryTypeName","src":"1093:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2954,"mutability":"mutable","name":"incAccount","nameLocation":"1140:10:14","nodeType":"VariableDeclaration","scope":3796,"src":"1124:26:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2953,"name":"address","nodeType":"ElementaryTypeName","src":"1124:15:14","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"functionSelector":"b69ef8a8","id":2956,"mutability":"mutable","name":"balance","nameLocation":"1168:7:14","nodeType":"VariableDeclaration","scope":3796,"src":"1156:19:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2955,"name":"uint","nodeType":"ElementaryTypeName","src":"1156:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"9cc11d02","id":2958,"mutability":"mutable","name":"canWhitelistforPreMint","nameLocation":"1194:22:14","nodeType":"VariableDeclaration","scope":3796,"src":"1182:34:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2957,"name":"bool","nodeType":"ElementaryTypeName","src":"1182:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"functionSelector":"ed5e57b8","id":2960,"mutability":"mutable","name":"canWhitelistforFreeMint","nameLocation":"1234:23:14","nodeType":"VariableDeclaration","scope":3796,"src":"1222:35:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2959,"name":"bool","nodeType":"ElementaryTypeName","src":"1222:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"functionSelector":"65f9c656","id":2963,"mutability":"mutable","name":"goldCost","nameLocation":"1275:8:14","nodeType":"VariableDeclaration","scope":3796,"src":"1263:30:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2961,"name":"uint","nodeType":"ElementaryTypeName","src":"1263:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":2962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1286:7:14","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1"},"visibility":"public"},{"constant":false,"functionSelector":"1f69f030","id":2966,"mutability":"mutable","name":"diamondCost","nameLocation":"1332:11:14","nodeType":"VariableDeclaration","scope":3796,"src":"1320:33:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2964,"name":"uint","nodeType":"ElementaryTypeName","src":"1320:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1346:7:14","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_5000000000000000000_by_1","typeString":"int_const 5000000000000000000"},"value":"5"},"visibility":"public"},{"constant":false,"id":2968,"mutability":"mutable","name":"nonce","nameLocation":"1394:5:14","nodeType":"VariableDeclaration","scope":3796,"src":"1381:18:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2967,"name":"uint","nodeType":"ElementaryTypeName","src":"1381:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"canonicalName":"Mint.User","id":2973,"members":[{"constant":false,"id":2970,"mutability":"mutable","name":"diamondsBought","nameLocation":"1433:14:14","nodeType":"VariableDeclaration","scope":2973,"src":"1428:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2969,"name":"uint","nodeType":"ElementaryTypeName","src":"1428:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2972,"mutability":"mutable","name":"goldsBought","nameLocation":"1462:11:14","nodeType":"VariableDeclaration","scope":2973,"src":"1457:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2971,"name":"uint","nodeType":"ElementaryTypeName","src":"1457:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"User","nameLocation":"1413:4:14","nodeType":"StructDefinition","scope":3796,"src":"1406:74:14","visibility":"public"},{"constant":false,"id":2978,"mutability":"mutable","name":"users","nameLocation":"1512:5:14","nodeType":"VariableDeclaration","scope":3796,"src":"1486:31:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$2973_storage_$","typeString":"mapping(address => struct Mint.User)"},"typeName":{"id":2977,"keyType":{"id":2974,"name":"address","nodeType":"ElementaryTypeName","src":"1495:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1486:25:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$2973_storage_$","typeString":"mapping(address => struct Mint.User)"},"valueType":{"id":2976,"nodeType":"UserDefinedTypeName","pathNode":{"id":2975,"name":"User","nameLocations":["1506:4:14"],"nodeType":"IdentifierPath","referencedDeclaration":2973,"src":"1506:4:14"},"referencedDeclaration":2973,"src":"1506:4:14","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2973_storage_ptr","typeString":"struct Mint.User"}}},"visibility":"internal"},{"constant":false,"id":2982,"mutability":"mutable","name":"canPreMint","nameLocation":"1550:10:14","nodeType":"VariableDeclaration","scope":3796,"src":"1524:36:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":2981,"keyType":{"id":2979,"name":"address","nodeType":"ElementaryTypeName","src":"1533:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1524:25:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":2980,"name":"bool","nodeType":"ElementaryTypeName","src":"1544:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":2986,"mutability":"mutable","name":"canFreeMint","nameLocation":"1592:11:14","nodeType":"VariableDeclaration","scope":3796,"src":"1566:37:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":2985,"keyType":{"id":2983,"name":"address","nodeType":"ElementaryTypeName","src":"1575:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1566:25:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":2984,"name":"bool","nodeType":"ElementaryTypeName","src":"1586:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"anonymous":false,"eventSelector":"7ca3b83bd54c2e58547d3d3b7fd3c742d00dd3d413ec10bbe23232a1c0ff29b6","id":2990,"name":"UserCanPreMint","nameLocation":"1621:14:14","nodeType":"EventDefinition","parameters":{"id":2989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2988,"indexed":false,"mutability":"mutable","name":"userAddress","nameLocation":"1644:11:14","nodeType":"VariableDeclaration","scope":2990,"src":"1636:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2987,"name":"address","nodeType":"ElementaryTypeName","src":"1636:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1635:21:14"},"src":"1615:42:14"},{"anonymous":false,"eventSelector":"fe9489a95af8142951ae7fe3795b77b8e0e0e1b7411049c82ce6ec096bc7c59c","id":2994,"name":"UserCanFreeMint","nameLocation":"1668:15:14","nodeType":"EventDefinition","parameters":{"id":2993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2992,"indexed":false,"mutability":"mutable","name":"userAddress","nameLocation":"1692:11:14","nodeType":"VariableDeclaration","scope":2994,"src":"1684:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2991,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:21:14"},"src":"1662:43:14"},{"body":{"id":3028,"nodeType":"Block","src":"1859:138:14","statements":[{"expression":{"arguments":[{"id":3009,"name":"_baseURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"1880:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}],"id":3008,"name":"setBaseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3098,"src":"1869:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (string memory[] memory)"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3011,"nodeType":"ExpressionStatement","src":"1869:21:14"},{"expression":{"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3012,"name":"canWhitelistforPreMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"1900:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1925:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1900:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3015,"nodeType":"ExpressionStatement","src":"1900:29:14"},{"expression":{"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3016,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"1939:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1947:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1939:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3019,"nodeType":"ExpressionStatement","src":"1939:9:14"},{"expression":{"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3020,"name":"incAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"1958:10:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3023,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1979:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1983:6:14","memberName":"sender","nodeType":"MemberAccess","src":"1979:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1971:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3021,"name":"address","nodeType":"ElementaryTypeName","src":"1971:8:14","stateMutability":"payable","typeDescriptions":{}}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1971:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1958:32:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3027,"nodeType":"ExpressionStatement","src":"1958:32:14"}]},"id":3029,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3004,"name":"_collectionName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"1823:15:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3005,"name":"_collectionSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2998,"src":"1840:17:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":3006,"kind":"baseConstructorSpecifier","modifierName":{"id":3003,"name":"ERC721","nameLocations":["1815:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":1111,"src":"1815:6:14"},"nodeType":"ModifierInvocation","src":"1815:43:14"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2996,"mutability":"mutable","name":"_collectionName","nameLocation":"1738:15:14","nodeType":"VariableDeclaration","scope":3029,"src":"1724:29:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2995,"name":"string","nodeType":"ElementaryTypeName","src":"1724:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2998,"mutability":"mutable","name":"_collectionSymbol","nameLocation":"1769:17:14","nodeType":"VariableDeclaration","scope":3029,"src":"1755:31:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2997,"name":"string","nodeType":"ElementaryTypeName","src":"1755:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3001,"mutability":"mutable","name":"_baseURIs","nameLocation":"1804:9:14","nodeType":"VariableDeclaration","scope":3029,"src":"1788:25:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2999,"name":"string","nodeType":"ElementaryTypeName","src":"1788:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3000,"nodeType":"ArrayTypeName","src":"1788:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"1723:91:14"},"returnParameters":{"id":3007,"nodeType":"ParameterList","parameters":[],"src":"1859:0:14"},"scope":3796,"src":"1711:286:14","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3040,"nodeType":"Block","src":"2030:100:14","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3032,"name":"canPreMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"2049:10:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3035,"indexExpression":{"expression":{"id":3033,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2060:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2064:6:14","memberName":"sender","nodeType":"MemberAccess","src":"2060:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2049:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f7520617265206e6f742077686974656c697374656420666f7220707265206d696e74","id":3036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2073:38:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_13027401c902a3bca868c4078e20a0facaa89845605dd7ed02f94d3aec7a5915","typeString":"literal_string \"You are not whitelisted for pre mint\""},"value":"You are not whitelisted for pre mint"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_13027401c902a3bca868c4078e20a0facaa89845605dd7ed02f94d3aec7a5915","typeString":"literal_string \"You are not whitelisted for pre mint\""}],"id":3031,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2040:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2040:72:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3038,"nodeType":"ExpressionStatement","src":"2040:72:14"},{"id":3039,"nodeType":"PlaceholderStatement","src":"2122:1:14"}]},"id":3041,"name":"preMintAllowed","nameLocation":"2012:14:14","nodeType":"ModifierDefinition","parameters":{"id":3030,"nodeType":"ParameterList","parameters":[],"src":"2027:2:14"},"src":"2003:127:14","virtual":false,"visibility":"internal"},{"body":{"id":3052,"nodeType":"Block","src":"2164:102:14","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3044,"name":"canFreeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"2183:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3047,"indexExpression":{"expression":{"id":3045,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2195:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2199:6:14","memberName":"sender","nodeType":"MemberAccess","src":"2195:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2183:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f7520617265206e6f742077686974656c697374656420666f722066726565206d696e74","id":3048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2208:39:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_af6ad17b3caa010b96d609b0103e3503d46bbbc5282c93d68dae393624fce09b","typeString":"literal_string \"You are not whitelisted for free mint\""},"value":"You are not whitelisted for free mint"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_af6ad17b3caa010b96d609b0103e3503d46bbbc5282c93d68dae393624fce09b","typeString":"literal_string \"You are not whitelisted for free mint\""}],"id":3043,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2174:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:74:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3050,"nodeType":"ExpressionStatement","src":"2174:74:14"},{"id":3051,"nodeType":"PlaceholderStatement","src":"2258:1:14"}]},"id":3053,"name":"freeMintAllowed","nameLocation":"2145:15:14","nodeType":"ModifierDefinition","parameters":{"id":3042,"nodeType":"ParameterList","parameters":[],"src":"2161:2:14"},"src":"2136:130:14","virtual":false,"visibility":"internal"},{"body":{"id":3097,"nodeType":"Block","src":"2339:236:14","statements":[{"expression":{"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3061,"name":"baseURIVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"2349:12:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3062,"name":"_baseURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"2364:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":3064,"indexExpression":{"hexValue":"30","id":3063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2374:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2364:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2349:27:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3066,"nodeType":"ExpressionStatement","src":"2349:27:14"},{"expression":{"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3067,"name":"baseURIMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"2386:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3068,"name":"_baseURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"2402:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":3070,"indexExpression":{"hexValue":"31","id":3069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2412:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2402:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2386:28:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3072,"nodeType":"ExpressionStatement","src":"2386:28:14"},{"expression":{"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3073,"name":"baseURIJupiter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"2424:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3074,"name":"_baseURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"2441:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":3076,"indexExpression":{"hexValue":"32","id":3075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2451:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2441:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2424:29:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3078,"nodeType":"ExpressionStatement","src":"2424:29:14"},{"expression":{"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3079,"name":"baseURIUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"2463:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3080,"name":"_baseURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"2479:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":3082,"indexExpression":{"hexValue":"33","id":3081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2489:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2479:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2463:28:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3084,"nodeType":"ExpressionStatement","src":"2463:28:14"},{"expression":{"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3085,"name":"baseURINeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"2501:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3086,"name":"_baseURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"2518:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":3088,"indexExpression":{"hexValue":"34","id":3087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2528:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2518:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2501:29:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3090,"nodeType":"ExpressionStatement","src":"2501:29:14"},{"expression":{"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3091,"name":"baseURIMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"2540:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3092,"name":"_baseURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"2556:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":3094,"indexExpression":{"hexValue":"35","id":3093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2566:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2556:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2540:28:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3096,"nodeType":"ExpressionStatement","src":"2540:28:14"}]},"id":3098,"implemented":true,"kind":"function","modifiers":[{"id":3059,"kind":"modifierInvocation","modifierName":{"id":3058,"name":"onlyOwner","nameLocations":["2329:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2329:9:14"},"nodeType":"ModifierInvocation","src":"2329:9:14"}],"name":"setBaseURI","nameLocation":"2281:10:14","nodeType":"FunctionDefinition","parameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3056,"mutability":"mutable","name":"_baseURIs","nameLocation":"2309:9:14","nodeType":"VariableDeclaration","scope":3098,"src":"2293:25:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":3054,"name":"string","nodeType":"ElementaryTypeName","src":"2293:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3055,"nodeType":"ArrayTypeName","src":"2293:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"2292:27:14"},"returnParameters":{"id":3060,"nodeType":"ParameterList","parameters":[],"src":"2339:0:14"},"scope":3796,"src":"2272:303:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3122,"nodeType":"Block","src":"2648:171:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3106,"name":"canWhitelistforPreMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"2666:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":3107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2692:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2666:30:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"707265206d696e742077686974656c697374696e67207068617365206973206f766572","id":3109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2698:37:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cf8e1c54e6c85ca6fc4805b674930d0e960eeceb9b59caa29f57fe35457c26b8","typeString":"literal_string \"pre mint whitelisting phase is over\""},"value":"pre mint whitelisting phase is over"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cf8e1c54e6c85ca6fc4805b674930d0e960eeceb9b59caa29f57fe35457c26b8","typeString":"literal_string \"pre mint whitelisting phase is over\""}],"id":3105,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2658:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2658:78:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3111,"nodeType":"ExpressionStatement","src":"2658:78:14"},{"expression":{"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3112,"name":"canPreMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"2746:10:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3114,"indexExpression":{"id":3113,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3100,"src":"2757:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2746:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2769:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2746:27:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3117,"nodeType":"ExpressionStatement","src":"2746:27:14"},{"eventCall":{"arguments":[{"id":3119,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3100,"src":"2803:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3118,"name":"UserCanPreMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"2788:14:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2788:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3121,"nodeType":"EmitStatement","src":"2783:29:14"}]},"functionSelector":"53a6cef5","id":3123,"implemented":true,"kind":"function","modifiers":[{"id":3103,"kind":"modifierInvocation","modifierName":{"id":3102,"name":"onlyOwner","nameLocations":["2638:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2638:9:14"},"nodeType":"ModifierInvocation","src":"2638:9:14"}],"name":"whitelistForPreMint","nameLocation":"2590:19:14","nodeType":"FunctionDefinition","parameters":{"id":3101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3100,"mutability":"mutable","name":"_address","nameLocation":"2619:8:14","nodeType":"VariableDeclaration","scope":3123,"src":"2611:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3099,"name":"address","nodeType":"ElementaryTypeName","src":"2611:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2610:18:14"},"returnParameters":{"id":3104,"nodeType":"ParameterList","parameters":[],"src":"2648:0:14"},"scope":3796,"src":"2581:238:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3147,"nodeType":"Block","src":"2893:175:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3131,"name":"canWhitelistforFreeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"2911:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":3132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2938:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2911:31:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"66726565206d696e742077686974656c697374696e67207068617365206973206f766572","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2944:38:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5f112810d57218b6ed7ee19a4f6428b1e6680d1b4e819c1ad1135ace5c93b42","typeString":"literal_string \"free mint whitelisting phase is over\""},"value":"free mint whitelisting phase is over"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c5f112810d57218b6ed7ee19a4f6428b1e6680d1b4e819c1ad1135ace5c93b42","typeString":"literal_string \"free mint whitelisting phase is over\""}],"id":3130,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2903:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2903:80:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3136,"nodeType":"ExpressionStatement","src":"2903:80:14"},{"expression":{"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3137,"name":"canFreeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"2993:11:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3139,"indexExpression":{"id":3138,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"3005:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2993:21:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3017:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2993:28:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3142,"nodeType":"ExpressionStatement","src":"2993:28:14"},{"eventCall":{"arguments":[{"id":3144,"name":"_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"3052:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3143,"name":"UserCanFreeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"3036:15:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3036:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3146,"nodeType":"EmitStatement","src":"3031:30:14"}]},"functionSelector":"04baffc7","id":3148,"implemented":true,"kind":"function","modifiers":[{"id":3128,"kind":"modifierInvocation","modifierName":{"id":3127,"name":"onlyOwner","nameLocations":["2883:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2883:9:14"},"nodeType":"ModifierInvocation","src":"2883:9:14"}],"name":"whitelistForFreeMint","nameLocation":"2834:20:14","nodeType":"FunctionDefinition","parameters":{"id":3126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3125,"mutability":"mutable","name":"_address","nameLocation":"2864:8:14","nodeType":"VariableDeclaration","scope":3148,"src":"2856:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3124,"name":"address","nodeType":"ElementaryTypeName","src":"2856:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2855:18:14"},"returnParameters":{"id":3129,"nodeType":"ParameterList","parameters":[],"src":"2893:0:14"},"scope":3796,"src":"2825:243:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3168,"nodeType":"Block","src":"3126:175:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3154,"name":"canWhitelistforPreMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"3144:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":3155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3170:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3144:30:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"707265206d696e742077686974656c697374696e67207068617365206973206f766572","id":3157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3176:37:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cf8e1c54e6c85ca6fc4805b674930d0e960eeceb9b59caa29f57fe35457c26b8","typeString":"literal_string \"pre mint whitelisting phase is over\""},"value":"pre mint whitelisting phase is over"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cf8e1c54e6c85ca6fc4805b674930d0e960eeceb9b59caa29f57fe35457c26b8","typeString":"literal_string \"pre mint whitelisting phase is over\""}],"id":3153,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3136:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3136:78:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3159,"nodeType":"ExpressionStatement","src":"3136:78:14"},{"expression":{"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3160,"name":"canWhitelistforPreMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"3224:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3249:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3224:30:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3163,"nodeType":"ExpressionStatement","src":"3224:30:14"},{"expression":{"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3164,"name":"canWhitelistforFreeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"3264:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3290:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3264:30:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3167,"nodeType":"ExpressionStatement","src":"3264:30:14"}]},"functionSelector":"d5a02dfa","id":3169,"implemented":true,"kind":"function","modifiers":[{"id":3151,"kind":"modifierInvocation","modifierName":{"id":3150,"name":"onlyOwner","nameLocations":["3116:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3116:9:14"},"nodeType":"ModifierInvocation","src":"3116:9:14"}],"name":"finishPreMintListing","nameLocation":"3083:20:14","nodeType":"FunctionDefinition","parameters":{"id":3149,"nodeType":"ParameterList","parameters":[],"src":"3104:2:14"},"returnParameters":{"id":3152,"nodeType":"ParameterList","parameters":[],"src":"3126:0:14"},"scope":3796,"src":"3074:227:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3185,"nodeType":"Block","src":"3360:138:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3175,"name":"canWhitelistforFreeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"3378:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":3176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3405:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3378:31:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"66726565206d696e742077686974656c697374696e67207068617365206973206f766572","id":3178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3411:38:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5f112810d57218b6ed7ee19a4f6428b1e6680d1b4e819c1ad1135ace5c93b42","typeString":"literal_string \"free mint whitelisting phase is over\""},"value":"free mint whitelisting phase is over"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c5f112810d57218b6ed7ee19a4f6428b1e6680d1b4e819c1ad1135ace5c93b42","typeString":"literal_string \"free mint whitelisting phase is over\""}],"id":3174,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3370:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3370:80:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3180,"nodeType":"ExpressionStatement","src":"3370:80:14"},{"expression":{"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3181,"name":"canWhitelistforFreeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"3460:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3486:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3460:31:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3184,"nodeType":"ExpressionStatement","src":"3460:31:14"}]},"functionSelector":"207d95a5","id":3186,"implemented":true,"kind":"function","modifiers":[{"id":3172,"kind":"modifierInvocation","modifierName":{"id":3171,"name":"onlyOwner","nameLocations":["3350:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3350:9:14"},"nodeType":"ModifierInvocation","src":"3350:9:14"}],"name":"finishFreeMintListing","nameLocation":"3316:21:14","nodeType":"FunctionDefinition","parameters":{"id":3170,"nodeType":"ParameterList","parameters":[],"src":"3338:2:14"},"returnParameters":{"id":3173,"nodeType":"ParameterList","parameters":[],"src":"3360:0:14"},"scope":3796,"src":"3307:191:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3227,"nodeType":"Block","src":"3563:201:14","statements":[{"assignments":[3196],"declarations":[{"constant":false,"id":3196,"mutability":"mutable","name":"range","nameLocation":"3578:5:14","nodeType":"VariableDeclaration","scope":3227,"src":"3573:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3195,"name":"uint","nodeType":"ElementaryTypeName","src":"3573:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3200,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3197,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"3586:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3198,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"3591:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3586:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3573:22:14"},{"assignments":[3202],"declarations":[{"constant":false,"id":3202,"mutability":"mutable","name":"randomNumber","nameLocation":"3610:12:14","nodeType":"VariableDeclaration","scope":3227,"src":"3605:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3201,"name":"uint","nodeType":"ElementaryTypeName","src":"3605:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3216,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":3208,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3657:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3663:9:14","memberName":"timestamp","nodeType":"MemberAccess","src":"3657:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3210,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3674:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3678:6:14","memberName":"sender","nodeType":"MemberAccess","src":"3674:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3212,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"3686:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3206,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3640:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3207,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3644:12:14","memberName":"encodePacked","nodeType":"MemberAccess","src":"3640:16:14","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3640:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3205,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3630:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3630:63:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3625:4:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3203,"name":"uint","nodeType":"ElementaryTypeName","src":"3625:4:14","typeDescriptions":{}}},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3625:69:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3605:89:14"},{"expression":{"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3704:7:14","subExpression":{"id":3217,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2968,"src":"3704:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3219,"nodeType":"ExpressionStatement","src":"3704:7:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3220,"name":"randomNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"3729:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3221,"name":"range","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"3744:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3729:20:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3223,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3728:22:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3224,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"3753:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3728:29:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3194,"id":3226,"nodeType":"Return","src":"3721:36:14"}]},"id":3228,"implemented":true,"kind":"function","modifiers":[],"name":"random","nameLocation":"3513:6:14","nodeType":"FunctionDefinition","parameters":{"id":3191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3188,"mutability":"mutable","name":"from","nameLocation":"3525:4:14","nodeType":"VariableDeclaration","scope":3228,"src":"3520:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3187,"name":"uint","nodeType":"ElementaryTypeName","src":"3520:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3190,"mutability":"mutable","name":"to","nameLocation":"3536:2:14","nodeType":"VariableDeclaration","scope":3228,"src":"3531:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3189,"name":"uint","nodeType":"ElementaryTypeName","src":"3531:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3519:20:14"},"returnParameters":{"id":3194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3193,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3228,"src":"3557:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3192,"name":"uint","nodeType":"ElementaryTypeName","src":"3557:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3556:6:14"},"scope":3796,"src":"3504:260:14","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3271,"nodeType":"Block","src":"3835:248:14","statements":[{"assignments":[3236],"declarations":[{"constant":false,"id":3236,"mutability":"mutable","name":"currentURI","nameLocation":"3859:10:14","nodeType":"VariableDeclaration","scope":3271,"src":"3845:24:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3235,"name":"string","nodeType":"ElementaryTypeName","src":"3845:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3248,"initialValue":{"arguments":[{"arguments":[{"id":3241,"name":"characterURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"3896:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3242,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"3910:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3913:8:14","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1881,"src":"3910:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3910:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2e6a736f6e","id":3245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3925:7:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972","typeString":"literal_string \".json\""},"value":".json"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972","typeString":"literal_string \".json\""}],"expression":{"id":3239,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3879:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3240,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3883:12:14","memberName":"encodePacked","nodeType":"MemberAccess","src":"3879:16:14","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3879:54:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3872:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3237,"name":"string","nodeType":"ElementaryTypeName","src":"3872:6:14","typeDescriptions":{}}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3872:62:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"3845:89:14"},{"expression":{"arguments":[{"expression":{"id":3250,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3950:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3954:6:14","memberName":"sender","nodeType":"MemberAccess","src":"3950:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3252,"name":"totalMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"3962:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage","typeString":"struct Counters.Counter storage ref"}},"id":3253,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3974:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"3962:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3983:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3962:22:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3249,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"3944:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3944:41:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3257,"nodeType":"ExpressionStatement","src":"3944:41:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3259,"name":"totalMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"4008:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage","typeString":"struct Counters.Counter storage ref"}},"id":3260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4020:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"4008:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4029:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4008:22:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3263,"name":"currentURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"4032:10:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3258,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"3995:12:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3995:48:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3265,"nodeType":"ExpressionStatement","src":"3995:48:14"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3266,"name":"totalMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"4053:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage","typeString":"struct Counters.Counter storage ref"}},"id":3268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4065:9:14","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":1781,"src":"4053:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$1755_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1755_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4053:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3270,"nodeType":"ExpressionStatement","src":"4053:23:14"}]},"id":3272,"implemented":true,"kind":"function","modifiers":[],"name":"startMint","nameLocation":"3779:9:14","nodeType":"FunctionDefinition","parameters":{"id":3233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3230,"mutability":"mutable","name":"id","nameLocation":"3794:2:14","nodeType":"VariableDeclaration","scope":3272,"src":"3789:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3229,"name":"uint","nodeType":"ElementaryTypeName","src":"3789:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3232,"mutability":"mutable","name":"characterURI","nameLocation":"3812:12:14","nodeType":"VariableDeclaration","scope":3272,"src":"3798:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3231,"name":"string","nodeType":"ElementaryTypeName","src":"3798:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3788:37:14"},"returnParameters":{"id":3234,"nodeType":"ParameterList","parameters":[],"src":"3835:0:14"},"scope":3796,"src":"3770:313:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3414,"nodeType":"Block","src":"4115:1571:14","statements":[{"assignments":[3276],"declarations":[{"constant":false,"id":3276,"mutability":"mutable","name":"id","nameLocation":"4130:2:14","nodeType":"VariableDeclaration","scope":3414,"src":"4125:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3275,"name":"uint","nodeType":"ElementaryTypeName","src":"4125:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3281,"initialValue":{"arguments":[{"hexValue":"31","id":3278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4142:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"313030","id":3279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4145:3:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}],"id":3277,"name":"random","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3228,"src":"4135:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) returns (uint256)"}},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4135:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4125:24:14"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3282,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"4163:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"31","id":3283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4169:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4163:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3285,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"4174:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3530","id":3286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4180:2:14","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"src":"4174:8:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4163:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3325,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"4673:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3531","id":3326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4679:2:14","typeDescriptions":{"typeIdentifier":"t_rational_51_by_1","typeString":"int_const 51"},"value":"51"},"src":"4673:8:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3328,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"4685:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3835","id":3329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4691:2:14","typeDescriptions":{"typeIdentifier":"t_rational_85_by_1","typeString":"int_const 85"},"value":"85"},"src":"4685:8:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4673:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3368,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"5184:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3836","id":3369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5190:2:14","typeDescriptions":{"typeIdentifier":"t_rational_86_by_1","typeString":"int_const 86"},"value":"86"},"src":"5184:8:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3371,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"5196:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"313030","id":3372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5202:3:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"5196:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5184:21:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3411,"nodeType":"IfStatement","src":"5180:500:14","trueBody":{"id":3410,"nodeType":"Block","src":"5215:465:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3375,"name":"indexJupiterG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"5233:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"313035","id":3376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5250:3:14","typeDescriptions":{"typeIdentifier":"t_rational_105_by_1","typeString":"int_const 105"},"value":"105"},"src":"5233:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3408,"nodeType":"Block","src":"5564:106:14","statements":[{"expression":{"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5582:15:14","subExpression":{"id":3400,"name":"indexJupiterG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"5582:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3402,"nodeType":"ExpressionStatement","src":"5582:15:14"},{"expression":{"arguments":[{"id":3404,"name":"indexJupiterG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"5625:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3405,"name":"baseURIJupiter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"5640:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3403,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"5615:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5615:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3407,"nodeType":"ExpressionStatement","src":"5615:40:14"}]},"id":3409,"nodeType":"IfStatement","src":"5229:441:14","trueBody":{"id":3399,"nodeType":"Block","src":"5267:267:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3378,"name":"indexVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"5289:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"333530","id":3379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5303:3:14","typeDescriptions":{"typeIdentifier":"t_rational_350_by_1","typeString":"int_const 350"},"value":"350"},"src":"5289:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3390,"nodeType":"IfStatement","src":"5285:152:14","trueBody":{"id":3389,"nodeType":"Block","src":"5324:113:14","statements":[{"expression":{"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5346:13:14","subExpression":{"id":3381,"name":"indexMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"5346:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3383,"nodeType":"ExpressionStatement","src":"5346:13:14"},{"expression":{"arguments":[{"id":3385,"name":"indexMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"5391:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3386,"name":"baseURIMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"5404:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3384,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"5381:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5381:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3388,"nodeType":"ExpressionStatement","src":"5381:37:14"}]}},{"expression":{"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5454:12:14","subExpression":{"id":3391,"name":"indexVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"5454:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3393,"nodeType":"ExpressionStatement","src":"5454:12:14"},{"expression":{"arguments":[{"id":3395,"name":"indexVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"5494:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3396,"name":"baseURIVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"5506:12:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3394,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"5484:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5484:35:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3398,"nodeType":"ExpressionStatement","src":"5484:35:14"}]}}]}},"id":3412,"nodeType":"IfStatement","src":"4669:1011:14","trueBody":{"id":3367,"nodeType":"Block","src":"4703:463:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3332,"name":"indexMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"4721:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"323435","id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4736:3:14","typeDescriptions":{"typeIdentifier":"t_rational_245_by_1","typeString":"int_const 245"},"value":"245"},"src":"4721:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3365,"nodeType":"Block","src":"5055:101:14","statements":[{"expression":{"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5073:13:14","subExpression":{"id":3357,"name":"indexMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"5073:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3359,"nodeType":"ExpressionStatement","src":"5073:13:14"},{"expression":{"arguments":[{"id":3361,"name":"indexMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"5114:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3362,"name":"baseURIMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"5127:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3360,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"5104:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5104:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3364,"nodeType":"ExpressionStatement","src":"5104:37:14"}]},"id":3366,"nodeType":"IfStatement","src":"4717:439:14","trueBody":{"id":3356,"nodeType":"Block","src":"4753:272:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3335,"name":"indexVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"4775:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"333530","id":3336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4789:3:14","typeDescriptions":{"typeIdentifier":"t_rational_350_by_1","typeString":"int_const 350"},"value":"350"},"src":"4775:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3347,"nodeType":"IfStatement","src":"4771:157:14","trueBody":{"id":3346,"nodeType":"Block","src":"4810:118:14","statements":[{"expression":{"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4832:15:14","subExpression":{"id":3338,"name":"indexJupiterG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"4832:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3340,"nodeType":"ExpressionStatement","src":"4832:15:14"},{"expression":{"arguments":[{"id":3342,"name":"indexJupiterG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"4879:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3343,"name":"baseURIJupiter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"4894:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3341,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"4869:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4869:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3345,"nodeType":"ExpressionStatement","src":"4869:40:14"}]}},{"expression":{"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4945:12:14","subExpression":{"id":3348,"name":"indexVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"4945:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3350,"nodeType":"ExpressionStatement","src":"4945:12:14"},{"expression":{"arguments":[{"id":3352,"name":"indexVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"4985:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3353,"name":"baseURIVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"4997:12:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3351,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"4975:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4975:35:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3355,"nodeType":"ExpressionStatement","src":"4975:35:14"}]}}]}},"id":3413,"nodeType":"IfStatement","src":"4159:1521:14","trueBody":{"id":3324,"nodeType":"Block","src":"4192:463:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3289,"name":"indexVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"4210:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"333530","id":3290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4224:3:14","typeDescriptions":{"typeIdentifier":"t_rational_350_by_1","typeString":"int_const 350"},"value":"350"},"src":"4210:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3322,"nodeType":"Block","src":"4547:98:14","statements":[{"expression":{"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4565:12:14","subExpression":{"id":3314,"name":"indexVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"4565:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3316,"nodeType":"ExpressionStatement","src":"4565:12:14"},{"expression":{"arguments":[{"id":3318,"name":"indexVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"4605:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3319,"name":"baseURIVenus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"4617:12:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3317,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"4595:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4595:35:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3321,"nodeType":"ExpressionStatement","src":"4595:35:14"}]},"id":3323,"nodeType":"IfStatement","src":"4206:439:14","trueBody":{"id":3313,"nodeType":"Block","src":"4241:276:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3292,"name":"indexMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"4263:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"323435","id":3293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4278:3:14","typeDescriptions":{"typeIdentifier":"t_rational_245_by_1","typeString":"int_const 245"},"value":"245"},"src":"4263:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3304,"nodeType":"IfStatement","src":"4259:158:14","trueBody":{"id":3303,"nodeType":"Block","src":"4299:118:14","statements":[{"expression":{"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4321:15:14","subExpression":{"id":3295,"name":"indexJupiterG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"4321:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3297,"nodeType":"ExpressionStatement","src":"4321:15:14"},{"expression":{"arguments":[{"id":3299,"name":"indexJupiterG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"4368:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3300,"name":"baseURIJupiter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"4383:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3298,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"4358:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4358:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3302,"nodeType":"ExpressionStatement","src":"4358:40:14"}]}},{"expression":{"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4434:13:14","subExpression":{"id":3305,"name":"indexMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"4434:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3307,"nodeType":"ExpressionStatement","src":"4434:13:14"},{"expression":{"arguments":[{"id":3309,"name":"indexMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"4475:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3310,"name":"baseURIMars_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"4488:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3308,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"4465:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4465:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3312,"nodeType":"ExpressionStatement","src":"4465:37:14"}]}}]}}]},"id":3415,"implemented":true,"kind":"function","modifiers":[],"name":"gold","nameLocation":"4099:4:14","nodeType":"FunctionDefinition","parameters":{"id":3273,"nodeType":"ParameterList","parameters":[],"src":"4103:2:14"},"returnParameters":{"id":3274,"nodeType":"ParameterList","parameters":[],"src":"4115:0:14"},"scope":3796,"src":"4090:1596:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3661,"nodeType":"Block","src":"5720:3447:14","statements":[{"assignments":[3419],"declarations":[{"constant":false,"id":3419,"mutability":"mutable","name":"id","nameLocation":"5735:2:14","nodeType":"VariableDeclaration","scope":3661,"src":"5730:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3418,"name":"uint","nodeType":"ElementaryTypeName","src":"5730:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3424,"initialValue":{"arguments":[{"hexValue":"31","id":3421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5747:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31303030","id":3422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5750:4:14","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"}],"id":3420,"name":"random","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3228,"src":"5740:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) returns (uint256)"}},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5740:15:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5730:25:14"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3425,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"5769:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"31","id":3426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5775:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5769:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3428,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"5780:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"333530","id":3429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5786:3:14","typeDescriptions":{"typeIdentifier":"t_rational_350_by_1","typeString":"int_const 350"},"value":"350"},"src":"5780:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5769:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3483,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"6620:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"333531","id":3484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6626:3:14","typeDescriptions":{"typeIdentifier":"t_rational_351_by_1","typeString":"int_const 351"},"value":"351"},"src":"6620:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3486,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"6633:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"363530","id":3487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6639:3:14","typeDescriptions":{"typeIdentifier":"t_rational_650_by_1","typeString":"int_const 650"},"value":"650"},"src":"6633:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6620:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3541,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7473:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"363531","id":3542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7479:3:14","typeDescriptions":{"typeIdentifier":"t_rational_651_by_1","typeString":"int_const 651"},"value":"651"},"src":"7473:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3544,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"7486:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"383237","id":3545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7492:3:14","typeDescriptions":{"typeIdentifier":"t_rational_827_by_1","typeString":"int_const 827"},"value":"827"},"src":"7486:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7473:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3599,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"8326:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"383238","id":3600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8332:3:14","typeDescriptions":{"typeIdentifier":"t_rational_828_by_1","typeString":"int_const 828"},"value":"828"},"src":"8326:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3602,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"8339:2:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"31303030","id":3603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8345:4:14","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"src":"8339:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8326:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3657,"nodeType":"IfStatement","src":"8322:839:14","trueBody":{"id":3656,"nodeType":"Block","src":"8359:802:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3606,"name":"indexMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"8377:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3532","id":3607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8392:2:14","typeDescriptions":{"typeIdentifier":"t_rational_52_by_1","typeString":"int_const 52"},"value":"52"},"src":"8377:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3654,"nodeType":"Block","src":"9050:101:14","statements":[{"expression":{"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9068:13:14","subExpression":{"id":3646,"name":"indexMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"9068:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3648,"nodeType":"ExpressionStatement","src":"9068:13:14"},{"expression":{"arguments":[{"id":3650,"name":"indexMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"9109:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3651,"name":"baseURIMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"9122:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3649,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"9099:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9099:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3653,"nodeType":"ExpressionStatement","src":"9099:37:14"}]},"id":3655,"nodeType":"IfStatement","src":"8373:778:14","trueBody":{"id":3645,"nodeType":"Block","src":"8408:612:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3609,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"8430:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"313035","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8447:3:14","typeDescriptions":{"typeIdentifier":"t_rational_105_by_1","typeString":"int_const 105"},"value":"105"},"src":"8430:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3643,"nodeType":"Block","src":"8888:118:14","statements":[{"expression":{"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8910:15:14","subExpression":{"id":3635,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"8910:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3637,"nodeType":"ExpressionStatement","src":"8910:15:14"},{"expression":{"arguments":[{"id":3639,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"8957:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3640,"name":"baseURIJupiter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"8972:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3638,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"8947:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8947:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3642,"nodeType":"ExpressionStatement","src":"8947:40:14"}]},"id":3644,"nodeType":"IfStatement","src":"8426:580:14","trueBody":{"id":3634,"nodeType":"Block","src":"8468:382:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3612,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"8494:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3930","id":3613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8509:2:14","typeDescriptions":{"typeIdentifier":"t_rational_90_by_1","typeString":"int_const 90"},"value":"90"},"src":"8494:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3632,"nodeType":"Block","src":"8707:125:14","statements":[{"expression":{"id":3625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8733:13:14","subExpression":{"id":3624,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"8733:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3626,"nodeType":"ExpressionStatement","src":"8733:13:14"},{"expression":{"arguments":[{"id":3628,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"8782:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3629,"name":"baseURIUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"8795:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3627,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"8772:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8772:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3631,"nodeType":"ExpressionStatement","src":"8772:37:14"}]},"id":3633,"nodeType":"IfStatement","src":"8490:342:14","trueBody":{"id":3623,"nodeType":"Block","src":"8533:128:14","statements":[{"expression":{"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8559:14:14","subExpression":{"id":3615,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"8559:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3617,"nodeType":"ExpressionStatement","src":"8559:14:14"},{"expression":{"arguments":[{"id":3619,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"8609:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3620,"name":"baseURINeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"8623:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3618,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"8599:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8599:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3622,"nodeType":"ExpressionStatement","src":"8599:39:14"}]}}]}}]}}]}},"id":3658,"nodeType":"IfStatement","src":"7469:1692:14","trueBody":{"id":3598,"nodeType":"Block","src":"7505:803:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3548,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"7523:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3533","id":3549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7539:2:14","typeDescriptions":{"typeIdentifier":"t_rational_53_by_1","typeString":"int_const 53"},"value":"53"},"src":"7523:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3596,"nodeType":"Block","src":"8194:104:14","statements":[{"expression":{"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8212:14:14","subExpression":{"id":3588,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"8212:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3590,"nodeType":"ExpressionStatement","src":"8212:14:14"},{"expression":{"arguments":[{"id":3592,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"8254:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3593,"name":"baseURINeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"8268:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3591,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"8244:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8244:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3595,"nodeType":"ExpressionStatement","src":"8244:39:14"}]},"id":3597,"nodeType":"IfStatement","src":"7519:779:14","trueBody":{"id":3587,"nodeType":"Block","src":"7555:609:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3551,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"7577:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"313035","id":3552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7594:3:14","typeDescriptions":{"typeIdentifier":"t_rational_105_by_1","typeString":"int_const 105"},"value":"105"},"src":"7577:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3585,"nodeType":"Block","src":"8032:118:14","statements":[{"expression":{"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8054:15:14","subExpression":{"id":3577,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"8054:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3579,"nodeType":"ExpressionStatement","src":"8054:15:14"},{"expression":{"arguments":[{"id":3581,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"8101:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3582,"name":"baseURIJupiter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"8116:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3580,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"8091:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8091:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3584,"nodeType":"ExpressionStatement","src":"8091:40:14"}]},"id":3586,"nodeType":"IfStatement","src":"7573:577:14","trueBody":{"id":3576,"nodeType":"Block","src":"7615:379:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3554,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"7641:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3930","id":3555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7656:2:14","typeDescriptions":{"typeIdentifier":"t_rational_90_by_1","typeString":"int_const 90"},"value":"90"},"src":"7641:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3574,"nodeType":"Block","src":"7851:125:14","statements":[{"expression":{"id":3567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7877:13:14","subExpression":{"id":3566,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"7877:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3568,"nodeType":"ExpressionStatement","src":"7877:13:14"},{"expression":{"arguments":[{"id":3570,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"7926:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3571,"name":"baseURIUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"7939:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3569,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"7916:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3573,"nodeType":"ExpressionStatement","src":"7916:37:14"}]},"id":3575,"nodeType":"IfStatement","src":"7637:339:14","trueBody":{"id":3565,"nodeType":"Block","src":"7680:125:14","statements":[{"expression":{"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7706:13:14","subExpression":{"id":3557,"name":"indexMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"7706:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3559,"nodeType":"ExpressionStatement","src":"7706:13:14"},{"expression":{"arguments":[{"id":3561,"name":"indexMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"7755:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3562,"name":"baseURIMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"7768:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3560,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"7745:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7745:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3564,"nodeType":"ExpressionStatement","src":"7745:37:14"}]}}]}}]}}]}},"id":3659,"nodeType":"IfStatement","src":"6616:2545:14","trueBody":{"id":3540,"nodeType":"Block","src":"6652:803:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3490,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"6670:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3930","id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6685:2:14","typeDescriptions":{"typeIdentifier":"t_rational_90_by_1","typeString":"int_const 90"},"value":"90"},"src":"6670:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3538,"nodeType":"Block","src":"7344:101:14","statements":[{"expression":{"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7362:13:14","subExpression":{"id":3530,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"7362:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3532,"nodeType":"ExpressionStatement","src":"7362:13:14"},{"expression":{"arguments":[{"id":3534,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"7403:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3535,"name":"baseURIUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"7416:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3533,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"7393:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7393:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3537,"nodeType":"ExpressionStatement","src":"7393:37:14"}]},"id":3539,"nodeType":"IfStatement","src":"6666:779:14","trueBody":{"id":3529,"nodeType":"Block","src":"6701:613:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3493,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"6723:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"313035","id":3494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6740:3:14","typeDescriptions":{"typeIdentifier":"t_rational_105_by_1","typeString":"int_const 105"},"value":"105"},"src":"6723:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3527,"nodeType":"Block","src":"7182:118:14","statements":[{"expression":{"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7204:15:14","subExpression":{"id":3519,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"7204:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3521,"nodeType":"ExpressionStatement","src":"7204:15:14"},{"expression":{"arguments":[{"id":3523,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"7251:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3524,"name":"baseURIJupiter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"7266:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3522,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"7241:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7241:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3526,"nodeType":"ExpressionStatement","src":"7241:40:14"}]},"id":3528,"nodeType":"IfStatement","src":"6719:581:14","trueBody":{"id":3518,"nodeType":"Block","src":"6761:383:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3496,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"6787:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3533","id":3497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6803:2:14","typeDescriptions":{"typeIdentifier":"t_rational_53_by_1","typeString":"int_const 53"},"value":"53"},"src":"6787:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3516,"nodeType":"Block","src":"6998:128:14","statements":[{"expression":{"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7024:14:14","subExpression":{"id":3508,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"7024:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3510,"nodeType":"ExpressionStatement","src":"7024:14:14"},{"expression":{"arguments":[{"id":3512,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"7074:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3513,"name":"baseURINeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"7088:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3511,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"7064:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7064:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3515,"nodeType":"ExpressionStatement","src":"7064:39:14"}]},"id":3517,"nodeType":"IfStatement","src":"6783:343:14","trueBody":{"id":3507,"nodeType":"Block","src":"6827:125:14","statements":[{"expression":{"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6853:13:14","subExpression":{"id":3499,"name":"indexMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"6853:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3501,"nodeType":"ExpressionStatement","src":"6853:13:14"},{"expression":{"arguments":[{"id":3503,"name":"indexMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"6902:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3504,"name":"baseURIMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"6915:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3502,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"6892:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3506,"nodeType":"ExpressionStatement","src":"6892:37:14"}]}}]}}]}}]}},"id":3660,"nodeType":"IfStatement","src":"5765:3396:14","trueBody":{"id":3482,"nodeType":"Block","src":"5799:803:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3432,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"5817:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"313035","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5834:3:14","typeDescriptions":{"typeIdentifier":"t_rational_105_by_1","typeString":"int_const 105"},"value":"105"},"src":"5817:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3480,"nodeType":"Block","src":"6486:106:14","statements":[{"expression":{"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6504:15:14","subExpression":{"id":3472,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"6504:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3474,"nodeType":"ExpressionStatement","src":"6504:15:14"},{"expression":{"arguments":[{"id":3476,"name":"indexJupiterD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"6547:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3477,"name":"baseURIJupiter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"6562:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3475,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"6537:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6537:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3479,"nodeType":"ExpressionStatement","src":"6537:40:14"}]},"id":3481,"nodeType":"IfStatement","src":"5813:779:14","trueBody":{"id":3471,"nodeType":"Block","src":"5851:605:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3435,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"5873:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3930","id":3436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5888:2:14","typeDescriptions":{"typeIdentifier":"t_rational_90_by_1","typeString":"int_const 90"},"value":"90"},"src":"5873:17:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3469,"nodeType":"Block","src":"6329:113:14","statements":[{"expression":{"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6351:13:14","subExpression":{"id":3461,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"6351:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3463,"nodeType":"ExpressionStatement","src":"6351:13:14"},{"expression":{"arguments":[{"id":3465,"name":"indexUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"6396:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3466,"name":"baseURIUranus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"6409:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3464,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"6386:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6386:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3468,"nodeType":"ExpressionStatement","src":"6386:37:14"}]},"id":3470,"nodeType":"IfStatement","src":"5869:573:14","trueBody":{"id":3460,"nodeType":"Block","src":"5908:383:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3438,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"5934:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3533","id":3439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5950:2:14","typeDescriptions":{"typeIdentifier":"t_rational_53_by_1","typeString":"int_const 53"},"value":"53"},"src":"5934:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3458,"nodeType":"Block","src":"6145:128:14","statements":[{"expression":{"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6171:14:14","subExpression":{"id":3450,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"6171:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3452,"nodeType":"ExpressionStatement","src":"6171:14:14"},{"expression":{"arguments":[{"id":3454,"name":"indexNeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"6221:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3455,"name":"baseURINeptune","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"6235:14:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3453,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"6211:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6211:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3457,"nodeType":"ExpressionStatement","src":"6211:39:14"}]},"id":3459,"nodeType":"IfStatement","src":"5930:343:14","trueBody":{"id":3449,"nodeType":"Block","src":"5974:125:14","statements":[{"expression":{"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6000:13:14","subExpression":{"id":3441,"name":"indexMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"6000:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3443,"nodeType":"ExpressionStatement","src":"6000:13:14"},{"expression":{"arguments":[{"id":3445,"name":"indexMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"6049:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3446,"name":"baseURIMars_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"6062:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3444,"name":"startMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"6039:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6039:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3448,"nodeType":"ExpressionStatement","src":"6039:37:14"}]}}]}}]}}]}}]},"id":3662,"implemented":true,"kind":"function","modifiers":[],"name":"diamond","nameLocation":"5701:7:14","nodeType":"FunctionDefinition","parameters":{"id":3416,"nodeType":"ParameterList","parameters":[],"src":"5708:2:14"},"returnParameters":{"id":3417,"nodeType":"ParameterList","parameters":[],"src":"5720:0:14"},"scope":3796,"src":"5692:3475:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3716,"nodeType":"Block","src":"9230:372:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3668,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"9248:5:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$2973_storage_$","typeString":"mapping(address => struct Mint.User storage ref)"}},"id":3671,"indexExpression":{"expression":{"id":3669,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9254:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9258:6:14","memberName":"sender","nodeType":"MemberAccess","src":"9254:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9248:17:14","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2973_storage","typeString":"struct Mint.User storage ref"}},"id":3672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9266:11:14","memberName":"goldsBought","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"9248:29:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"35","id":3673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"9248:33:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f752063616e6e6f74206d696e7420616e796d6f726520676f6c642063617073756c65","id":3675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9283:38:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_f507a309cc38ca0b5a69c062b15ee707603dd3beb573417d25389244396b4859","typeString":"literal_string \"You cannot mint anymore gold capsule\""},"value":"You cannot mint anymore gold capsule"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f507a309cc38ca0b5a69c062b15ee707603dd3beb573417d25389244396b4859","typeString":"literal_string \"You cannot mint anymore gold capsule\""}],"id":3667,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9240:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9240:82:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3677,"nodeType":"ExpressionStatement","src":"9240:82:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3679,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9340:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9344:5:14","memberName":"value","nodeType":"MemberAccess","src":"9340:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3681,"name":"goldCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2963,"src":"9353:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9340:21:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5072696365206973203235204d61746963","id":3683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9363:19:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_804f369a9d8a88ec35b1d4ba0eaec6c74b1ec87abddc20645e130a9940f47b69","typeString":"literal_string \"Price is 25 Matic\""},"value":"Price is 25 Matic"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_804f369a9d8a88ec35b1d4ba0eaec6c74b1ec87abddc20645e130a9940f47b69","typeString":"literal_string \"Price is 25 Matic\""}],"id":3678,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9332:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9332:51:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3685,"nodeType":"ExpressionStatement","src":"9332:51:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3687,"name":"goldsMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"9401:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage","typeString":"struct Counters.Counter storage ref"}},"id":3688,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9413:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"9401:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"373030","id":3689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9423:3:14","typeDescriptions":{"typeIdentifier":"t_rational_700_by_1","typeString":"int_const 700"},"value":"700"},"src":"9401:25:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416c6c20676f6c642063617073756c65732068617665206265656e206d696e746564","id":3691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9428:36:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_387a2ec17cf8a3c128877a652e199fea2dd70226e334a7ed4ed2ccd330f51603","typeString":"literal_string \"All gold capsules have been minted\""},"value":"All gold capsules have been minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_387a2ec17cf8a3c128877a652e199fea2dd70226e334a7ed4ed2ccd330f51603","typeString":"literal_string \"All gold capsules have been minted\""}],"id":3686,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9393:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9393:72:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3693,"nodeType":"ExpressionStatement","src":"9393:72:14"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3694,"name":"gold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"9475:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9475:6:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3696,"nodeType":"ExpressionStatement","src":"9475:6:14"},{"expression":{"arguments":[{"expression":{"id":3700,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9511:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9515:5:14","memberName":"value","nodeType":"MemberAccess","src":"9511:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3697,"name":"incAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"9491:10:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9502:8:14","memberName":"transfer","nodeType":"MemberAccess","src":"9491:19:14","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9491:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3703,"nodeType":"ExpressionStatement","src":"9491:30:14"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3704,"name":"goldsMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"9531:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage","typeString":"struct Counters.Counter storage ref"}},"id":3706,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9543:9:14","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":1781,"src":"9531:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$1755_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1755_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":3707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9531:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3708,"nodeType":"ExpressionStatement","src":"9531:23:14"},{"expression":{"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9564:31:14","subExpression":{"expression":{"baseExpression":{"id":3709,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"9564:5:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$2973_storage_$","typeString":"mapping(address => struct Mint.User storage ref)"}},"id":3712,"indexExpression":{"expression":{"id":3710,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9570:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9574:6:14","memberName":"sender","nodeType":"MemberAccess","src":"9570:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9564:17:14","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2973_storage","typeString":"struct Mint.User storage ref"}},"id":3713,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9582:11:14","memberName":"goldsBought","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"9564:29:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3715,"nodeType":"ExpressionStatement","src":"9564:31:14"}]},"functionSelector":"af2a9190","id":3717,"implemented":true,"kind":"function","modifiers":[{"id":3665,"kind":"modifierInvocation","modifierName":{"id":3664,"name":"preMintAllowed","nameLocations":["9215:14:14"],"nodeType":"IdentifierPath","referencedDeclaration":3041,"src":"9215:14:14"},"nodeType":"ModifierInvocation","src":"9215:14:14"}],"name":"preMintGold","nameLocation":"9183:11:14","nodeType":"FunctionDefinition","parameters":{"id":3663,"nodeType":"ParameterList","parameters":[],"src":"9195:2:14"},"returnParameters":{"id":3666,"nodeType":"ParameterList","parameters":[],"src":"9230:0:14"},"scope":3796,"src":"9174:428:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3771,"nodeType":"Block","src":"9667:394:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3723,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"9685:5:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$2973_storage_$","typeString":"mapping(address => struct Mint.User storage ref)"}},"id":3726,"indexExpression":{"expression":{"id":3724,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9691:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9695:6:14","memberName":"sender","nodeType":"MemberAccess","src":"9691:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9685:17:14","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2973_storage","typeString":"struct Mint.User storage ref"}},"id":3727,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9703:14:14","memberName":"diamondsBought","nodeType":"MemberAccess","referencedDeclaration":2970,"src":"9685:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"32","id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9720:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9685:36:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f752063616e6e6f74206d696e7420616e796d6f7265206469616d6f6e642063617073756c65","id":3730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9723:41:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_41d5e8a11c119646a967e8a499a29ddbe8936f4a0eaee9b4890776bfb5826c45","typeString":"literal_string \"You cannot mint anymore diamond capsule\""},"value":"You cannot mint anymore diamond capsule"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_41d5e8a11c119646a967e8a499a29ddbe8936f4a0eaee9b4890776bfb5826c45","typeString":"literal_string \"You cannot mint anymore diamond capsule\""}],"id":3722,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9677:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9677:88:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3732,"nodeType":"ExpressionStatement","src":"9677:88:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3734,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9783:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9787:5:14","memberName":"value","nodeType":"MemberAccess","src":"9783:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3736,"name":"diamondCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"9796:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9783:24:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"507269636520697320313330204d61746963","id":3738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9809:20:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_4510e3361cf16f44a5a6d65cfde280225c4992dd4e34ba6900a1b9bdb004ba3a","typeString":"literal_string \"Price is 130 Matic\""},"value":"Price is 130 Matic"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4510e3361cf16f44a5a6d65cfde280225c4992dd4e34ba6900a1b9bdb004ba3a","typeString":"literal_string \"Price is 130 Matic\""}],"id":3733,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9775:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9775:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3740,"nodeType":"ExpressionStatement","src":"9775:55:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3742,"name":"diamondsMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"9848:14:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage","typeString":"struct Counters.Counter storage ref"}},"id":3743,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9863:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"9848:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"333030","id":3744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:3:14","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"300"},"src":"9848:28:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416c6c206469616d6f6e642063617073756c65732068617665206265656e206d696e746564","id":3746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9878:39:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_02261fef6fc86d5ea740dcc068758508c34e2c356556c9a70f466de3329527c9","typeString":"literal_string \"All diamond capsules have been minted\""},"value":"All diamond capsules have been minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_02261fef6fc86d5ea740dcc068758508c34e2c356556c9a70f466de3329527c9","typeString":"literal_string \"All diamond capsules have been minted\""}],"id":3741,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9840:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9840:78:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3748,"nodeType":"ExpressionStatement","src":"9840:78:14"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3749,"name":"diamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"9928:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9928:9:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3751,"nodeType":"ExpressionStatement","src":"9928:9:14"},{"expression":{"arguments":[{"expression":{"id":3755,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9967:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9971:5:14","memberName":"value","nodeType":"MemberAccess","src":"9967:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3752,"name":"incAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"9947:10:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9958:8:14","memberName":"transfer","nodeType":"MemberAccess","src":"9947:19:14","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9947:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3758,"nodeType":"ExpressionStatement","src":"9947:30:14"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3759,"name":"diamondsMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"9987:14:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1755_storage","typeString":"struct Counters.Counter storage ref"}},"id":3761,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10002:9:14","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":1781,"src":"9987:24:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$1755_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1755_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9987:26:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3763,"nodeType":"ExpressionStatement","src":"9987:26:14"},{"expression":{"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10023:31:14","subExpression":{"expression":{"baseExpression":{"id":3764,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"10023:5:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_User_$2973_storage_$","typeString":"mapping(address => struct Mint.User storage ref)"}},"id":3767,"indexExpression":{"expression":{"id":3765,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10029:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10033:6:14","memberName":"sender","nodeType":"MemberAccess","src":"10029:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10023:17:14","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2973_storage","typeString":"struct Mint.User storage ref"}},"id":3768,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10041:11:14","memberName":"goldsBought","nodeType":"MemberAccess","referencedDeclaration":2972,"src":"10023:29:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3770,"nodeType":"ExpressionStatement","src":"10023:31:14"}]},"functionSelector":"b4d93b07","id":3772,"implemented":true,"kind":"function","modifiers":[{"id":3720,"kind":"modifierInvocation","modifierName":{"id":3719,"name":"preMintAllowed","nameLocations":["9652:14:14"],"nodeType":"IdentifierPath","referencedDeclaration":3041,"src":"9652:14:14"},"nodeType":"ModifierInvocation","src":"9652:14:14"}],"name":"preMintDiamond","nameLocation":"9617:14:14","nodeType":"FunctionDefinition","parameters":{"id":3718,"nodeType":"ParameterList","parameters":[],"src":"9632:2:14"},"returnParameters":{"id":3721,"nodeType":"ParameterList","parameters":[],"src":"9667:0:14"},"scope":3796,"src":"9608:453:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3794,"nodeType":"Block","src":"10109:95:14","statements":[{"assignments":[3778],"declarations":[{"constant":false,"id":3778,"mutability":"mutable","name":"ownr","nameLocation":"10127:4:14","nodeType":"VariableDeclaration","scope":3794,"src":"10119:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3777,"name":"address","nodeType":"ElementaryTypeName","src":"10119:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3781,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3779,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"10134:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10134:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10119:22:14"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":3789,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"10183:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_Mint_$3796","typeString":"contract Mint"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Mint_$3796","typeString":"contract Mint"}],"id":3788,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10175:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3787,"name":"address","nodeType":"ElementaryTypeName","src":"10175:7:14","typeDescriptions":{}}},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10175:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10189:7:14","memberName":"balance","nodeType":"MemberAccess","src":"10175:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3784,"name":"ownr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3778,"src":"10160:4:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10152:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3782,"name":"address","nodeType":"ElementaryTypeName","src":"10152:8:14","stateMutability":"payable","typeDescriptions":{}}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10152:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10166:8:14","memberName":"transfer","nodeType":"MemberAccess","src":"10152:22:14","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10152:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3793,"nodeType":"ExpressionStatement","src":"10152:45:14"}]},"functionSelector":"853828b6","id":3795,"implemented":true,"kind":"function","modifiers":[{"id":3775,"kind":"modifierInvocation","modifierName":{"id":3774,"name":"onlyOwner","nameLocations":["10099:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"10099:9:14"},"nodeType":"ModifierInvocation","src":"10099:9:14"}],"name":"withdrawAll","nameLocation":"10076:11:14","nodeType":"FunctionDefinition","parameters":{"id":3773,"nodeType":"ParameterList","parameters":[],"src":"10087:2:14"},"returnParameters":{"id":3776,"nodeType":"ParameterList","parameters":[],"src":"10109:0:14"},"scope":3796,"src":"10067:137:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3797,"src":"442:9764:14","usedErrors":[]}],"src":"33:10174:14"},"id":14}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":123,"contract":"@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_229":{"entryPoint":null,"id":229,"parameterSlots":2,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":112,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":287,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":453,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":536,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":393,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":90,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4144:15","statements":[{"nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:15"},"nodeType":"YulFunctionCall","src":"66:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:15"},"nodeType":"YulFunctionCall","src":"56:31:15"},"nodeType":"YulExpressionStatement","src":"56:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:15"},"nodeType":"YulFunctionCall","src":"96:15:15"},"nodeType":"YulExpressionStatement","src":"96:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:15"},"nodeType":"YulFunctionCall","src":"120:15:15"},"nodeType":"YulExpressionStatement","src":"120:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:15"},{"body":{"nodeType":"YulBlock","src":"210:776:15","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:15"},"nodeType":"YulFunctionCall","src":"261:12:15"},"nodeType":"YulExpressionStatement","src":"261:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:15"},"nodeType":"YulFunctionCall","src":"234:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:15"},"nodeType":"YulFunctionCall","src":"230:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:15"},"nodeType":"YulFunctionCall","src":"223:35:15"},"nodeType":"YulIf","src":"220:55:15"},{"nodeType":"YulVariableDeclaration","src":"284:23:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:15"},"nodeType":"YulFunctionCall","src":"294:13:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:15","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:15"},"nodeType":"YulFunctionCall","src":"330:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:15"},"nodeType":"YulFunctionCall","src":"326:18:15"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:15"},"nodeType":"YulFunctionCall","src":"369:18:15"},"nodeType":"YulExpressionStatement","src":"369:18:15"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:15"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:15"},"nodeType":"YulFunctionCall","src":"356:10:15"},"nodeType":"YulIf","src":"353:36:15"},{"nodeType":"YulVariableDeclaration","src":"398:17:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:15"},"nodeType":"YulFunctionCall","src":"408:7:15"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:15"},"nodeType":"YulFunctionCall","src":"438:9:15"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:15"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:15"},"nodeType":"YulFunctionCall","src":"498:13:15"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:15"},"nodeType":"YulFunctionCall","src":"494:22:15"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:15","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:15"},"nodeType":"YulFunctionCall","src":"490:31:15"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:15"},"nodeType":"YulFunctionCall","src":"486:40:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:15"},"nodeType":"YulFunctionCall","src":"474:53:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:15"},"nodeType":"YulFunctionCall","src":"588:18:15"},"nodeType":"YulExpressionStatement","src":"588:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:15"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:15"},"nodeType":"YulFunctionCall","src":"542:18:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:15"},"nodeType":"YulFunctionCall","src":"562:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:15"},"nodeType":"YulFunctionCall","src":"539:46:15"},"nodeType":"YulIf","src":"536:72:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:15"},"nodeType":"YulFunctionCall","src":"617:22:15"},"nodeType":"YulExpressionStatement","src":"617:22:15"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:15"},"nodeType":"YulFunctionCall","src":"648:18:15"},"nodeType":"YulExpressionStatement","src":"648:18:15"},{"nodeType":"YulVariableDeclaration","src":"675:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:15","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:15"},"nodeType":"YulFunctionCall","src":"737:12:15"},"nodeType":"YulExpressionStatement","src":"737:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:15"},"nodeType":"YulFunctionCall","src":"708:15:15"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:15"},"nodeType":"YulFunctionCall","src":"704:24:15"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:15"},"nodeType":"YulFunctionCall","src":"701:33:15"},"nodeType":"YulIf","src":"698:53:15"},{"nodeType":"YulVariableDeclaration","src":"760:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:15"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:15"},"nodeType":"YulFunctionCall","src":"850:14:15"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:15"},"nodeType":"YulFunctionCall","src":"846:23:15"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:15"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:15"},"nodeType":"YulFunctionCall","src":"881:14:15"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:15"},"nodeType":"YulFunctionCall","src":"877:23:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:15"},"nodeType":"YulFunctionCall","src":"871:30:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:15"},"nodeType":"YulFunctionCall","src":"839:63:15"},"nodeType":"YulExpressionStatement","src":"839:63:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:15"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:15"},"nodeType":"YulFunctionCall","src":"787:9:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:15","statements":[{"nodeType":"YulAssignment","src":"799:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:15"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:15"},"nodeType":"YulFunctionCall","src":"804:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:15","statements":[]},"src":"779:133:15"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:15"},"nodeType":"YulFunctionCall","src":"932:15:15"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:15"},"nodeType":"YulFunctionCall","src":"928:24:15"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:15"},"nodeType":"YulFunctionCall","src":"921:35:15"},"nodeType":"YulExpressionStatement","src":"921:35:15"},{"nodeType":"YulAssignment","src":"965:15:15","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:15"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:15","type":""}],"src":"146:840:15"},{"body":{"nodeType":"YulBlock","src":"1109:444:15","statements":[{"body":{"nodeType":"YulBlock","src":"1155:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1164:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1167:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1157:6:15"},"nodeType":"YulFunctionCall","src":"1157:12:15"},"nodeType":"YulExpressionStatement","src":"1157:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1130:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1139:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1126:3:15"},"nodeType":"YulFunctionCall","src":"1126:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1122:3:15"},"nodeType":"YulFunctionCall","src":"1122:32:15"},"nodeType":"YulIf","src":"1119:52:15"},{"nodeType":"YulVariableDeclaration","src":"1180:30:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1200:9:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1194:5:15"},"nodeType":"YulFunctionCall","src":"1194:16:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1184:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1219:28:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1237:2:15","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1233:3:15"},"nodeType":"YulFunctionCall","src":"1233:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:15"},"nodeType":"YulFunctionCall","src":"1229:18:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1223:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:15"},"nodeType":"YulFunctionCall","src":"1276:12:15"},"nodeType":"YulExpressionStatement","src":"1276:12:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1262:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1270:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1259:2:15"},"nodeType":"YulFunctionCall","src":"1259:14:15"},"nodeType":"YulIf","src":"1256:34:15"},{"nodeType":"YulAssignment","src":"1299:71:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1353:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:15"},"nodeType":"YulFunctionCall","src":"1338:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1362:7:15"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1309:28:15"},"nodeType":"YulFunctionCall","src":"1309:61:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"1379:41:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1416:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1401:3:15"},"nodeType":"YulFunctionCall","src":"1401:18:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1395:5:15"},"nodeType":"YulFunctionCall","src":"1395:25:15"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1383:8:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1449:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1461:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1451:6:15"},"nodeType":"YulFunctionCall","src":"1451:12:15"},"nodeType":"YulExpressionStatement","src":"1451:12:15"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1435:8:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1445:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1432:2:15"},"nodeType":"YulFunctionCall","src":"1432:16:15"},"nodeType":"YulIf","src":"1429:36:15"},{"nodeType":"YulAssignment","src":"1474:73:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1517:9:15"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1528:8:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1513:3:15"},"nodeType":"YulFunctionCall","src":"1513:24:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1539:7:15"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1484:28:15"},"nodeType":"YulFunctionCall","src":"1484:63:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1474:6:15"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1067:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1078:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1090:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1098:6:15","type":""}],"src":"991:562:15"},{"body":{"nodeType":"YulBlock","src":"1613:325:15","statements":[{"nodeType":"YulAssignment","src":"1623:22:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1637:1:15","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1640:4:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1633:3:15"},"nodeType":"YulFunctionCall","src":"1633:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1623:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"1654:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1684:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"1690:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1680:3:15"},"nodeType":"YulFunctionCall","src":"1680:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1658:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1731:31:15","statements":[{"nodeType":"YulAssignment","src":"1733:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1747:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1755:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:15"},"nodeType":"YulFunctionCall","src":"1743:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1733:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1711:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1704:6:15"},"nodeType":"YulFunctionCall","src":"1704:26:15"},"nodeType":"YulIf","src":"1701:61:15"},{"body":{"nodeType":"YulBlock","src":"1821:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1849:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1854:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1845:3:15"},"nodeType":"YulFunctionCall","src":"1845:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1835:6:15"},"nodeType":"YulFunctionCall","src":"1835:31:15"},"nodeType":"YulExpressionStatement","src":"1835:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1889:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:15"},"nodeType":"YulFunctionCall","src":"1879:15:15"},"nodeType":"YulExpressionStatement","src":"1879:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1914:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1917:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1907:6:15"},"nodeType":"YulFunctionCall","src":"1907:15:15"},"nodeType":"YulExpressionStatement","src":"1907:15:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1777:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1800:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1808:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1797:2:15"},"nodeType":"YulFunctionCall","src":"1797:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1774:2:15"},"nodeType":"YulFunctionCall","src":"1774:38:15"},"nodeType":"YulIf","src":"1771:161:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1593:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1602:6:15","type":""}],"src":"1558:380:15"},{"body":{"nodeType":"YulBlock","src":"1999:65:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2016:1:15","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2019:3:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2009:6:15"},"nodeType":"YulFunctionCall","src":"2009:14:15"},"nodeType":"YulExpressionStatement","src":"2009:14:15"},{"nodeType":"YulAssignment","src":"2032:26:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2040:9:15"},"nodeType":"YulFunctionCall","src":"2040:18:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2032:4:15"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1982:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1990:4:15","type":""}],"src":"1943:121:15"},{"body":{"nodeType":"YulBlock","src":"2150:464:15","statements":[{"body":{"nodeType":"YulBlock","src":"2183:425:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2197:11:15","value":{"kind":"number","nodeType":"YulLiteral","src":"2207:1:15","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2201:2:15","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:15"},{"name":"array","nodeType":"YulIdentifier","src":"2232:5:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2221:6:15"},"nodeType":"YulFunctionCall","src":"2221:17:15"},"nodeType":"YulExpressionStatement","src":"2221:17:15"},{"nodeType":"YulVariableDeclaration","src":"2251:31:15","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2273:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"2277:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2263:9:15"},"nodeType":"YulFunctionCall","src":"2263:19:15"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2255:4:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2295:57:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2318:4:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:1:15","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2335:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2331:3:15"},"nodeType":"YulFunctionCall","src":"2331:19:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2324:3:15"},"nodeType":"YulFunctionCall","src":"2324:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2314:3:15"},"nodeType":"YulFunctionCall","src":"2314:38:15"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2299:11:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2389:23:15","statements":[{"nodeType":"YulAssignment","src":"2391:19:15","value":{"name":"data","nodeType":"YulIdentifier","src":"2406:4:15"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2391:11:15"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2371:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"2383:4:15","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2368:2:15"},"nodeType":"YulFunctionCall","src":"2368:20:15"},"nodeType":"YulIf","src":"2365:47:15"},{"nodeType":"YulVariableDeclaration","src":"2425:41:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2439:4:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2449:1:15","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2456:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"2461:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2452:3:15"},"nodeType":"YulFunctionCall","src":"2452:12:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2445:3:15"},"nodeType":"YulFunctionCall","src":"2445:20:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2435:3:15"},"nodeType":"YulFunctionCall","src":"2435:31:15"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2429:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2479:24:15","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2492:11:15"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2483:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2577:21:15","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2586:5:15"},{"name":"_1","nodeType":"YulIdentifier","src":"2593:2:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2579:6:15"},"nodeType":"YulFunctionCall","src":"2579:17:15"},"nodeType":"YulExpressionStatement","src":"2579:17:15"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2527:5:15"},{"name":"_2","nodeType":"YulIdentifier","src":"2534:2:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2524:2:15"},"nodeType":"YulFunctionCall","src":"2524:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2538:26:15","statements":[{"nodeType":"YulAssignment","src":"2540:22:15","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2553:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"2560:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:15"},"nodeType":"YulFunctionCall","src":"2549:13:15"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2540:5:15"}]}]},"pre":{"nodeType":"YulBlock","src":"2520:3:15","statements":[]},"src":"2516:82:15"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2166:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"2171:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2163:2:15"},"nodeType":"YulFunctionCall","src":"2163:11:15"},"nodeType":"YulIf","src":"2160:448:15"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2122:5:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"2129:3:15","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2134:10:15","type":""}],"src":"2069:545:15"},{"body":{"nodeType":"YulBlock","src":"2704:81:15","statements":[{"nodeType":"YulAssignment","src":"2714:65:15","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2729:4:15"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2747:1:15","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2750:3:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2743:3:15"},"nodeType":"YulFunctionCall","src":"2743:11:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2756:3:15"},"nodeType":"YulFunctionCall","src":"2756:6:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2739:3:15"},"nodeType":"YulFunctionCall","src":"2739:24:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2735:3:15"},"nodeType":"YulFunctionCall","src":"2735:29:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2725:3:15"},"nodeType":"YulFunctionCall","src":"2725:40:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:15","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2774:3:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2767:3:15"},"nodeType":"YulFunctionCall","src":"2767:11:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2722:2:15"},"nodeType":"YulFunctionCall","src":"2722:57:15"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2714:4:15"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2681:4:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"2687:3:15","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2695:4:15","type":""}],"src":"2619:166:15"},{"body":{"nodeType":"YulBlock","src":"2886:1256:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2896:24:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2916:3:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2910:5:15"},"nodeType":"YulFunctionCall","src":"2910:10:15"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2900:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2963:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2965:16:15"},"nodeType":"YulFunctionCall","src":"2965:18:15"},"nodeType":"YulExpressionStatement","src":"2965:18:15"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2935:6:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:2:15","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2947:3:15"},"nodeType":"YulFunctionCall","src":"2947:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"2959:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2943:3:15"},"nodeType":"YulFunctionCall","src":"2943:18:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2932:2:15"},"nodeType":"YulFunctionCall","src":"2932:30:15"},"nodeType":"YulIf","src":"2929:56:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3038:4:15"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3076:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3070:5:15"},"nodeType":"YulFunctionCall","src":"3070:11:15"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3044:25:15"},"nodeType":"YulFunctionCall","src":"3044:38:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"3084:6:15"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2994:43:15"},"nodeType":"YulFunctionCall","src":"2994:97:15"},"nodeType":"YulExpressionStatement","src":"2994:97:15"},{"nodeType":"YulVariableDeclaration","src":"3100:18:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3117:1:15","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3104:9:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3127:23:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:4:15","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3131:11:15","type":""}]},{"nodeType":"YulAssignment","src":"3159:24:15","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3172:11:15"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3159:9:15"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3229:656:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3243:35:15","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3262:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3270:3:15"},"nodeType":"YulFunctionCall","src":"3270:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3258:3:15"},"nodeType":"YulFunctionCall","src":"3258:20:15"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3247:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3291:49:15","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3335:4:15"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3305:29:15"},"nodeType":"YulFunctionCall","src":"3305:35:15"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3295:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3362:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3357:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3440:172:15","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3465:6:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3483:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3488:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3479:3:15"},"nodeType":"YulFunctionCall","src":"3479:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:15"},"nodeType":"YulFunctionCall","src":"3473:26:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3458:6:15"},"nodeType":"YulFunctionCall","src":"3458:42:15"},"nodeType":"YulExpressionStatement","src":"3458:42:15"},{"nodeType":"YulAssignment","src":"3517:24:15","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3531:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"3539:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3527:3:15"},"nodeType":"YulFunctionCall","src":"3527:14:15"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3517:6:15"}]},{"nodeType":"YulAssignment","src":"3558:40:15","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3575:9:15"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3586:11:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3571:3:15"},"nodeType":"YulFunctionCall","src":"3571:27:15"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3558:9:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3387:1:15"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3390:7:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3384:2:15"},"nodeType":"YulFunctionCall","src":"3384:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3399:28:15","statements":[{"nodeType":"YulAssignment","src":"3401:24:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3410:1:15"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3413:11:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:15"},"nodeType":"YulFunctionCall","src":"3406:19:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3401:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"3380:3:15","statements":[]},"src":"3376:236:15"},{"body":{"nodeType":"YulBlock","src":"3660:166:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3678:43:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3705:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3710:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:15"},"nodeType":"YulFunctionCall","src":"3701:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3695:5:15"},"nodeType":"YulFunctionCall","src":"3695:26:15"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3682:9:15","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3745:6:15"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3757:9:15"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3784:1:15","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3787:6:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3780:3:15"},"nodeType":"YulFunctionCall","src":"3780:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"3796:3:15","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3776:3:15"},"nodeType":"YulFunctionCall","src":"3776:24:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3806:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3802:3:15"},"nodeType":"YulFunctionCall","src":"3802:6:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3772:3:15"},"nodeType":"YulFunctionCall","src":"3772:37:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3768:3:15"},"nodeType":"YulFunctionCall","src":"3768:42:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3753:3:15"},"nodeType":"YulFunctionCall","src":"3753:58:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3738:6:15"},"nodeType":"YulFunctionCall","src":"3738:74:15"},"nodeType":"YulExpressionStatement","src":"3738:74:15"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3631:7:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"3640:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3628:2:15"},"nodeType":"YulFunctionCall","src":"3628:19:15"},"nodeType":"YulIf","src":"3625:201:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3846:4:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3860:1:15","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3863:6:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3856:3:15"},"nodeType":"YulFunctionCall","src":"3856:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"3872:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3852:3:15"},"nodeType":"YulFunctionCall","src":"3852:22:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3839:6:15"},"nodeType":"YulFunctionCall","src":"3839:36:15"},"nodeType":"YulExpressionStatement","src":"3839:36:15"}]},"nodeType":"YulCase","src":"3222:663:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3227:1:15","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3902:234:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3916:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3929:1:15","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3920:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3965:67:15","statements":[{"nodeType":"YulAssignment","src":"3983:35:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4002:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4007:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:15"},"nodeType":"YulFunctionCall","src":"3998:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3992:5:15"},"nodeType":"YulFunctionCall","src":"3992:26:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3983:5:15"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3946:6:15"},"nodeType":"YulIf","src":"3943:89:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4052:4:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4111:5:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"4118:6:15"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4058:52:15"},"nodeType":"YulFunctionCall","src":"4058:67:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4045:6:15"},"nodeType":"YulFunctionCall","src":"4045:81:15"},"nodeType":"YulExpressionStatement","src":"4045:81:15"}]},"nodeType":"YulCase","src":"3894:242:15","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3202:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3199:2:15"},"nodeType":"YulFunctionCall","src":"3199:14:15"},"nodeType":"YulSwitch","src":"3192:944:15"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2871:4:15","type":""},{"name":"src","nodeType":"YulTypedName","src":"2877:3:15","type":""}],"src":"2790:1352:15"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200149d3803806200149d83398101604081905262000034916200011f565b600062000042838262000218565b50600162000051828262000218565b505050620002e4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b81516001600160401b03808211156200009f576200009f6200005a565b604051601f8301601f19908116603f01168101908282118183101715620000ca57620000ca6200005a565b81604052838152602092508683858801011115620000e757600080fd5b600091505b838210156200010b5785820183015181830184015290820190620000ec565b600093810190920192909252949350505050565b600080604083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b620001598683870162000070565b935060208501519150808211156200017057600080fd5b506200017f8582860162000070565b9150509250929050565b600181811c908216806200019e57607f821691505b602082108103620001bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021357600081815260208120601f850160051c81016020861015620001ee5750805b601f850160051c820191505b818110156200020f57828155600101620001fa565b5050505b505050565b81516001600160401b038111156200023457620002346200005a565b6200024c8162000245845462000189565b84620001c5565b602080601f8311600181146200028457600084156200026b5750858301515b600019600386901b1c1916600185901b1785556200020f565b600085815260208120601f198616915b82811015620002b55788860151825594840194600190910190840162000294565b5085821015620002d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6111a980620002f46000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101b3578063b88d4fde146101c6578063c87b56dd146101d9578063e985e9c5146101ec57600080fd5b80636352211e1461017757806370a082311461018a57806395d89b41146101ab57600080fd5b806301ffc9a7146100d457806306fdde03146100fc578063081812fc14610111578063095ea7b31461013c57806323b872dd1461015157806342842e0e14610164575b600080fd5b6100e76100e2366004610cf9565b6101ff565b60405190151581526020015b60405180910390f35b610104610251565b6040516100f39190610d66565b61012461011f366004610d79565b6102e3565b6040516001600160a01b0390911681526020016100f3565b61014f61014a366004610dae565b61030a565b005b61014f61015f366004610dd8565b610424565b61014f610172366004610dd8565b610455565b610124610185366004610d79565b610470565b61019d610198366004610e14565b6104d0565b6040519081526020016100f3565b610104610556565b61014f6101c1366004610e2f565b610565565b61014f6101d4366004610e81565b610574565b6101046101e7366004610d79565b6105ac565b6100e76101fa366004610f5d565b610620565b60006001600160e01b031982166380ac58cd60e01b148061023057506001600160e01b03198216635b5e139f60e01b145b8061024b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461026090610f90565b80601f016020809104026020016040519081016040528092919081815260200182805461028c90610f90565b80156102d95780601f106102ae576101008083540402835291602001916102d9565b820191906000526020600020905b8154815290600101906020018083116102bc57829003601f168201915b5050505050905090565b60006102ee8261064e565b506000908152600460205260409020546001600160a01b031690565b600061031582610470565b9050806001600160a01b0316836001600160a01b0316036103875760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806103a357506103a38133610620565b6104155760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161037e565b61041f83836106b0565b505050565b61042e338261071e565b61044a5760405162461bcd60e51b815260040161037e90610fca565b61041f83838361077d565b61041f83838360405180602001604052806000815250610574565b6000818152600260205260408120546001600160a01b03168061024b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161037e565b60006001600160a01b03821661053a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161037e565b506001600160a01b031660009081526003602052604090205490565b60606001805461026090610f90565b6105703383836108ee565b5050565b61057e338361071e565b61059a5760405162461bcd60e51b815260040161037e90610fca565b6105a6848484846109bc565b50505050565b60606105b78261064e565b60006105ce60408051602081019091526000815290565b905060008151116105ee5760405180602001604052806000815250610619565b806105f8846109ef565b604051602001610609929190611017565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260409020546001600160a01b03166106ad5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161037e565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906106e582610470565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061072a83610470565b9050806001600160a01b0316846001600160a01b0316148061075157506107518185610620565b806107755750836001600160a01b031661076a846102e3565b6001600160a01b0316145b949350505050565b826001600160a01b031661079082610470565b6001600160a01b0316146107b65760405162461bcd60e51b815260040161037e90611046565b6001600160a01b0382166108185760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161037e565b6108258383836001610a82565b826001600160a01b031661083882610470565b6001600160a01b03161461085e5760405162461bcd60e51b815260040161037e90611046565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b03160361094f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161037e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6109c784848461077d565b6109d384848484610b0a565b6105a65760405162461bcd60e51b815260040161037e9061108b565b606060006109fc83610c0b565b600101905060008167ffffffffffffffff811115610a1c57610a1c610e6b565b6040519080825280601f01601f191660200182016040528015610a46576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610a5057509392505050565b60018111156105a6576001600160a01b03841615610ac8576001600160a01b03841660009081526003602052604081208054839290610ac29084906110f3565b90915550505b6001600160a01b038316156105a6576001600160a01b03831660009081526003602052604081208054839290610aff908490611106565b909155505050505050565b60006001600160a01b0384163b15610c0057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610b4e903390899088908890600401611119565b6020604051808303816000875af1925050508015610b89575060408051601f3d908101601f19168201909252610b8691810190611156565b60015b610be6573d808015610bb7576040519150601f19603f3d011682016040523d82523d6000602084013e610bbc565b606091505b508051600003610bde5760405162461bcd60e51b815260040161037e9061108b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610775565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610c4a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610c76576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610c9457662386f26fc10000830492506010015b6305f5e1008310610cac576305f5e100830492506008015b6127108310610cc057612710830492506004015b60648310610cd2576064830492506002015b600a831061024b5760010192915050565b6001600160e01b0319811681146106ad57600080fd5b600060208284031215610d0b57600080fd5b813561061981610ce3565b60005b83811015610d31578181015183820152602001610d19565b50506000910152565b60008151808452610d52816020860160208601610d16565b601f01601f19169290920160200192915050565b6020815260006106196020830184610d3a565b600060208284031215610d8b57600080fd5b5035919050565b80356001600160a01b0381168114610da957600080fd5b919050565b60008060408385031215610dc157600080fd5b610dca83610d92565b946020939093013593505050565b600080600060608486031215610ded57600080fd5b610df684610d92565b9250610e0460208501610d92565b9150604084013590509250925092565b600060208284031215610e2657600080fd5b61061982610d92565b60008060408385031215610e4257600080fd5b610e4b83610d92565b915060208301358015158114610e6057600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610e9757600080fd5b610ea085610d92565b9350610eae60208601610d92565b925060408501359150606085013567ffffffffffffffff80821115610ed257600080fd5b818701915087601f830112610ee657600080fd5b813581811115610ef857610ef8610e6b565b604051601f8201601f19908116603f01168101908382118183101715610f2057610f20610e6b565b816040528281528a6020848701011115610f3957600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610f7057600080fd5b610f7983610d92565b9150610f8760208401610d92565b90509250929050565b600181811c90821680610fa457607f821691505b602082108103610fc457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008351611029818460208801610d16565b83519083019061103d818360208801610d16565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561024b5761024b6110dd565b8082018082111561024b5761024b6110dd565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061114c90830184610d3a565b9695505050505050565b60006020828403121561116857600080fd5b815161061981610ce356fea264697066735822122076798ea5dce3ba3332deb88b40f29d76e3bb0cc46da707fa13237b97296df83e64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x149D CODESIZE SUB DUP1 PUSH3 0x149D DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x11F JUMP JUMPDEST PUSH1 0x0 PUSH3 0x42 DUP4 DUP3 PUSH3 0x218 JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x51 DUP3 DUP3 PUSH3 0x218 JUMP JUMPDEST POP POP POP PUSH3 0x2E4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9F JUMPI PUSH3 0x9F PUSH3 0x5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xCA JUMPI PUSH3 0xCA PUSH3 0x5A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x10B JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x159 DUP7 DUP4 DUP8 ADD PUSH3 0x70 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x17F DUP6 DUP3 DUP7 ADD PUSH3 0x70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x19E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1BF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x213 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1EE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x20F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FA JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x234 JUMPI PUSH3 0x234 PUSH3 0x5A JUMP JUMPDEST PUSH3 0x24C DUP2 PUSH3 0x245 DUP5 SLOAD PUSH3 0x189 JUMP JUMPDEST DUP5 PUSH3 0x1C5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x284 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x26B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x20F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2B5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x294 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2D4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x11A9 DUP1 PUSH3 0x2F4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x164 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0xCF9 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x251 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xD66 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0xD79 JUMP JUMPDEST PUSH2 0x2E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xDAE JUMP JUMPDEST PUSH2 0x30A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xDD8 JUMP JUMPDEST PUSH2 0x424 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xDD8 JUMP JUMPDEST PUSH2 0x455 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xD79 JUMP JUMPDEST PUSH2 0x470 JUMP JUMPDEST PUSH2 0x19D PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0xE14 JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x556 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xE2F JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE81 JUMP JUMPDEST PUSH2 0x574 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD79 JUMP JUMPDEST PUSH2 0x5AC JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xF5D JUMP JUMPDEST PUSH2 0x620 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x230 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x24B JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x260 SWAP1 PUSH2 0xF90 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x28C SWAP1 PUSH2 0xF90 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2D9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2AE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2D9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2BC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EE DUP3 PUSH2 0x64E JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x315 DUP3 PUSH2 0x470 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x387 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x3A3 JUMPI POP PUSH2 0x3A3 DUP2 CALLER PUSH2 0x620 JUMP JUMPDEST PUSH2 0x415 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x37E JUMP JUMPDEST PUSH2 0x41F DUP4 DUP4 PUSH2 0x6B0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x42E CALLER DUP3 PUSH2 0x71E JUMP JUMPDEST PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0xFCA JUMP JUMPDEST PUSH2 0x41F DUP4 DUP4 DUP4 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x41F DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x574 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x24B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x37E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x53A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x37E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x260 SWAP1 PUSH2 0xF90 JUMP JUMPDEST PUSH2 0x570 CALLER DUP4 DUP4 PUSH2 0x8EE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x57E CALLER DUP4 PUSH2 0x71E JUMP JUMPDEST PUSH2 0x59A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0xFCA JUMP JUMPDEST PUSH2 0x5A6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x9BC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5B7 DUP3 PUSH2 0x64E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x5EE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x619 JUMP JUMPDEST DUP1 PUSH2 0x5F8 DUP5 PUSH2 0x9EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x609 SWAP3 SWAP2 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x37E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x6E5 DUP3 PUSH2 0x470 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x72A DUP4 PUSH2 0x470 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x751 JUMPI POP PUSH2 0x751 DUP2 DUP6 PUSH2 0x620 JUMP JUMPDEST DUP1 PUSH2 0x775 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x76A DUP5 PUSH2 0x2E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x790 DUP3 PUSH2 0x470 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x818 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x37E JUMP JUMPDEST PUSH2 0x825 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xA82 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x838 DUP3 PUSH2 0x470 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x85E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x94F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x37E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x9C7 DUP5 DUP5 DUP5 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x9D3 DUP5 DUP5 DUP5 DUP5 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0x108B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x9FC DUP4 PUSH2 0xC0B JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA1C JUMPI PUSH2 0xA1C PUSH2 0xE6B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA46 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xA50 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xAC8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xAC2 SWAP1 DUP5 SWAP1 PUSH2 0x10F3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xAFF SWAP1 DUP5 SWAP1 PUSH2 0x1106 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xC00 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xB4E SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1119 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB89 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB86 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1156 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xBE6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xBB7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBBC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xBDE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0x108B JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x775 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xC4A JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xC76 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xC94 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xCAC JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xCC0 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xCD2 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x24B JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x619 DUP2 PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD31 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD19 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xD52 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xD16 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x619 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD3A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDCA DUP4 PUSH2 0xD92 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDF6 DUP5 PUSH2 0xD92 JUMP JUMPDEST SWAP3 POP PUSH2 0xE04 PUSH1 0x20 DUP6 ADD PUSH2 0xD92 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x619 DUP3 PUSH2 0xD92 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE4B DUP4 PUSH2 0xD92 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEA0 DUP6 PUSH2 0xD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xEAE PUSH1 0x20 DUP7 ADD PUSH2 0xD92 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xED2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xEF8 JUMPI PUSH2 0xEF8 PUSH2 0xE6B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xF20 JUMPI PUSH2 0xF20 PUSH2 0xE6B JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xF39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF79 DUP4 PUSH2 0xD92 JUMP JUMPDEST SWAP2 POP PUSH2 0xF87 PUSH1 0x20 DUP5 ADD PUSH2 0xD92 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xFA4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xFC4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1029 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xD16 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x103D DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xD16 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x24B JUMPI PUSH2 0x24B PUSH2 0x10DD JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x24B JUMPI PUSH2 0x24B PUSH2 0x10DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x114C SWAP1 DUP4 ADD DUP5 PUSH2 0xD3A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x619 DUP2 PUSH2 0xCE3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x798EA5DCE3BA3332DEB88B40F29D76E3BB0CC46DA707FA SGT 0x23 PUSH28 0x97296DF83E64736F6C63430008110033000000000000000000000000 ","sourceMap":"628:16327:2:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1456:5;:13;1464:5;1456;:13;:::i;:::-;-1:-1:-1;1479:7:2;:17;1489:7;1479;:17;:::i;:::-;;1390:113;;628:16327;;14:127:15;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:15;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:15;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:15:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:15;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:15;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2160:448;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:15;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:15;;;3992:26;3943:89;-1:-1:-1;;2747:1:15;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:15;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:15;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:15;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:15:o;:::-;628:16327:2;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1110":{"entryPoint":null,"id":1110,"parameterSlots":4,"returnSlots":0},"@_approve_943":{"entryPoint":1712,"id":943,"parameterSlots":2,"returnSlots":0},"@_baseURI_380":{"entryPoint":null,"id":380,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1097":{"entryPoint":2690,"id":1097,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1051":{"entryPoint":2826,"id":1051,"parameterSlots":4,"returnSlots":1},"@_exists_612":{"entryPoint":null,"id":612,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_646":{"entryPoint":1822,"id":646,"parameterSlots":2,"returnSlots":1},"@_msgSender_1739":{"entryPoint":null,"id":1739,"parameterSlots":0,"returnSlots":1},"@_ownerOf_594":{"entryPoint":null,"id":594,"parameterSlots":1,"returnSlots":1},"@_requireMinted_989":{"entryPoint":1614,"id":989,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_581":{"entryPoint":2492,"id":581,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_975":{"entryPoint":2286,"id":975,"parameterSlots":3,"returnSlots":0},"@_transfer_919":{"entryPoint":1917,"id":919,"parameterSlots":3,"returnSlots":0},"@approve_423":{"entryPoint":778,"id":423,"parameterSlots":2,"returnSlots":0},"@balanceOf_284":{"entryPoint":1232,"id":284,"parameterSlots":1,"returnSlots":1},"@getApproved_441":{"entryPoint":739,"id":441,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_476":{"entryPoint":1568,"id":476,"parameterSlots":2,"returnSlots":1},"@isContract_1415":{"entryPoint":null,"id":1415,"parameterSlots":1,"returnSlots":1},"@log10_2736":{"entryPoint":3083,"id":2736,"parameterSlots":1,"returnSlots":1},"@name_322":{"entryPoint":593,"id":322,"parameterSlots":0,"returnSlots":1},"@ownerOf_312":{"entryPoint":1136,"id":312,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_522":{"entryPoint":1109,"id":522,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_552":{"entryPoint":1396,"id":552,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_458":{"entryPoint":1381,"id":458,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2021":{"entryPoint":null,"id":2021,"parameterSlots":1,"returnSlots":1},"@supportsInterface_260":{"entryPoint":511,"id":260,"parameterSlots":1,"returnSlots":1},"@symbol_332":{"entryPoint":1366,"id":332,"parameterSlots":0,"returnSlots":1},"@toString_1881":{"entryPoint":2543,"id":1881,"parameterSlots":1,"returnSlots":1},"@tokenURI_371":{"entryPoint":1452,"id":371,"parameterSlots":1,"returnSlots":1},"@transferFrom_503":{"entryPoint":1060,"id":503,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":3474,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3604,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3933,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3544,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":3713,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3631,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3502,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3321,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4438,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3449,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3386,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4119,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4377,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3430,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4042,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4235,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4166,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4358,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4339,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3350,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3984,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4317,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3691,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":3299,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10527:15","statements":[{"nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:15","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:15"},"nodeType":"YulFunctionCall","src":"125:12:15"},"nodeType":"YulExpressionStatement","src":"125:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:15","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:15"},"nodeType":"YulFunctionCall","src":"99:20:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:15"},"nodeType":"YulFunctionCall","src":"88:32:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:15"},"nodeType":"YulFunctionCall","src":"78:43:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:15"},"nodeType":"YulFunctionCall","src":"71:51:15"},"nodeType":"YulIf","src":"68:71:15"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:15","type":""}],"src":"14:131:15"},{"body":{"nodeType":"YulBlock","src":"219:176:15","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:15"},"nodeType":"YulFunctionCall","src":"267:12:15"},"nodeType":"YulExpressionStatement","src":"267:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:15"},"nodeType":"YulFunctionCall","src":"236:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:15"},"nodeType":"YulFunctionCall","src":"232:32:15"},"nodeType":"YulIf","src":"229:52:15"},{"nodeType":"YulVariableDeclaration","src":"290:36:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:15"},"nodeType":"YulFunctionCall","src":"303:23:15"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:15","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:15"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:15"},"nodeType":"YulFunctionCall","src":"335:30:15"},"nodeType":"YulExpressionStatement","src":"335:30:15"},{"nodeType":"YulAssignment","src":"374:15:15","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:15"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:15","type":""}],"src":"150:245:15"},{"body":{"nodeType":"YulBlock","src":"495:92:15","statements":[{"nodeType":"YulAssignment","src":"505:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:15"},"nodeType":"YulFunctionCall","src":"513:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:15"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:15"},"nodeType":"YulFunctionCall","src":"565:14:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:15"},"nodeType":"YulFunctionCall","src":"558:22:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:15"},"nodeType":"YulFunctionCall","src":"540:41:15"},"nodeType":"YulExpressionStatement","src":"540:41:15"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:15","type":""}],"src":"400:187:15"},{"body":{"nodeType":"YulBlock","src":"658:184:15","statements":[{"nodeType":"YulVariableDeclaration","src":"668:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"677:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"672:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"737:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"762:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"767:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:15"},"nodeType":"YulFunctionCall","src":"758:11:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"781:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"786:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:15"},"nodeType":"YulFunctionCall","src":"777:11:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"771:5:15"},"nodeType":"YulFunctionCall","src":"771:18:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"751:6:15"},"nodeType":"YulFunctionCall","src":"751:39:15"},"nodeType":"YulExpressionStatement","src":"751:39:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"701:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"695:2:15"},"nodeType":"YulFunctionCall","src":"695:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"709:19:15","statements":[{"nodeType":"YulAssignment","src":"711:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"720:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"723:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:15"},"nodeType":"YulFunctionCall","src":"716:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"711:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"691:3:15","statements":[]},"src":"687:113:15"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"820:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"825:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"816:3:15"},"nodeType":"YulFunctionCall","src":"816:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:15"},"nodeType":"YulFunctionCall","src":"809:27:15"},"nodeType":"YulExpressionStatement","src":"809:27:15"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"636:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"641:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"646:6:15","type":""}],"src":"592:250:15"},{"body":{"nodeType":"YulBlock","src":"897:221:15","statements":[{"nodeType":"YulVariableDeclaration","src":"907:26:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"927:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"921:5:15"},"nodeType":"YulFunctionCall","src":"921:12:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"911:6:15","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"949:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"954:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:15"},"nodeType":"YulFunctionCall","src":"942:19:15"},"nodeType":"YulExpressionStatement","src":"942:19:15"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1009:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"1016:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:15"},"nodeType":"YulFunctionCall","src":"1005:16:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1027:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"1032:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:15"},"nodeType":"YulFunctionCall","src":"1023:14:15"},{"name":"length","nodeType":"YulIdentifier","src":"1039:6:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"970:34:15"},"nodeType":"YulFunctionCall","src":"970:76:15"},"nodeType":"YulExpressionStatement","src":"970:76:15"},{"nodeType":"YulAssignment","src":"1055:57:15","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1070:3:15"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1083:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1091:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1079:3:15"},"nodeType":"YulFunctionCall","src":"1079:15:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1100:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1096:3:15"},"nodeType":"YulFunctionCall","src":"1096:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1075:3:15"},"nodeType":"YulFunctionCall","src":"1075:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:15"},"nodeType":"YulFunctionCall","src":"1066:39:15"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1062:3:15"},"nodeType":"YulFunctionCall","src":"1062:50:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1055:3:15"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"874:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"881:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"889:3:15","type":""}],"src":"847:271:15"},{"body":{"nodeType":"YulBlock","src":"1244:99:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1261:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1272:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1254:6:15"},"nodeType":"YulFunctionCall","src":"1254:21:15"},"nodeType":"YulExpressionStatement","src":"1254:21:15"},{"nodeType":"YulAssignment","src":"1284:53:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1310:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1322:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1333:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1318:3:15"},"nodeType":"YulFunctionCall","src":"1318:18:15"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1292:17:15"},"nodeType":"YulFunctionCall","src":"1292:45:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1284:4:15"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1213:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1224:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1235:4:15","type":""}],"src":"1123:220:15"},{"body":{"nodeType":"YulBlock","src":"1418:110:15","statements":[{"body":{"nodeType":"YulBlock","src":"1464:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1466:6:15"},"nodeType":"YulFunctionCall","src":"1466:12:15"},"nodeType":"YulExpressionStatement","src":"1466:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1439:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1448:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:15"},"nodeType":"YulFunctionCall","src":"1435:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1431:3:15"},"nodeType":"YulFunctionCall","src":"1431:32:15"},"nodeType":"YulIf","src":"1428:52:15"},{"nodeType":"YulAssignment","src":"1489:33:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1499:12:15"},"nodeType":"YulFunctionCall","src":"1499:23:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1489:6:15"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1384:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1395:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1407:6:15","type":""}],"src":"1348:180:15"},{"body":{"nodeType":"YulBlock","src":"1634:102:15","statements":[{"nodeType":"YulAssignment","src":"1644:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1656:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1667:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:15"},"nodeType":"YulFunctionCall","src":"1652:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1644:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1686:9:15"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1701:6:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1713:3:15"},"nodeType":"YulFunctionCall","src":"1713:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"1726:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1709:3:15"},"nodeType":"YulFunctionCall","src":"1709:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1697:3:15"},"nodeType":"YulFunctionCall","src":"1697:32:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1679:6:15"},"nodeType":"YulFunctionCall","src":"1679:51:15"},"nodeType":"YulExpressionStatement","src":"1679:51:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1603:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1614:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1625:4:15","type":""}],"src":"1533:203:15"},{"body":{"nodeType":"YulBlock","src":"1790:124:15","statements":[{"nodeType":"YulAssignment","src":"1800:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1822:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1809:12:15"},"nodeType":"YulFunctionCall","src":"1809:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:15"}]},{"body":{"nodeType":"YulBlock","src":"1892:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1901:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1894:6:15"},"nodeType":"YulFunctionCall","src":"1894:12:15"},"nodeType":"YulExpressionStatement","src":"1894:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1851:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1862:5:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1882:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1873:3:15"},"nodeType":"YulFunctionCall","src":"1873:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"1886:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1869:3:15"},"nodeType":"YulFunctionCall","src":"1869:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1858:3:15"},"nodeType":"YulFunctionCall","src":"1858:31:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1848:2:15"},"nodeType":"YulFunctionCall","src":"1848:42:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1841:6:15"},"nodeType":"YulFunctionCall","src":"1841:50:15"},"nodeType":"YulIf","src":"1838:70:15"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1780:5:15","type":""}],"src":"1741:173:15"},{"body":{"nodeType":"YulBlock","src":"2006:167:15","statements":[{"body":{"nodeType":"YulBlock","src":"2052:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2061:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2064:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2054:6:15"},"nodeType":"YulFunctionCall","src":"2054:12:15"},"nodeType":"YulExpressionStatement","src":"2054:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2027:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2023:3:15"},"nodeType":"YulFunctionCall","src":"2023:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"2048:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2019:3:15"},"nodeType":"YulFunctionCall","src":"2019:32:15"},"nodeType":"YulIf","src":"2016:52:15"},{"nodeType":"YulAssignment","src":"2077:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2106:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2087:18:15"},"nodeType":"YulFunctionCall","src":"2087:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2077:6:15"}]},{"nodeType":"YulAssignment","src":"2125:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2152:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2148:3:15"},"nodeType":"YulFunctionCall","src":"2148:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2135:12:15"},"nodeType":"YulFunctionCall","src":"2135:32:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2125:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1964:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1975:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1987:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1995:6:15","type":""}],"src":"1919:254:15"},{"body":{"nodeType":"YulBlock","src":"2282:224:15","statements":[{"body":{"nodeType":"YulBlock","src":"2328:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2337:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2340:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2330:6:15"},"nodeType":"YulFunctionCall","src":"2330:12:15"},"nodeType":"YulExpressionStatement","src":"2330:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2303:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2312:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2299:3:15"},"nodeType":"YulFunctionCall","src":"2299:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"2324:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2295:3:15"},"nodeType":"YulFunctionCall","src":"2295:32:15"},"nodeType":"YulIf","src":"2292:52:15"},{"nodeType":"YulAssignment","src":"2353:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2382:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2363:18:15"},"nodeType":"YulFunctionCall","src":"2363:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2353:6:15"}]},{"nodeType":"YulAssignment","src":"2401:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2434:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2445:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2430:3:15"},"nodeType":"YulFunctionCall","src":"2430:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2411:18:15"},"nodeType":"YulFunctionCall","src":"2411:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2401:6:15"}]},{"nodeType":"YulAssignment","src":"2458:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2485:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2496:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2481:3:15"},"nodeType":"YulFunctionCall","src":"2481:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2468:12:15"},"nodeType":"YulFunctionCall","src":"2468:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2458:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2232:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2243:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2255:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2263:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2271:6:15","type":""}],"src":"2178:328:15"},{"body":{"nodeType":"YulBlock","src":"2581:116:15","statements":[{"body":{"nodeType":"YulBlock","src":"2627:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2636:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2639:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2629:6:15"},"nodeType":"YulFunctionCall","src":"2629:12:15"},"nodeType":"YulExpressionStatement","src":"2629:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2602:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2611:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2598:3:15"},"nodeType":"YulFunctionCall","src":"2598:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"2623:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2594:3:15"},"nodeType":"YulFunctionCall","src":"2594:32:15"},"nodeType":"YulIf","src":"2591:52:15"},{"nodeType":"YulAssignment","src":"2652:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2662:18:15"},"nodeType":"YulFunctionCall","src":"2662:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2652:6:15"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2547:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2558:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2570:6:15","type":""}],"src":"2511:186:15"},{"body":{"nodeType":"YulBlock","src":"2803:76:15","statements":[{"nodeType":"YulAssignment","src":"2813:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2825:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2836:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2821:3:15"},"nodeType":"YulFunctionCall","src":"2821:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2813:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2855:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"2866:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2848:6:15"},"nodeType":"YulFunctionCall","src":"2848:25:15"},"nodeType":"YulExpressionStatement","src":"2848:25:15"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2772:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2783:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2794:4:15","type":""}],"src":"2702:177:15"},{"body":{"nodeType":"YulBlock","src":"2968:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"3014:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3023:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3026:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3016:6:15"},"nodeType":"YulFunctionCall","src":"3016:12:15"},"nodeType":"YulExpressionStatement","src":"3016:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2989:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2998:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2985:3:15"},"nodeType":"YulFunctionCall","src":"2985:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3010:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2981:3:15"},"nodeType":"YulFunctionCall","src":"2981:32:15"},"nodeType":"YulIf","src":"2978:52:15"},{"nodeType":"YulAssignment","src":"3039:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3068:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3049:18:15"},"nodeType":"YulFunctionCall","src":"3049:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3039:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"3087:45:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3117:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3128:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3113:3:15"},"nodeType":"YulFunctionCall","src":"3113:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3100:12:15"},"nodeType":"YulFunctionCall","src":"3100:32:15"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3091:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3185:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3194:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3197:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3187:6:15"},"nodeType":"YulFunctionCall","src":"3187:12:15"},"nodeType":"YulExpressionStatement","src":"3187:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3154:5:15"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3175:5:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3168:6:15"},"nodeType":"YulFunctionCall","src":"3168:13:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3161:6:15"},"nodeType":"YulFunctionCall","src":"3161:21:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3151:2:15"},"nodeType":"YulFunctionCall","src":"3151:32:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3144:6:15"},"nodeType":"YulFunctionCall","src":"3144:40:15"},"nodeType":"YulIf","src":"3141:60:15"},{"nodeType":"YulAssignment","src":"3210:15:15","value":{"name":"value","nodeType":"YulIdentifier","src":"3220:5:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3210:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2926:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2937:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2949:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2957:6:15","type":""}],"src":"2884:347:15"},{"body":{"nodeType":"YulBlock","src":"3268:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3285:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3297:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3288:3:15"},"nodeType":"YulFunctionCall","src":"3288:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3278:6:15"},"nodeType":"YulFunctionCall","src":"3278:31:15"},"nodeType":"YulExpressionStatement","src":"3278:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3325:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3328:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3318:6:15"},"nodeType":"YulFunctionCall","src":"3318:15:15"},"nodeType":"YulExpressionStatement","src":"3318:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3349:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3352:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3342:6:15"},"nodeType":"YulFunctionCall","src":"3342:15:15"},"nodeType":"YulExpressionStatement","src":"3342:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3236:127:15"},{"body":{"nodeType":"YulBlock","src":"3498:1008:15","statements":[{"body":{"nodeType":"YulBlock","src":"3545:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3554:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3557:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3547:6:15"},"nodeType":"YulFunctionCall","src":"3547:12:15"},"nodeType":"YulExpressionStatement","src":"3547:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3519:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"3528:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3515:3:15"},"nodeType":"YulFunctionCall","src":"3515:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3540:3:15","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3511:3:15"},"nodeType":"YulFunctionCall","src":"3511:33:15"},"nodeType":"YulIf","src":"3508:53:15"},{"nodeType":"YulAssignment","src":"3570:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3599:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3580:18:15"},"nodeType":"YulFunctionCall","src":"3580:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3570:6:15"}]},{"nodeType":"YulAssignment","src":"3618:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3651:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3662:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3647:3:15"},"nodeType":"YulFunctionCall","src":"3647:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3628:18:15"},"nodeType":"YulFunctionCall","src":"3628:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3618:6:15"}]},{"nodeType":"YulAssignment","src":"3675:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3702:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3713:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3698:3:15"},"nodeType":"YulFunctionCall","src":"3698:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3685:12:15"},"nodeType":"YulFunctionCall","src":"3685:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3675:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"3726:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3757:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3768:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3753:3:15"},"nodeType":"YulFunctionCall","src":"3753:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3740:12:15"},"nodeType":"YulFunctionCall","src":"3740:32:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3730:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3781:28:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3791:18:15","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3785:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3836:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3845:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3848:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3838:6:15"},"nodeType":"YulFunctionCall","src":"3838:12:15"},"nodeType":"YulExpressionStatement","src":"3838:12:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3824:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"3832:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3821:2:15"},"nodeType":"YulFunctionCall","src":"3821:14:15"},"nodeType":"YulIf","src":"3818:34:15"},{"nodeType":"YulVariableDeclaration","src":"3861:32:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3875:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3886:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3871:3:15"},"nodeType":"YulFunctionCall","src":"3871:22:15"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3865:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3941:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3950:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3953:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3943:6:15"},"nodeType":"YulFunctionCall","src":"3943:12:15"},"nodeType":"YulExpressionStatement","src":"3943:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3920:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3916:3:15"},"nodeType":"YulFunctionCall","src":"3916:13:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3931:7:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3912:3:15"},"nodeType":"YulFunctionCall","src":"3912:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3905:6:15"},"nodeType":"YulFunctionCall","src":"3905:35:15"},"nodeType":"YulIf","src":"3902:55:15"},{"nodeType":"YulVariableDeclaration","src":"3966:26:15","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3989:2:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3976:12:15"},"nodeType":"YulFunctionCall","src":"3976:16:15"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3970:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4015:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4017:16:15"},"nodeType":"YulFunctionCall","src":"4017:18:15"},"nodeType":"YulExpressionStatement","src":"4017:18:15"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4007:2:15"},{"name":"_1","nodeType":"YulIdentifier","src":"4011:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4004:2:15"},"nodeType":"YulFunctionCall","src":"4004:10:15"},"nodeType":"YulIf","src":"4001:36:15"},{"nodeType":"YulVariableDeclaration","src":"4046:17:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4060:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4056:3:15"},"nodeType":"YulFunctionCall","src":"4056:7:15"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4050:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4072:23:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4092:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4086:5:15"},"nodeType":"YulFunctionCall","src":"4086:9:15"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4076:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4104:71:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4126:6:15"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4150:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"4154:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4146:3:15"},"nodeType":"YulFunctionCall","src":"4146:13:15"},{"name":"_4","nodeType":"YulIdentifier","src":"4161:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4142:3:15"},"nodeType":"YulFunctionCall","src":"4142:22:15"},{"kind":"number","nodeType":"YulLiteral","src":"4166:2:15","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4138:3:15"},"nodeType":"YulFunctionCall","src":"4138:31:15"},{"name":"_4","nodeType":"YulIdentifier","src":"4171:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4134:3:15"},"nodeType":"YulFunctionCall","src":"4134:40:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4122:3:15"},"nodeType":"YulFunctionCall","src":"4122:53:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4108:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4234:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4236:16:15"},"nodeType":"YulFunctionCall","src":"4236:18:15"},"nodeType":"YulExpressionStatement","src":"4236:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4193:10:15"},{"name":"_1","nodeType":"YulIdentifier","src":"4205:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4190:2:15"},"nodeType":"YulFunctionCall","src":"4190:18:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4213:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4225:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4210:2:15"},"nodeType":"YulFunctionCall","src":"4210:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4187:2:15"},"nodeType":"YulFunctionCall","src":"4187:46:15"},"nodeType":"YulIf","src":"4184:72:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4272:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4276:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4265:6:15"},"nodeType":"YulFunctionCall","src":"4265:22:15"},"nodeType":"YulExpressionStatement","src":"4265:22:15"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4303:6:15"},{"name":"_3","nodeType":"YulIdentifier","src":"4311:2:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4296:6:15"},"nodeType":"YulFunctionCall","src":"4296:18:15"},"nodeType":"YulExpressionStatement","src":"4296:18:15"},{"body":{"nodeType":"YulBlock","src":"4360:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4369:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4372:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4362:6:15"},"nodeType":"YulFunctionCall","src":"4362:12:15"},"nodeType":"YulExpressionStatement","src":"4362:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4337:2:15"},{"name":"_3","nodeType":"YulIdentifier","src":"4341:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4333:3:15"},"nodeType":"YulFunctionCall","src":"4333:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"4346:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4329:3:15"},"nodeType":"YulFunctionCall","src":"4329:20:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4351:7:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4326:2:15"},"nodeType":"YulFunctionCall","src":"4326:33:15"},"nodeType":"YulIf","src":"4323:53:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4402:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4410:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4398:3:15"},"nodeType":"YulFunctionCall","src":"4398:15:15"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4419:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4415:3:15"},"nodeType":"YulFunctionCall","src":"4415:11:15"},{"name":"_3","nodeType":"YulIdentifier","src":"4428:2:15"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4385:12:15"},"nodeType":"YulFunctionCall","src":"4385:46:15"},"nodeType":"YulExpressionStatement","src":"4385:46:15"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4455:6:15"},{"name":"_3","nodeType":"YulIdentifier","src":"4463:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4451:3:15"},"nodeType":"YulFunctionCall","src":"4451:15:15"},{"kind":"number","nodeType":"YulLiteral","src":"4468:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4447:3:15"},"nodeType":"YulFunctionCall","src":"4447:24:15"},{"kind":"number","nodeType":"YulLiteral","src":"4473:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4440:6:15"},"nodeType":"YulFunctionCall","src":"4440:35:15"},"nodeType":"YulExpressionStatement","src":"4440:35:15"},{"nodeType":"YulAssignment","src":"4484:16:15","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4494:6:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4484:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3440:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3451:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3463:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3471:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3479:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3487:6:15","type":""}],"src":"3368:1138:15"},{"body":{"nodeType":"YulBlock","src":"4598:173:15","statements":[{"body":{"nodeType":"YulBlock","src":"4644:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4653:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4656:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4646:6:15"},"nodeType":"YulFunctionCall","src":"4646:12:15"},"nodeType":"YulExpressionStatement","src":"4646:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4619:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4628:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4615:3:15"},"nodeType":"YulFunctionCall","src":"4615:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4640:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4611:3:15"},"nodeType":"YulFunctionCall","src":"4611:32:15"},"nodeType":"YulIf","src":"4608:52:15"},{"nodeType":"YulAssignment","src":"4669:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4698:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4679:18:15"},"nodeType":"YulFunctionCall","src":"4679:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4669:6:15"}]},{"nodeType":"YulAssignment","src":"4717:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4750:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4761:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4746:3:15"},"nodeType":"YulFunctionCall","src":"4746:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4727:18:15"},"nodeType":"YulFunctionCall","src":"4727:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4717:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4556:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4567:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4579:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4587:6:15","type":""}],"src":"4511:260:15"},{"body":{"nodeType":"YulBlock","src":"4831:325:15","statements":[{"nodeType":"YulAssignment","src":"4841:22:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4855:1:15","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4858:4:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4851:3:15"},"nodeType":"YulFunctionCall","src":"4851:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4841:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"4872:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4902:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"4908:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4898:3:15"},"nodeType":"YulFunctionCall","src":"4898:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4876:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4949:31:15","statements":[{"nodeType":"YulAssignment","src":"4951:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4965:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4973:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4961:3:15"},"nodeType":"YulFunctionCall","src":"4961:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4951:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4929:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4922:6:15"},"nodeType":"YulFunctionCall","src":"4922:26:15"},"nodeType":"YulIf","src":"4919:61:15"},{"body":{"nodeType":"YulBlock","src":"5039:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5060:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5067:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5072:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5063:3:15"},"nodeType":"YulFunctionCall","src":"5063:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5053:6:15"},"nodeType":"YulFunctionCall","src":"5053:31:15"},"nodeType":"YulExpressionStatement","src":"5053:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5104:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5107:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5097:6:15"},"nodeType":"YulFunctionCall","src":"5097:15:15"},"nodeType":"YulExpressionStatement","src":"5097:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5132:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5135:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5125:6:15"},"nodeType":"YulFunctionCall","src":"5125:15:15"},"nodeType":"YulExpressionStatement","src":"5125:15:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4995:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5018:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"5026:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5015:2:15"},"nodeType":"YulFunctionCall","src":"5015:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4992:2:15"},"nodeType":"YulFunctionCall","src":"4992:38:15"},"nodeType":"YulIf","src":"4989:161:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4811:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4820:6:15","type":""}],"src":"4776:380:15"},{"body":{"nodeType":"YulBlock","src":"5335:223:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5352:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5363:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5345:6:15"},"nodeType":"YulFunctionCall","src":"5345:21:15"},"nodeType":"YulExpressionStatement","src":"5345:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5386:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5397:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5382:3:15"},"nodeType":"YulFunctionCall","src":"5382:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"5402:2:15","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5375:6:15"},"nodeType":"YulFunctionCall","src":"5375:30:15"},"nodeType":"YulExpressionStatement","src":"5375:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5425:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5436:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5421:3:15"},"nodeType":"YulFunctionCall","src":"5421:18:15"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5441:34:15","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5414:6:15"},"nodeType":"YulFunctionCall","src":"5414:62:15"},"nodeType":"YulExpressionStatement","src":"5414:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5496:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5507:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5492:3:15"},"nodeType":"YulFunctionCall","src":"5492:18:15"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5512:3:15","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5485:6:15"},"nodeType":"YulFunctionCall","src":"5485:31:15"},"nodeType":"YulExpressionStatement","src":"5485:31:15"},{"nodeType":"YulAssignment","src":"5525:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5537:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5548:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5533:3:15"},"nodeType":"YulFunctionCall","src":"5533:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5525:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5312:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5326:4:15","type":""}],"src":"5161:397:15"},{"body":{"nodeType":"YulBlock","src":"5737:251:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5754:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5765:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5747:6:15"},"nodeType":"YulFunctionCall","src":"5747:21:15"},"nodeType":"YulExpressionStatement","src":"5747:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5788:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5799:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5784:3:15"},"nodeType":"YulFunctionCall","src":"5784:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"5804:2:15","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5777:6:15"},"nodeType":"YulFunctionCall","src":"5777:30:15"},"nodeType":"YulExpressionStatement","src":"5777:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5827:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5838:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5823:3:15"},"nodeType":"YulFunctionCall","src":"5823:18:15"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"5843:34:15","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5816:6:15"},"nodeType":"YulFunctionCall","src":"5816:62:15"},"nodeType":"YulExpressionStatement","src":"5816:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5898:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5909:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5894:3:15"},"nodeType":"YulFunctionCall","src":"5894:18:15"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"5914:31:15","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5887:6:15"},"nodeType":"YulFunctionCall","src":"5887:59:15"},"nodeType":"YulExpressionStatement","src":"5887:59:15"},{"nodeType":"YulAssignment","src":"5955:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5967:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5978:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5963:3:15"},"nodeType":"YulFunctionCall","src":"5963:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5955:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5714:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5728:4:15","type":""}],"src":"5563:425:15"},{"body":{"nodeType":"YulBlock","src":"6167:235:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6184:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6195:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6177:6:15"},"nodeType":"YulFunctionCall","src":"6177:21:15"},"nodeType":"YulExpressionStatement","src":"6177:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6218:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6229:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6214:3:15"},"nodeType":"YulFunctionCall","src":"6214:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"6234:2:15","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6207:6:15"},"nodeType":"YulFunctionCall","src":"6207:30:15"},"nodeType":"YulExpressionStatement","src":"6207:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6257:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6268:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6253:3:15"},"nodeType":"YulFunctionCall","src":"6253:18:15"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"6273:34:15","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6246:6:15"},"nodeType":"YulFunctionCall","src":"6246:62:15"},"nodeType":"YulExpressionStatement","src":"6246:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6328:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6339:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6324:3:15"},"nodeType":"YulFunctionCall","src":"6324:18:15"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6344:15:15","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6317:6:15"},"nodeType":"YulFunctionCall","src":"6317:43:15"},"nodeType":"YulExpressionStatement","src":"6317:43:15"},{"nodeType":"YulAssignment","src":"6369:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6381:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6392:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6377:3:15"},"nodeType":"YulFunctionCall","src":"6377:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6369:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6144:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6158:4:15","type":""}],"src":"5993:409:15"},{"body":{"nodeType":"YulBlock","src":"6581:174:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6598:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6609:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6591:6:15"},"nodeType":"YulFunctionCall","src":"6591:21:15"},"nodeType":"YulExpressionStatement","src":"6591:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6632:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6643:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6628:3:15"},"nodeType":"YulFunctionCall","src":"6628:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"6648:2:15","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6621:6:15"},"nodeType":"YulFunctionCall","src":"6621:30:15"},"nodeType":"YulExpressionStatement","src":"6621:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6671:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6682:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6667:3:15"},"nodeType":"YulFunctionCall","src":"6667:18:15"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"6687:26:15","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6660:6:15"},"nodeType":"YulFunctionCall","src":"6660:54:15"},"nodeType":"YulExpressionStatement","src":"6660:54:15"},{"nodeType":"YulAssignment","src":"6723:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6735:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6746:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6731:3:15"},"nodeType":"YulFunctionCall","src":"6731:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6723:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6558:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6572:4:15","type":""}],"src":"6407:348:15"},{"body":{"nodeType":"YulBlock","src":"6934:231:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6951:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6962:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6944:6:15"},"nodeType":"YulFunctionCall","src":"6944:21:15"},"nodeType":"YulExpressionStatement","src":"6944:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6985:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6996:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6981:3:15"},"nodeType":"YulFunctionCall","src":"6981:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"7001:2:15","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6974:6:15"},"nodeType":"YulFunctionCall","src":"6974:30:15"},"nodeType":"YulExpressionStatement","src":"6974:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7024:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7035:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7020:3:15"},"nodeType":"YulFunctionCall","src":"7020:18:15"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"7040:34:15","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7013:6:15"},"nodeType":"YulFunctionCall","src":"7013:62:15"},"nodeType":"YulExpressionStatement","src":"7013:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7095:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7106:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7091:3:15"},"nodeType":"YulFunctionCall","src":"7091:18:15"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7111:11:15","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7084:6:15"},"nodeType":"YulFunctionCall","src":"7084:39:15"},"nodeType":"YulExpressionStatement","src":"7084:39:15"},{"nodeType":"YulAssignment","src":"7132:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7144:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7155:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7140:3:15"},"nodeType":"YulFunctionCall","src":"7140:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7132:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6911:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6925:4:15","type":""}],"src":"6760:405:15"},{"body":{"nodeType":"YulBlock","src":"7357:309:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7367:27:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7387:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7381:5:15"},"nodeType":"YulFunctionCall","src":"7381:13:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7371:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7442:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"7450:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7438:3:15"},"nodeType":"YulFunctionCall","src":"7438:17:15"},{"name":"pos","nodeType":"YulIdentifier","src":"7457:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"7462:6:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7403:34:15"},"nodeType":"YulFunctionCall","src":"7403:66:15"},"nodeType":"YulExpressionStatement","src":"7403:66:15"},{"nodeType":"YulVariableDeclaration","src":"7478:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7495:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"7500:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7491:3:15"},"nodeType":"YulFunctionCall","src":"7491:16:15"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"7482:5:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7516:29:15","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7538:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7532:5:15"},"nodeType":"YulFunctionCall","src":"7532:13:15"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"7520:8:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7593:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"7601:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7589:3:15"},"nodeType":"YulFunctionCall","src":"7589:17:15"},{"name":"end_1","nodeType":"YulIdentifier","src":"7608:5:15"},{"name":"length_1","nodeType":"YulIdentifier","src":"7615:8:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7554:34:15"},"nodeType":"YulFunctionCall","src":"7554:70:15"},"nodeType":"YulExpressionStatement","src":"7554:70:15"},{"nodeType":"YulAssignment","src":"7633:27:15","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"7644:5:15"},{"name":"length_1","nodeType":"YulIdentifier","src":"7651:8:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7640:3:15"},"nodeType":"YulFunctionCall","src":"7640:20:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7633:3:15"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7325:3:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7330:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7338:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7349:3:15","type":""}],"src":"7170:496:15"},{"body":{"nodeType":"YulBlock","src":"7845:227:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7862:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7873:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7855:6:15"},"nodeType":"YulFunctionCall","src":"7855:21:15"},"nodeType":"YulExpressionStatement","src":"7855:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7896:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7907:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7892:3:15"},"nodeType":"YulFunctionCall","src":"7892:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"7912:2:15","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7885:6:15"},"nodeType":"YulFunctionCall","src":"7885:30:15"},"nodeType":"YulExpressionStatement","src":"7885:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7935:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7946:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7931:3:15"},"nodeType":"YulFunctionCall","src":"7931:18:15"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"7951:34:15","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7924:6:15"},"nodeType":"YulFunctionCall","src":"7924:62:15"},"nodeType":"YulExpressionStatement","src":"7924:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8006:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8017:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8002:3:15"},"nodeType":"YulFunctionCall","src":"8002:18:15"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"8022:7:15","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7995:6:15"},"nodeType":"YulFunctionCall","src":"7995:35:15"},"nodeType":"YulExpressionStatement","src":"7995:35:15"},{"nodeType":"YulAssignment","src":"8039:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8051:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8062:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8047:3:15"},"nodeType":"YulFunctionCall","src":"8047:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8039:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7822:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7836:4:15","type":""}],"src":"7671:401:15"},{"body":{"nodeType":"YulBlock","src":"8251:226:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8268:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8279:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8261:6:15"},"nodeType":"YulFunctionCall","src":"8261:21:15"},"nodeType":"YulExpressionStatement","src":"8261:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8302:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8313:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8298:3:15"},"nodeType":"YulFunctionCall","src":"8298:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"8318:2:15","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8291:6:15"},"nodeType":"YulFunctionCall","src":"8291:30:15"},"nodeType":"YulExpressionStatement","src":"8291:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8341:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8352:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8337:3:15"},"nodeType":"YulFunctionCall","src":"8337:18:15"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"8357:34:15","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8330:6:15"},"nodeType":"YulFunctionCall","src":"8330:62:15"},"nodeType":"YulExpressionStatement","src":"8330:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8412:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8423:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8408:3:15"},"nodeType":"YulFunctionCall","src":"8408:18:15"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"8428:6:15","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8401:6:15"},"nodeType":"YulFunctionCall","src":"8401:34:15"},"nodeType":"YulExpressionStatement","src":"8401:34:15"},{"nodeType":"YulAssignment","src":"8444:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8456:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8467:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8452:3:15"},"nodeType":"YulFunctionCall","src":"8452:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8444:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8228:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8242:4:15","type":""}],"src":"8077:400:15"},{"body":{"nodeType":"YulBlock","src":"8656:175:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8673:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8684:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8666:6:15"},"nodeType":"YulFunctionCall","src":"8666:21:15"},"nodeType":"YulExpressionStatement","src":"8666:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8707:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8718:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8703:3:15"},"nodeType":"YulFunctionCall","src":"8703:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"8723:2:15","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8696:6:15"},"nodeType":"YulFunctionCall","src":"8696:30:15"},"nodeType":"YulExpressionStatement","src":"8696:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8746:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8757:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8742:3:15"},"nodeType":"YulFunctionCall","src":"8742:18:15"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"8762:27:15","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8735:6:15"},"nodeType":"YulFunctionCall","src":"8735:55:15"},"nodeType":"YulExpressionStatement","src":"8735:55:15"},{"nodeType":"YulAssignment","src":"8799:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8811:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8822:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8807:3:15"},"nodeType":"YulFunctionCall","src":"8807:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8799:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8633:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8647:4:15","type":""}],"src":"8482:349:15"},{"body":{"nodeType":"YulBlock","src":"9010:240:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9027:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9038:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9020:6:15"},"nodeType":"YulFunctionCall","src":"9020:21:15"},"nodeType":"YulExpressionStatement","src":"9020:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9061:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9072:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9057:3:15"},"nodeType":"YulFunctionCall","src":"9057:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"9077:2:15","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9050:6:15"},"nodeType":"YulFunctionCall","src":"9050:30:15"},"nodeType":"YulExpressionStatement","src":"9050:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9100:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9111:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9096:3:15"},"nodeType":"YulFunctionCall","src":"9096:18:15"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"9116:34:15","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9089:6:15"},"nodeType":"YulFunctionCall","src":"9089:62:15"},"nodeType":"YulExpressionStatement","src":"9089:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9171:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9182:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9167:3:15"},"nodeType":"YulFunctionCall","src":"9167:18:15"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"9187:20:15","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9160:6:15"},"nodeType":"YulFunctionCall","src":"9160:48:15"},"nodeType":"YulExpressionStatement","src":"9160:48:15"},{"nodeType":"YulAssignment","src":"9217:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9229:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9240:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9225:3:15"},"nodeType":"YulFunctionCall","src":"9225:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9217:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8987:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9001:4:15","type":""}],"src":"8836:414:15"},{"body":{"nodeType":"YulBlock","src":"9287:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9304:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9311:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9316:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9307:3:15"},"nodeType":"YulFunctionCall","src":"9307:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9297:6:15"},"nodeType":"YulFunctionCall","src":"9297:31:15"},"nodeType":"YulExpressionStatement","src":"9297:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9344:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9347:4:15","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9337:6:15"},"nodeType":"YulFunctionCall","src":"9337:15:15"},"nodeType":"YulExpressionStatement","src":"9337:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9368:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9371:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9361:6:15"},"nodeType":"YulFunctionCall","src":"9361:15:15"},"nodeType":"YulExpressionStatement","src":"9361:15:15"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"9255:127:15"},{"body":{"nodeType":"YulBlock","src":"9419:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9436:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9443:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9448:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9439:3:15"},"nodeType":"YulFunctionCall","src":"9439:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9429:6:15"},"nodeType":"YulFunctionCall","src":"9429:31:15"},"nodeType":"YulExpressionStatement","src":"9429:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9476:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9479:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9469:6:15"},"nodeType":"YulFunctionCall","src":"9469:15:15"},"nodeType":"YulExpressionStatement","src":"9469:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9500:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9503:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9493:6:15"},"nodeType":"YulFunctionCall","src":"9493:15:15"},"nodeType":"YulExpressionStatement","src":"9493:15:15"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9387:127:15"},{"body":{"nodeType":"YulBlock","src":"9568:79:15","statements":[{"nodeType":"YulAssignment","src":"9578:17:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9590:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"9593:1:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9586:3:15"},"nodeType":"YulFunctionCall","src":"9586:9:15"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"9578:4:15"}]},{"body":{"nodeType":"YulBlock","src":"9619:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9621:16:15"},"nodeType":"YulFunctionCall","src":"9621:18:15"},"nodeType":"YulExpressionStatement","src":"9621:18:15"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"9610:4:15"},{"name":"x","nodeType":"YulIdentifier","src":"9616:1:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9607:2:15"},"nodeType":"YulFunctionCall","src":"9607:11:15"},"nodeType":"YulIf","src":"9604:37:15"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9550:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"9553:1:15","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"9559:4:15","type":""}],"src":"9519:128:15"},{"body":{"nodeType":"YulBlock","src":"9700:77:15","statements":[{"nodeType":"YulAssignment","src":"9710:16:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9721:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"9724:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9717:3:15"},"nodeType":"YulFunctionCall","src":"9717:9:15"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9710:3:15"}]},{"body":{"nodeType":"YulBlock","src":"9749:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9751:16:15"},"nodeType":"YulFunctionCall","src":"9751:18:15"},"nodeType":"YulExpressionStatement","src":"9751:18:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9741:1:15"},{"name":"sum","nodeType":"YulIdentifier","src":"9744:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9738:2:15"},"nodeType":"YulFunctionCall","src":"9738:10:15"},"nodeType":"YulIf","src":"9735:36:15"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9683:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"9686:1:15","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9692:3:15","type":""}],"src":"9652:125:15"},{"body":{"nodeType":"YulBlock","src":"9985:286:15","statements":[{"nodeType":"YulVariableDeclaration","src":"9995:29:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10013:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"10018:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10009:3:15"},"nodeType":"YulFunctionCall","src":"10009:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"10022:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10005:3:15"},"nodeType":"YulFunctionCall","src":"10005:19:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9999:2:15","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10040:9:15"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10055:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"10063:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10051:3:15"},"nodeType":"YulFunctionCall","src":"10051:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10033:6:15"},"nodeType":"YulFunctionCall","src":"10033:34:15"},"nodeType":"YulExpressionStatement","src":"10033:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10087:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10098:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10083:3:15"},"nodeType":"YulFunctionCall","src":"10083:18:15"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10107:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"10115:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10103:3:15"},"nodeType":"YulFunctionCall","src":"10103:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10076:6:15"},"nodeType":"YulFunctionCall","src":"10076:43:15"},"nodeType":"YulExpressionStatement","src":"10076:43:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10139:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10150:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10135:3:15"},"nodeType":"YulFunctionCall","src":"10135:18:15"},{"name":"value2","nodeType":"YulIdentifier","src":"10155:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10128:6:15"},"nodeType":"YulFunctionCall","src":"10128:34:15"},"nodeType":"YulExpressionStatement","src":"10128:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10182:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10193:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10178:3:15"},"nodeType":"YulFunctionCall","src":"10178:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"10198:3:15","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10171:6:15"},"nodeType":"YulFunctionCall","src":"10171:31:15"},"nodeType":"YulExpressionStatement","src":"10171:31:15"},{"nodeType":"YulAssignment","src":"10211:54:15","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"10237:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10249:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10260:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10245:3:15"},"nodeType":"YulFunctionCall","src":"10245:19:15"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"10219:17:15"},"nodeType":"YulFunctionCall","src":"10219:46:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10211:4:15"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9930:9:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9941:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9949:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9957:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9965:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9976:4:15","type":""}],"src":"9782:489:15"},{"body":{"nodeType":"YulBlock","src":"10356:169:15","statements":[{"body":{"nodeType":"YulBlock","src":"10402:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10411:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10414:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10404:6:15"},"nodeType":"YulFunctionCall","src":"10404:12:15"},"nodeType":"YulExpressionStatement","src":"10404:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10377:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"10386:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10373:3:15"},"nodeType":"YulFunctionCall","src":"10373:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"10398:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10369:3:15"},"nodeType":"YulFunctionCall","src":"10369:32:15"},"nodeType":"YulIf","src":"10366:52:15"},{"nodeType":"YulVariableDeclaration","src":"10427:29:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10446:9:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10440:5:15"},"nodeType":"YulFunctionCall","src":"10440:16:15"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10431:5:15","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10489:5:15"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"10465:23:15"},"nodeType":"YulFunctionCall","src":"10465:30:15"},"nodeType":"YulExpressionStatement","src":"10465:30:15"},{"nodeType":"YulAssignment","src":"10504:15:15","value":{"name":"value","nodeType":"YulIdentifier","src":"10514:5:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10504:6:15"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10322:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10333:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10345:6:15","type":""}],"src":"10276:249:15"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101b3578063b88d4fde146101c6578063c87b56dd146101d9578063e985e9c5146101ec57600080fd5b80636352211e1461017757806370a082311461018a57806395d89b41146101ab57600080fd5b806301ffc9a7146100d457806306fdde03146100fc578063081812fc14610111578063095ea7b31461013c57806323b872dd1461015157806342842e0e14610164575b600080fd5b6100e76100e2366004610cf9565b6101ff565b60405190151581526020015b60405180910390f35b610104610251565b6040516100f39190610d66565b61012461011f366004610d79565b6102e3565b6040516001600160a01b0390911681526020016100f3565b61014f61014a366004610dae565b61030a565b005b61014f61015f366004610dd8565b610424565b61014f610172366004610dd8565b610455565b610124610185366004610d79565b610470565b61019d610198366004610e14565b6104d0565b6040519081526020016100f3565b610104610556565b61014f6101c1366004610e2f565b610565565b61014f6101d4366004610e81565b610574565b6101046101e7366004610d79565b6105ac565b6100e76101fa366004610f5d565b610620565b60006001600160e01b031982166380ac58cd60e01b148061023057506001600160e01b03198216635b5e139f60e01b145b8061024b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461026090610f90565b80601f016020809104026020016040519081016040528092919081815260200182805461028c90610f90565b80156102d95780601f106102ae576101008083540402835291602001916102d9565b820191906000526020600020905b8154815290600101906020018083116102bc57829003601f168201915b5050505050905090565b60006102ee8261064e565b506000908152600460205260409020546001600160a01b031690565b600061031582610470565b9050806001600160a01b0316836001600160a01b0316036103875760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806103a357506103a38133610620565b6104155760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161037e565b61041f83836106b0565b505050565b61042e338261071e565b61044a5760405162461bcd60e51b815260040161037e90610fca565b61041f83838361077d565b61041f83838360405180602001604052806000815250610574565b6000818152600260205260408120546001600160a01b03168061024b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161037e565b60006001600160a01b03821661053a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161037e565b506001600160a01b031660009081526003602052604090205490565b60606001805461026090610f90565b6105703383836108ee565b5050565b61057e338361071e565b61059a5760405162461bcd60e51b815260040161037e90610fca565b6105a6848484846109bc565b50505050565b60606105b78261064e565b60006105ce60408051602081019091526000815290565b905060008151116105ee5760405180602001604052806000815250610619565b806105f8846109ef565b604051602001610609929190611017565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260409020546001600160a01b03166106ad5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161037e565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906106e582610470565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061072a83610470565b9050806001600160a01b0316846001600160a01b0316148061075157506107518185610620565b806107755750836001600160a01b031661076a846102e3565b6001600160a01b0316145b949350505050565b826001600160a01b031661079082610470565b6001600160a01b0316146107b65760405162461bcd60e51b815260040161037e90611046565b6001600160a01b0382166108185760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161037e565b6108258383836001610a82565b826001600160a01b031661083882610470565b6001600160a01b03161461085e5760405162461bcd60e51b815260040161037e90611046565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b03160361094f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161037e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6109c784848461077d565b6109d384848484610b0a565b6105a65760405162461bcd60e51b815260040161037e9061108b565b606060006109fc83610c0b565b600101905060008167ffffffffffffffff811115610a1c57610a1c610e6b565b6040519080825280601f01601f191660200182016040528015610a46576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610a5057509392505050565b60018111156105a6576001600160a01b03841615610ac8576001600160a01b03841660009081526003602052604081208054839290610ac29084906110f3565b90915550505b6001600160a01b038316156105a6576001600160a01b03831660009081526003602052604081208054839290610aff908490611106565b909155505050505050565b60006001600160a01b0384163b15610c0057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610b4e903390899088908890600401611119565b6020604051808303816000875af1925050508015610b89575060408051601f3d908101601f19168201909252610b8691810190611156565b60015b610be6573d808015610bb7576040519150601f19603f3d011682016040523d82523d6000602084013e610bbc565b606091505b508051600003610bde5760405162461bcd60e51b815260040161037e9061108b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610775565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610c4a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610c76576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610c9457662386f26fc10000830492506010015b6305f5e1008310610cac576305f5e100830492506008015b6127108310610cc057612710830492506004015b60648310610cd2576064830492506002015b600a831061024b5760010192915050565b6001600160e01b0319811681146106ad57600080fd5b600060208284031215610d0b57600080fd5b813561061981610ce3565b60005b83811015610d31578181015183820152602001610d19565b50506000910152565b60008151808452610d52816020860160208601610d16565b601f01601f19169290920160200192915050565b6020815260006106196020830184610d3a565b600060208284031215610d8b57600080fd5b5035919050565b80356001600160a01b0381168114610da957600080fd5b919050565b60008060408385031215610dc157600080fd5b610dca83610d92565b946020939093013593505050565b600080600060608486031215610ded57600080fd5b610df684610d92565b9250610e0460208501610d92565b9150604084013590509250925092565b600060208284031215610e2657600080fd5b61061982610d92565b60008060408385031215610e4257600080fd5b610e4b83610d92565b915060208301358015158114610e6057600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610e9757600080fd5b610ea085610d92565b9350610eae60208601610d92565b925060408501359150606085013567ffffffffffffffff80821115610ed257600080fd5b818701915087601f830112610ee657600080fd5b813581811115610ef857610ef8610e6b565b604051601f8201601f19908116603f01168101908382118183101715610f2057610f20610e6b565b816040528281528a6020848701011115610f3957600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610f7057600080fd5b610f7983610d92565b9150610f8760208401610d92565b90509250929050565b600181811c90821680610fa457607f821691505b602082108103610fc457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008351611029818460208801610d16565b83519083019061103d818360208801610d16565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561024b5761024b6110dd565b8082018082111561024b5761024b6110dd565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061114c90830184610d3a565b9695505050505050565b60006020828403121561116857600080fd5b815161061981610ce356fea264697066735822122076798ea5dce3ba3332deb88b40f29d76e3bb0cc46da707fa13237b97296df83e64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x164 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0xCF9 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x251 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xD66 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0xD79 JUMP JUMPDEST PUSH2 0x2E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xDAE JUMP JUMPDEST PUSH2 0x30A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xDD8 JUMP JUMPDEST PUSH2 0x424 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xDD8 JUMP JUMPDEST PUSH2 0x455 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xD79 JUMP JUMPDEST PUSH2 0x470 JUMP JUMPDEST PUSH2 0x19D PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0xE14 JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x556 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xE2F JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE81 JUMP JUMPDEST PUSH2 0x574 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD79 JUMP JUMPDEST PUSH2 0x5AC JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xF5D JUMP JUMPDEST PUSH2 0x620 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x230 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x24B JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x260 SWAP1 PUSH2 0xF90 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x28C SWAP1 PUSH2 0xF90 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2D9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2AE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2D9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2BC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EE DUP3 PUSH2 0x64E JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x315 DUP3 PUSH2 0x470 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x387 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x3A3 JUMPI POP PUSH2 0x3A3 DUP2 CALLER PUSH2 0x620 JUMP JUMPDEST PUSH2 0x415 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x37E JUMP JUMPDEST PUSH2 0x41F DUP4 DUP4 PUSH2 0x6B0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x42E CALLER DUP3 PUSH2 0x71E JUMP JUMPDEST PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0xFCA JUMP JUMPDEST PUSH2 0x41F DUP4 DUP4 DUP4 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x41F DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x574 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x24B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x37E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x53A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x37E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x260 SWAP1 PUSH2 0xF90 JUMP JUMPDEST PUSH2 0x570 CALLER DUP4 DUP4 PUSH2 0x8EE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x57E CALLER DUP4 PUSH2 0x71E JUMP JUMPDEST PUSH2 0x59A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0xFCA JUMP JUMPDEST PUSH2 0x5A6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x9BC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5B7 DUP3 PUSH2 0x64E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CE PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x5EE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x619 JUMP JUMPDEST DUP1 PUSH2 0x5F8 DUP5 PUSH2 0x9EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x609 SWAP3 SWAP2 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x37E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x6E5 DUP3 PUSH2 0x470 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x72A DUP4 PUSH2 0x470 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x751 JUMPI POP PUSH2 0x751 DUP2 DUP6 PUSH2 0x620 JUMP JUMPDEST DUP1 PUSH2 0x775 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x76A DUP5 PUSH2 0x2E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x790 DUP3 PUSH2 0x470 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x818 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x37E JUMP JUMPDEST PUSH2 0x825 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xA82 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x838 DUP3 PUSH2 0x470 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x85E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0x1046 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x94F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x37E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x9C7 DUP5 DUP5 DUP5 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x9D3 DUP5 DUP5 DUP5 DUP5 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0x108B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x9FC DUP4 PUSH2 0xC0B JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA1C JUMPI PUSH2 0xA1C PUSH2 0xE6B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA46 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xA50 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xAC8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xAC2 SWAP1 DUP5 SWAP1 PUSH2 0x10F3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xAFF SWAP1 DUP5 SWAP1 PUSH2 0x1106 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xC00 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xB4E SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1119 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB89 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB86 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1156 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xBE6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xBB7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xBBC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xBDE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37E SWAP1 PUSH2 0x108B JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x775 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xC4A JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xC76 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xC94 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xCAC JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xCC0 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xCD2 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x24B JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x619 DUP2 PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD31 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD19 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xD52 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xD16 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x619 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD3A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDCA DUP4 PUSH2 0xD92 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDF6 DUP5 PUSH2 0xD92 JUMP JUMPDEST SWAP3 POP PUSH2 0xE04 PUSH1 0x20 DUP6 ADD PUSH2 0xD92 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x619 DUP3 PUSH2 0xD92 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE4B DUP4 PUSH2 0xD92 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEA0 DUP6 PUSH2 0xD92 JUMP JUMPDEST SWAP4 POP PUSH2 0xEAE PUSH1 0x20 DUP7 ADD PUSH2 0xD92 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xED2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xEF8 JUMPI PUSH2 0xEF8 PUSH2 0xE6B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xF20 JUMPI PUSH2 0xF20 PUSH2 0xE6B JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xF39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF79 DUP4 PUSH2 0xD92 JUMP JUMPDEST SWAP2 POP PUSH2 0xF87 PUSH1 0x20 DUP5 ADD PUSH2 0xD92 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xFA4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xFC4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1029 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xD16 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x103D DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xD16 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x24B JUMPI PUSH2 0x24B PUSH2 0x10DD JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x24B JUMPI PUSH2 0x24B PUSH2 0x10DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x114C SWAP1 DUP4 ADD DUP5 PUSH2 0xD3A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x619 DUP2 PUSH2 0xCE3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x798EA5DCE3BA3332DEB88B40F29D76E3BB0CC46DA707FA SGT 0x23 PUSH28 0x97296DF83E64736F6C63430008110033000000000000000000000000 ","sourceMap":"628:16327:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;:::i;:::-;;:::i;:::-;;;565:14:15;;558:22;540:41;;528:2;513:18;1570:300:2;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:15;;;1679:51;;1667:2;1652:18;3935:167:2;1533:203:15;3468:406:2;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;:::i;:::-;;:::i;5004:179::-;;;;;;:::i;:::-;;:::i;2190:219::-;;;;;;:::i;:::-;;:::i;1929:204::-;;;;;;:::i;:::-;;:::i;:::-;;;2848:25:15;;;2836:2;2821:18;1929:204:2;2702:177:15;2633:102:2;;;:::i;4169:153::-;;;;;;:::i;:::-;;:::i;5249:314::-;;;;;;:::i;:::-;;:::i;2801:276::-;;;;;;:::i;:::-;;:::i;4388:162::-;;;;;;:::i;:::-;;:::i;1570:300::-;1672:4;-1:-1:-1;;;;;;1707:40:2;;-1:-1:-1;;;1707:40:2;;:104;;-1:-1:-1;;;;;;;1763:48:2;;-1:-1:-1;;;1763:48:2;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:11;;;1827:36:2;1688:175;1570:300;-1:-1:-1;;1570:300:2:o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:2;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:2;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:2;:2;-1:-1:-1;;;;;3605:11:2;;3597:57;;;;-1:-1:-1;;;3597:57:2;;5363:2:15;3597:57:2;;;5345:21:15;5402:2;5382:18;;;5375:30;5441:34;5421:18;;;5414:62;-1:-1:-1;;;5492:18:15;;;5485:31;5533:19;;3597:57:2;;;;;;;;;719:10:8;-1:-1:-1;;;;;3686:21:2;;;;:62;;-1:-1:-1;3711:37:2;3728:5;719:10:8;4388:162:2;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:2;;5765:2:15;3665:170:2;;;5747:21:15;5804:2;5784:18;;;5777:30;5843:34;5823:18;;;5816:62;5914:31;5894:18;;;5887:59;5963:19;;3665:170:2;5563:425:15;3665:170:2;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;719:10:8;4834:7:2;4801:18;:41::i;:::-;4793:99;;;;-1:-1:-1;;;4793:99:2;;;;;;;:::i;:::-;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;2190:219::-;2262:7;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;;2324:56;;;;-1:-1:-1;;;2324:56:2;;6609:2:15;2324:56:2;;;6591:21:15;6648:2;6628:18;;;6621:30;-1:-1:-1;;;6667:18:15;;;6660:54;6731:18;;2324:56:2;6407:348:15;1929:204:2;2001:7;-1:-1:-1;;;;;2028:19:2;;2020:73;;;;-1:-1:-1;;;2020:73:2;;6962:2:15;2020:73:2;;;6944:21:15;7001:2;6981:18;;;6974:30;7040:34;7020:18;;;7013:62;-1:-1:-1;;;7091:18:15;;;7084:39;7140:19;;2020:73:2;6760:405:15;2020:73:2;-1:-1:-1;;;;;;2110:16:2;;;;;:9;:16;;;;;;;1929:204::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;4169:153::-;4263:52;719:10:8;4296:8:2;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;719:10:8;5450:7:2;5417:18;:41::i;:::-;5409:99;;;;-1:-1:-1;;;5409:99:2;;;;;;;:::i;:::-;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;3395:9;;;;;;;;;-1:-1:-1;3395:9:2;;;3319:92;2957:10;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;2801:276;-1:-1:-1;;;2801:276:2:o;4388:162::-;-1:-1:-1;;;;;4508:25:2;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162::o;13466:133::-;7321:4;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;13539:53;;;;-1:-1:-1;;;13539:53:2;;6609:2:15;13539:53:2;;;6591:21:15;6648:2;6628:18;;;6621:30;-1:-1:-1;;;6667:18:15;;;6660:54;6731:18;;13539:53:2;6407:348:15;13539:53:2;13466:133;:::o;12768:171::-;12842:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;12842:29:2;-1:-1:-1;;;;;12842:29:2;;;;;;;;:24;;12895:23;12842:24;12895:14;:23::i;:::-;-1:-1:-1;;;;;12886:46:2;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;-1:-1:-1;;;;;7706:16:2;:7;-1:-1:-1;;;;;7706:16:2;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:87;;;;7786:7;-1:-1:-1;;;;;7762:31:2;:20;7774:7;7762:11;:20::i;:::-;-1:-1:-1;;;;;7762:31:2;;7706:87;7698:96;7540:261;-1:-1:-1;;;;7540:261:2:o;11423:1233::-;11577:4;-1:-1:-1;;;;;11550:31:2;:23;11565:7;11550:14;:23::i;:::-;-1:-1:-1;;;;;11550:31:2;;11542:81;;;;-1:-1:-1;;;11542:81:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;11641:16:2;;11633:65;;;;-1:-1:-1;;;11633:65:2;;8279:2:15;11633:65:2;;;8261:21:15;8318:2;8298:18;;;8291:30;8357:34;8337:18;;;8330:62;-1:-1:-1;;;8408:18:15;;;8401:34;8452:19;;11633:65:2;8077:400:15;11633:65:2;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;-1:-1:-1;;;;;11851:31:2;:23;11866:7;11851:14;:23::i;:::-;-1:-1:-1;;;;;11851:31:2;;11843:81;;;;-1:-1:-1;;;11843:81:2;;;;;;;:::i;:::-;11993:24;;;;:15;:24;;;;;;;;11986:31;;-1:-1:-1;;;;;;11986:31:2;;;;;;-1:-1:-1;;;;;12461:15:2;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;12461:20:2;;;12495:13;;;;;;;;;:18;;11986:31;12495:18;;;12533:16;;;:7;:16;;;;;;:21;;;;;;;;;;12570:27;;12009:7;;12570:27;;;3538:336;3468:406;;:::o;13075:307::-;13225:8;-1:-1:-1;;;;;13216:17:2;:5;-1:-1:-1;;;;;13216:17:2;;13208:55;;;;-1:-1:-1;;;13208:55:2;;8684:2:15;13208:55:2;;;8666:21:15;8723:2;8703:18;;;8696:30;8762:27;8742:18;;;8735:55;8807:18;;13208:55:2;8482:349:15;13208:55:2;-1:-1:-1;;;;;13273:25:2;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13273:46:2;;;;;;;;;;13334:41;;540::15;;;13334::2;;513:18:15;13334:41:2;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;-1:-1:-1;;;6612:110:2;;;;;;;:::i;415:696:10:-;471:13;520:14;537:17;548:5;537:10;:17::i;:::-;557:1;537:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;595:18:10;-1:-1:-1;572:41:10;-1:-1:-1;733:28:10;;;749:2;733:28;788:280;-1:-1:-1;;819:5:10;-1:-1:-1;;;953:2:10;942:14;;937:30;819:5;924:44;1012:2;1003:11;;;-1:-1:-1;1032:21:10;788:280;1032:21;-1:-1:-1;1088:6:10;415:696;-1:-1:-1;;;415:696:10:o;15698:396:2:-;15882:1;15870:9;:13;15866:222;;;-1:-1:-1;;;;;15903:18:2;;;15899:85;;-1:-1:-1;;;;;15941:15:2;;;;;;:9;:15;;;;;:28;;15960:9;;15941:15;:28;;15960:9;;15941:28;:::i;:::-;;;;-1:-1:-1;;15899:85:2;-1:-1:-1;;;;;16001:16:2;;;15997:81;;-1:-1:-1;;;;;16037:13:2;;;;;;:9;:13;;;;;:26;;16054:9;;16037:13;:26;;16054:9;;16037:26;:::i;:::-;;;;-1:-1:-1;;15698:396:2;;;;:::o;14151:831::-;14300:4;-1:-1:-1;;;;;14320:13:2;;1465:19:7;:23;14316:660:2;;14355:71;;-1:-1:-1;;;14355:71:2;;-1:-1:-1;;;;;14355:36:2;;;;;:71;;719:10:8;;14406:4:2;;14412:7;;14421:4;;14355:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14355:71:2;;;;;;;;-1:-1:-1;;14355:71:2;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14593:6;:13;14610:1;14593:18;14589:321;;14635:60;;-1:-1:-1;;;14635:60:2;;;;;;;:::i;14589:321::-;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;-1:-1:-1;;;;;;14476:51:2;-1:-1:-1;;;14476:51:2;;-1:-1:-1;14469:58:2;;14316:660;-1:-1:-1;14961:4:2;14151:831;;;;;;:::o;9889:890:13:-;9942:7;;-1:-1:-1;;;10017:15:13;;10013:99;;-1:-1:-1;;;10052:15:13;;;-1:-1:-1;10095:2:13;10085:12;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;-1:-1:-1;10207:2:13;10197:12;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;-1:-1:-1;10319:2:13;10309:12;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;-1:-1:-1;10429:1:13;10419:11;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;-1:-1:-1;10538:1:13;10528:11;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;-1:-1:-1;10647:1:13;10637:11;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;10766:6;9889:890;-1:-1:-1;;9889:890:13:o;14:131:15:-;-1:-1:-1;;;;;;88:32:15;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:15;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:15;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:15:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:15;;1348:180;-1:-1:-1;1348:180:15:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:15;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:15:o;2178:328::-;2255:6;2263;2271;2324:2;2312:9;2303:7;2299:23;2295:32;2292:52;;;2340:1;2337;2330:12;2292:52;2363:29;2382:9;2363:29;:::i;:::-;2353:39;;2411:38;2445:2;2434:9;2430:18;2411:38;:::i;:::-;2401:48;;2496:2;2485:9;2481:18;2468:32;2458:42;;2178:328;;;;;:::o;2511:186::-;2570:6;2623:2;2611:9;2602:7;2598:23;2594:32;2591:52;;;2639:1;2636;2629:12;2591:52;2662:29;2681:9;2662:29;:::i;2884:347::-;2949:6;2957;3010:2;2998:9;2989:7;2985:23;2981:32;2978:52;;;3026:1;3023;3016:12;2978:52;3049:29;3068:9;3049:29;:::i;:::-;3039:39;;3128:2;3117:9;3113:18;3100:32;3175:5;3168:13;3161:21;3154:5;3151:32;3141:60;;3197:1;3194;3187:12;3141:60;3220:5;3210:15;;;2884:347;;;;;:::o;3236:127::-;3297:10;3292:3;3288:20;3285:1;3278:31;3328:4;3325:1;3318:15;3352:4;3349:1;3342:15;3368:1138;3463:6;3471;3479;3487;3540:3;3528:9;3519:7;3515:23;3511:33;3508:53;;;3557:1;3554;3547:12;3508:53;3580:29;3599:9;3580:29;:::i;:::-;3570:39;;3628:38;3662:2;3651:9;3647:18;3628:38;:::i;:::-;3618:48;;3713:2;3702:9;3698:18;3685:32;3675:42;;3768:2;3757:9;3753:18;3740:32;3791:18;3832:2;3824:6;3821:14;3818:34;;;3848:1;3845;3838:12;3818:34;3886:6;3875:9;3871:22;3861:32;;3931:7;3924:4;3920:2;3916:13;3912:27;3902:55;;3953:1;3950;3943:12;3902:55;3989:2;3976:16;4011:2;4007;4004:10;4001:36;;;4017:18;;:::i;:::-;4092:2;4086:9;4060:2;4146:13;;-1:-1:-1;;4142:22:15;;;4166:2;4138:31;4134:40;4122:53;;;4190:18;;;4210:22;;;4187:46;4184:72;;;4236:18;;:::i;:::-;4276:10;4272:2;4265:22;4311:2;4303:6;4296:18;4351:7;4346:2;4341;4337;4333:11;4329:20;4326:33;4323:53;;;4372:1;4369;4362:12;4323:53;4428:2;4423;4419;4415:11;4410:2;4402:6;4398:15;4385:46;4473:1;4468:2;4463;4455:6;4451:15;4447:24;4440:35;4494:6;4484:16;;;;;;;3368:1138;;;;;;;:::o;4511:260::-;4579:6;4587;4640:2;4628:9;4619:7;4615:23;4611:32;4608:52;;;4656:1;4653;4646:12;4608:52;4679:29;4698:9;4679:29;:::i;:::-;4669:39;;4727:38;4761:2;4750:9;4746:18;4727:38;:::i;:::-;4717:48;;4511:260;;;;;:::o;4776:380::-;4855:1;4851:12;;;;4898;;;4919:61;;4973:4;4965:6;4961:17;4951:27;;4919:61;5026:2;5018:6;5015:14;4995:18;4992:38;4989:161;;5072:10;5067:3;5063:20;5060:1;5053:31;5107:4;5104:1;5097:15;5135:4;5132:1;5125:15;4989:161;;4776:380;;;:::o;5993:409::-;6195:2;6177:21;;;6234:2;6214:18;;;6207:30;6273:34;6268:2;6253:18;;6246:62;-1:-1:-1;;;6339:2:15;6324:18;;6317:43;6392:3;6377:19;;5993:409::o;7170:496::-;7349:3;7387:6;7381:13;7403:66;7462:6;7457:3;7450:4;7442:6;7438:17;7403:66;:::i;:::-;7532:13;;7491:16;;;;7554:70;7532:13;7491:16;7601:4;7589:17;;7554:70;:::i;:::-;7640:20;;7170:496;-1:-1:-1;;;;7170:496:15:o;7671:401::-;7873:2;7855:21;;;7912:2;7892:18;;;7885:30;7951:34;7946:2;7931:18;;7924:62;-1:-1:-1;;;8017:2:15;8002:18;;7995:35;8062:3;8047:19;;7671:401::o;8836:414::-;9038:2;9020:21;;;9077:2;9057:18;;;9050:30;9116:34;9111:2;9096:18;;9089:62;-1:-1:-1;;;9182:2:15;9167:18;;9160:48;9240:3;9225:19;;8836:414::o;9387:127::-;9448:10;9443:3;9439:20;9436:1;9429:31;9479:4;9476:1;9469:15;9503:4;9500:1;9493:15;9519:128;9586:9;;;9607:11;;;9604:37;;;9621:18;;:::i;9652:125::-;9717:9;;;9738:10;;;9735:36;;;9751:18;;:::i;9782:489::-;-1:-1:-1;;;;;10051:15:15;;;10033:34;;10103:15;;10098:2;10083:18;;10076:43;10150:2;10135:18;;10128:34;;;10198:3;10193:2;10178:18;;10171:31;;;9976:4;;10219:46;;10245:19;;10237:6;10219:46;:::i;:::-;10211:54;9782:489;-1:-1:-1;;;;;;9782:489:15:o;10276:249::-;10345:6;10398:2;10386:9;10377:7;10373:23;10369:32;10366:52;;;10414:1;10411;10404:12;10366:52;10446:9;10440:16;10465:30;10489:5;10465:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"904200","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2634","getApproved(uint256)":"4769","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"2561","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26705","supportsInterface(bytes4)":"511","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256,uint256)":"infinite","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"24513","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"infinite","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"infinite","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":192,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":194,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":198,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":202,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":206,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":212,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":192,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":194,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":198,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":202,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":206,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":212,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1258,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200adb4f3f7178b8e511d8b1d15f94e47a2d1598d2d1f9b4ba38d5ef126a52024e64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xDB 0x4F EXTCODEHASH PUSH18 0x78B8E511D8B1D15F94E47A2D1598D2D1F9B4 0xBA CODESIZE 0xD5 0xEF SLT PUSH11 0x52024E64736F6C63430008 GT STOP CALLER ","sourceMap":"194:8964:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200adb4f3f7178b8e511d8b1d15f94e47a2d1598d2d1f9b4ba38d5ef126a52024e64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xDB 0x4F EXTCODEHASH PUSH18 0x78B8E511D8B1D15F94E47A2D1598D2D1F9B4 0xBA CODESIZE 0xD5 0xEF SLT PUSH11 0x52024E64736F6C63430008 GT STOP CALLER ","sourceMap":"194:8964:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122072b280ec842f2cf78d5684a7b92aede3f94683182a2c71623140eb67b80bc12464736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0xB280EC842F2CF78D5684A7B92AEDE3F9468318 0x2A 0x2C PUSH18 0x623140EB67B80BC12464736F6C6343000811 STOP CALLER ","sourceMap":"424:971:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:971:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122072b280ec842f2cf78d5684a7b92aede3f94683182a2c71623140eb67b80bc12464736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0xB280EC842F2CF78D5684A7B92AEDE3F9468318 0x2A 0x2C PUSH18 0x623140EB67B80BC12464736F6C6343000811 STOP CALLER ","sourceMap":"424:971:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202480e6c580649581670d8f3ab7e1a31eac5b397935413b6cfa52683b904c60b664736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 DUP1 0xE6 0xC5 DUP1 PUSH5 0x9581670D8F GASPRICE 0xB7 0xE1 LOG3 0x1E 0xAC JUMPDEST CODECOPY PUSH26 0x35413B6CFA52683B904C60B664736F6C63430008110033000000 ","sourceMap":"188:2065:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:2065:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202480e6c580649581670d8f3ab7e1a31eac5b397935413b6cfa52683b904c60b664736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 DUP1 0xE6 0xC5 DUP1 PUSH5 0x9581670D8F GASPRICE 0xB7 0xE1 LOG3 0x1E 0xAC JUMPDEST CODECOPY PUSH26 0x35413B6CFA52683B904C60B664736F6C63430008110033000000 ","sourceMap":"188:2065:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220535276f603c63551ea15da16fbe8483a3d8a0a26bb6b21d2e7c005f08420f23664736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 MSTORE PUSH23 0xF603C63551EA15DA16FBE8483A3D8A0A26BB6B21D2E7C0 SDIV CREATE DUP5 KECCAK256 CALLCODE CALLDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12302:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12302:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220535276f603c63551ea15da16fbe8483a3d8a0a26bb6b21d2e7c005f08420f23664736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 MSTORE PUSH23 0xF603C63551EA15DA16FBE8483A3D8A0A26BB6B21D2E7C0 SDIV CREATE DUP5 KECCAK256 CALLCODE CALLDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"202:12302:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Mint.sol":{"Mint":{"abi":[{"inputs":[{"internalType":"string","name":"_collectionName","type":"string"},{"internalType":"string","name":"_collectionSymbol","type":"string"},{"internalType":"string[]","name":"_baseURIs","type":"string[]"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"}],"name":"UserCanFreeMint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"}],"name":"UserCanPreMint","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"balance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"canWhitelistforFreeMint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"canWhitelistforPreMint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"diamondCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"diamondsMinted","outputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"finishFreeMintListing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"finishPreMintListing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"goldCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"goldsMinted","outputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"preMintDiamond","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"preMintGold","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalMinted","outputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"whitelistForFreeMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"whitelistForPreMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_229":{"entryPoint":null,"id":229,"parameterSlots":2,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_3029":{"entryPoint":null,"id":3029,"parameterSlots":3,"returnSlots":0},"@_checkOwner_54":{"entryPoint":573,"id":54,"parameterSlots":0,"returnSlots":0},"@_msgSender_1739":{"entryPoint":192,"id":1739,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":196,"id":111,"parameterSlots":1,"returnSlots":0},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@setBaseURI_3098":{"entryPoint":278,"id":3098,"parameterSlots":1,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":743,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_array$_t_string_memory_ptr_$dyn_memory_ptr_fromMemory":{"entryPoint":884,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":692,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":1229,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1312,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1169,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":1516,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":670,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5741:15","statements":[{"nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:15"},"nodeType":"YulFunctionCall","src":"66:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:15"},"nodeType":"YulFunctionCall","src":"56:31:15"},"nodeType":"YulExpressionStatement","src":"56:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:15"},"nodeType":"YulFunctionCall","src":"96:15:15"},"nodeType":"YulExpressionStatement","src":"96:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:15"},"nodeType":"YulFunctionCall","src":"120:15:15"},"nodeType":"YulExpressionStatement","src":"120:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:15"},{"body":{"nodeType":"YulBlock","src":"191:230:15","statements":[{"nodeType":"YulAssignment","src":"201:19:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"217:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"211:5:15"},"nodeType":"YulFunctionCall","src":"211:9:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"201:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"229:58:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"251:6:15"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"267:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"273:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"263:3:15"},"nodeType":"YulFunctionCall","src":"263:13:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"282:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"278:3:15"},"nodeType":"YulFunctionCall","src":"278:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"259:3:15"},"nodeType":"YulFunctionCall","src":"259:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"247:3:15"},"nodeType":"YulFunctionCall","src":"247:40:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"233:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"362:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"364:16:15"},"nodeType":"YulFunctionCall","src":"364:18:15"},"nodeType":"YulExpressionStatement","src":"364:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"305:10:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"325:2:15","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"329:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"321:3:15"},"nodeType":"YulFunctionCall","src":"321:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"333:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"317:3:15"},"nodeType":"YulFunctionCall","src":"317:18:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"302:2:15"},"nodeType":"YulFunctionCall","src":"302:34:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"341:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"353:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"338:2:15"},"nodeType":"YulFunctionCall","src":"338:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"299:2:15"},"nodeType":"YulFunctionCall","src":"299:62:15"},"nodeType":"YulIf","src":"296:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"400:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"404:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"393:6:15"},"nodeType":"YulFunctionCall","src":"393:22:15"},"nodeType":"YulExpressionStatement","src":"393:22:15"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"171:4:15","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"180:6:15","type":""}],"src":"146:275:15"},{"body":{"nodeType":"YulBlock","src":"490:586:15","statements":[{"body":{"nodeType":"YulBlock","src":"539:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"548:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"551:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"541:6:15"},"nodeType":"YulFunctionCall","src":"541:12:15"},"nodeType":"YulExpressionStatement","src":"541:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"518:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"526:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"514:3:15"},"nodeType":"YulFunctionCall","src":"514:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"533:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"510:3:15"},"nodeType":"YulFunctionCall","src":"510:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"503:6:15"},"nodeType":"YulFunctionCall","src":"503:35:15"},"nodeType":"YulIf","src":"500:55:15"},{"nodeType":"YulVariableDeclaration","src":"564:23:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"580:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"574:5:15"},"nodeType":"YulFunctionCall","src":"574:13:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"568:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"626:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"628:16:15"},"nodeType":"YulFunctionCall","src":"628:18:15"},"nodeType":"YulExpressionStatement","src":"628:18:15"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"602:2:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"614:2:15","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"618:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"610:3:15"},"nodeType":"YulFunctionCall","src":"610:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"622:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"606:3:15"},"nodeType":"YulFunctionCall","src":"606:18:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"599:2:15"},"nodeType":"YulFunctionCall","src":"599:26:15"},"nodeType":"YulIf","src":"596:52:15"},{"nodeType":"YulVariableDeclaration","src":"657:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"667:4:15","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"661:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"680:68:15","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"723:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"727:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"719:3:15"},"nodeType":"YulFunctionCall","src":"719:13:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"738:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"734:3:15"},"nodeType":"YulFunctionCall","src":"734:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"715:3:15"},"nodeType":"YulFunctionCall","src":"715:27:15"},{"name":"_2","nodeType":"YulIdentifier","src":"744:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"711:3:15"},"nodeType":"YulFunctionCall","src":"711:36:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"695:15:15"},"nodeType":"YulFunctionCall","src":"695:53:15"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"684:7:15","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"764:7:15"},{"name":"_1","nodeType":"YulIdentifier","src":"773:2:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"757:6:15"},"nodeType":"YulFunctionCall","src":"757:19:15"},"nodeType":"YulExpressionStatement","src":"757:19:15"},{"body":{"nodeType":"YulBlock","src":"822:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"831:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"824:6:15"},"nodeType":"YulFunctionCall","src":"824:12:15"},"nodeType":"YulExpressionStatement","src":"824:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"799:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"807:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"795:3:15"},"nodeType":"YulFunctionCall","src":"795:15:15"},{"name":"_2","nodeType":"YulIdentifier","src":"812:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"791:3:15"},"nodeType":"YulFunctionCall","src":"791:24:15"},{"name":"end","nodeType":"YulIdentifier","src":"817:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"788:2:15"},"nodeType":"YulFunctionCall","src":"788:33:15"},"nodeType":"YulIf","src":"785:53:15"},{"nodeType":"YulVariableDeclaration","src":"847:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"856:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"851:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"912:88:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"941:7:15"},{"name":"i","nodeType":"YulIdentifier","src":"950:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"937:3:15"},"nodeType":"YulFunctionCall","src":"937:15:15"},{"name":"_2","nodeType":"YulIdentifier","src":"954:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"933:3:15"},"nodeType":"YulFunctionCall","src":"933:24:15"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"973:6:15"},{"name":"i","nodeType":"YulIdentifier","src":"981:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"969:3:15"},"nodeType":"YulFunctionCall","src":"969:14:15"},{"name":"_2","nodeType":"YulIdentifier","src":"985:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"965:3:15"},"nodeType":"YulFunctionCall","src":"965:23:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"959:5:15"},"nodeType":"YulFunctionCall","src":"959:30:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"926:6:15"},"nodeType":"YulFunctionCall","src":"926:64:15"},"nodeType":"YulExpressionStatement","src":"926:64:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"877:1:15"},{"name":"_1","nodeType":"YulIdentifier","src":"880:2:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"874:2:15"},"nodeType":"YulFunctionCall","src":"874:9:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"884:19:15","statements":[{"nodeType":"YulAssignment","src":"886:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"895:1:15"},{"name":"_2","nodeType":"YulIdentifier","src":"898:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"891:3:15"},"nodeType":"YulFunctionCall","src":"891:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"886:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"870:3:15","statements":[]},"src":"866:134:15"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"1024:7:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1033:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1020:3:15"},"nodeType":"YulFunctionCall","src":"1020:16:15"},{"name":"_2","nodeType":"YulIdentifier","src":"1038:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1016:3:15"},"nodeType":"YulFunctionCall","src":"1016:25:15"},{"kind":"number","nodeType":"YulLiteral","src":"1043:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1009:6:15"},"nodeType":"YulFunctionCall","src":"1009:36:15"},"nodeType":"YulExpressionStatement","src":"1009:36:15"},{"nodeType":"YulAssignment","src":"1054:16:15","value":{"name":"array_1","nodeType":"YulIdentifier","src":"1063:7:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1054:5:15"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"464:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"472:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"480:5:15","type":""}],"src":"426:650:15"},{"body":{"nodeType":"YulBlock","src":"1251:1406:15","statements":[{"body":{"nodeType":"YulBlock","src":"1297:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1306:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1309:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1299:6:15"},"nodeType":"YulFunctionCall","src":"1299:12:15"},"nodeType":"YulExpressionStatement","src":"1299:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1272:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1281:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1268:3:15"},"nodeType":"YulFunctionCall","src":"1268:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1293:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1264:3:15"},"nodeType":"YulFunctionCall","src":"1264:32:15"},"nodeType":"YulIf","src":"1261:52:15"},{"nodeType":"YulVariableDeclaration","src":"1322:30:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1336:5:15"},"nodeType":"YulFunctionCall","src":"1336:16:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1326:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1361:28:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1379:2:15","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1383:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1375:3:15"},"nodeType":"YulFunctionCall","src":"1375:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"1387:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1371:3:15"},"nodeType":"YulFunctionCall","src":"1371:18:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1365:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1416:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1425:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1428:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1418:6:15"},"nodeType":"YulFunctionCall","src":"1418:12:15"},"nodeType":"YulExpressionStatement","src":"1418:12:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1404:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1412:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1401:2:15"},"nodeType":"YulFunctionCall","src":"1401:14:15"},"nodeType":"YulIf","src":"1398:34:15"},{"nodeType":"YulAssignment","src":"1441:71:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1484:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1495:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1480:3:15"},"nodeType":"YulFunctionCall","src":"1480:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1504:7:15"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1451:28:15"},"nodeType":"YulFunctionCall","src":"1451:61:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1441:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"1521:12:15","value":{"kind":"number","nodeType":"YulLiteral","src":"1531:2:15","type":"","value":"32"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1525:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1542:41:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1568:9:15"},{"name":"_2","nodeType":"YulIdentifier","src":"1579:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1564:3:15"},"nodeType":"YulFunctionCall","src":"1564:18:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1558:5:15"},"nodeType":"YulFunctionCall","src":"1558:25:15"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1546:8:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1612:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1621:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1624:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1614:6:15"},"nodeType":"YulFunctionCall","src":"1614:12:15"},"nodeType":"YulExpressionStatement","src":"1614:12:15"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1598:8:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1608:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1595:2:15"},"nodeType":"YulFunctionCall","src":"1595:16:15"},"nodeType":"YulIf","src":"1592:36:15"},{"nodeType":"YulAssignment","src":"1637:73:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1680:9:15"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1691:8:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1676:3:15"},"nodeType":"YulFunctionCall","src":"1676:24:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1702:7:15"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1647:28:15"},"nodeType":"YulFunctionCall","src":"1647:63:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1637:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"1719:41:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1745:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1756:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1741:3:15"},"nodeType":"YulFunctionCall","src":"1741:18:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1735:5:15"},"nodeType":"YulFunctionCall","src":"1735:25:15"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"1723:8:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1789:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1798:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1801:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1791:6:15"},"nodeType":"YulFunctionCall","src":"1791:12:15"},"nodeType":"YulExpressionStatement","src":"1791:12:15"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"1775:8:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1785:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1772:2:15"},"nodeType":"YulFunctionCall","src":"1772:16:15"},"nodeType":"YulIf","src":"1769:36:15"},{"nodeType":"YulVariableDeclaration","src":"1814:34:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1828:9:15"},{"name":"offset_2","nodeType":"YulIdentifier","src":"1839:8:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1824:3:15"},"nodeType":"YulFunctionCall","src":"1824:24:15"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1818:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1896:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1905:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1908:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1898:6:15"},"nodeType":"YulFunctionCall","src":"1898:12:15"},"nodeType":"YulExpressionStatement","src":"1898:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1875:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"1879:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1871:3:15"},"nodeType":"YulFunctionCall","src":"1871:13:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1886:7:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1867:3:15"},"nodeType":"YulFunctionCall","src":"1867:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1860:6:15"},"nodeType":"YulFunctionCall","src":"1860:35:15"},"nodeType":"YulIf","src":"1857:55:15"},{"nodeType":"YulVariableDeclaration","src":"1921:19:15","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1937:2:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1931:5:15"},"nodeType":"YulFunctionCall","src":"1931:9:15"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1925:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1963:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1965:16:15"},"nodeType":"YulFunctionCall","src":"1965:18:15"},"nodeType":"YulExpressionStatement","src":"1965:18:15"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1955:2:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1959:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1952:2:15"},"nodeType":"YulFunctionCall","src":"1952:10:15"},"nodeType":"YulIf","src":"1949:36:15"},{"nodeType":"YulVariableDeclaration","src":"1994:20:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2008:1:15","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"2011:2:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2004:3:15"},"nodeType":"YulFunctionCall","src":"2004:10:15"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1998:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2023:39:15","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"2054:2:15"},{"name":"_2","nodeType":"YulIdentifier","src":"2058:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2050:3:15"},"nodeType":"YulFunctionCall","src":"2050:11:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2034:15:15"},"nodeType":"YulFunctionCall","src":"2034:28:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2027:3:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2071:16:15","value":{"name":"dst","nodeType":"YulIdentifier","src":"2084:3:15"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"2075:5:15","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2103:3:15"},{"name":"_4","nodeType":"YulIdentifier","src":"2108:2:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2096:6:15"},"nodeType":"YulFunctionCall","src":"2096:15:15"},"nodeType":"YulExpressionStatement","src":"2096:15:15"},{"nodeType":"YulAssignment","src":"2120:19:15","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2131:3:15"},{"name":"_2","nodeType":"YulIdentifier","src":"2136:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2127:3:15"},"nodeType":"YulFunctionCall","src":"2127:12:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2120:3:15"}]},{"nodeType":"YulVariableDeclaration","src":"2148:34:15","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2170:2:15"},{"name":"_5","nodeType":"YulIdentifier","src":"2174:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2166:3:15"},"nodeType":"YulFunctionCall","src":"2166:11:15"},{"name":"_2","nodeType":"YulIdentifier","src":"2179:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2162:3:15"},"nodeType":"YulFunctionCall","src":"2162:20:15"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2152:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2214:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2223:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2226:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2216:6:15"},"nodeType":"YulFunctionCall","src":"2216:12:15"},"nodeType":"YulExpressionStatement","src":"2216:12:15"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2197:6:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2205:7:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2194:2:15"},"nodeType":"YulFunctionCall","src":"2194:19:15"},"nodeType":"YulIf","src":"2191:39:15"},{"nodeType":"YulVariableDeclaration","src":"2239:22:15","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2254:2:15"},{"name":"_2","nodeType":"YulIdentifier","src":"2258:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2250:3:15"},"nodeType":"YulFunctionCall","src":"2250:11:15"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2243:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2326:301:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2340:29:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2365:3:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2359:5:15"},"nodeType":"YulFunctionCall","src":"2359:10:15"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"2344:11:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2417:74:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2435:11:15","value":{"kind":"number","nodeType":"YulLiteral","src":"2445:1:15","type":"","value":"0"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"2439:2:15","type":""}]},{"expression":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"2470:2:15"},{"name":"_6","nodeType":"YulIdentifier","src":"2474:2:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2463:6:15"},"nodeType":"YulFunctionCall","src":"2463:14:15"},"nodeType":"YulExpressionStatement","src":"2463:14:15"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"2388:11:15"},{"name":"_1","nodeType":"YulIdentifier","src":"2401:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2385:2:15"},"nodeType":"YulFunctionCall","src":"2385:19:15"},"nodeType":"YulIf","src":"2382:109:15"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2511:3:15"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2553:2:15"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"2557:11:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:15"},"nodeType":"YulFunctionCall","src":"2549:20:15"},{"name":"_2","nodeType":"YulIdentifier","src":"2571:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2545:3:15"},"nodeType":"YulFunctionCall","src":"2545:29:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2576:7:15"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"2516:28:15"},"nodeType":"YulFunctionCall","src":"2516:68:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2504:6:15"},"nodeType":"YulFunctionCall","src":"2504:81:15"},"nodeType":"YulExpressionStatement","src":"2504:81:15"},{"nodeType":"YulAssignment","src":"2598:19:15","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2609:3:15"},{"name":"_2","nodeType":"YulIdentifier","src":"2614:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2605:3:15"},"nodeType":"YulFunctionCall","src":"2605:12:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2598:3:15"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2281:3:15"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2286:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2278:2:15"},"nodeType":"YulFunctionCall","src":"2278:15:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2294:23:15","statements":[{"nodeType":"YulAssignment","src":"2296:19:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2307:3:15"},{"name":"_2","nodeType":"YulIdentifier","src":"2312:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2303:3:15"},"nodeType":"YulFunctionCall","src":"2303:12:15"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2296:3:15"}]}]},"pre":{"nodeType":"YulBlock","src":"2274:3:15","statements":[]},"src":"2270:357:15"},{"nodeType":"YulAssignment","src":"2636:15:15","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2646:5:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2636:6:15"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_array$_t_string_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1201:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1212:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1224:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1232:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1240:6:15","type":""}],"src":"1081:1576:15"},{"body":{"nodeType":"YulBlock","src":"2717:325:15","statements":[{"nodeType":"YulAssignment","src":"2727:22:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2741:1:15","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2744:4:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2737:3:15"},"nodeType":"YulFunctionCall","src":"2737:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2727:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"2758:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2788:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"2794:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2784:3:15"},"nodeType":"YulFunctionCall","src":"2784:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2762:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2835:31:15","statements":[{"nodeType":"YulAssignment","src":"2837:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2851:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2859:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2847:3:15"},"nodeType":"YulFunctionCall","src":"2847:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2837:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2815:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2808:6:15"},"nodeType":"YulFunctionCall","src":"2808:26:15"},"nodeType":"YulIf","src":"2805:61:15"},{"body":{"nodeType":"YulBlock","src":"2925:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2946:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2953:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2958:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2949:3:15"},"nodeType":"YulFunctionCall","src":"2949:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2939:6:15"},"nodeType":"YulFunctionCall","src":"2939:31:15"},"nodeType":"YulExpressionStatement","src":"2939:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2990:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2993:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2983:6:15"},"nodeType":"YulFunctionCall","src":"2983:15:15"},"nodeType":"YulExpressionStatement","src":"2983:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3018:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3021:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3011:6:15"},"nodeType":"YulFunctionCall","src":"3011:15:15"},"nodeType":"YulExpressionStatement","src":"3011:15:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2881:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2904:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2912:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2901:2:15"},"nodeType":"YulFunctionCall","src":"2901:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2878:2:15"},"nodeType":"YulFunctionCall","src":"2878:38:15"},"nodeType":"YulIf","src":"2875:161:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2697:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2706:6:15","type":""}],"src":"2662:380:15"},{"body":{"nodeType":"YulBlock","src":"3103:65:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3120:1:15","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"3123:3:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3113:6:15"},"nodeType":"YulFunctionCall","src":"3113:14:15"},"nodeType":"YulExpressionStatement","src":"3113:14:15"},{"nodeType":"YulAssignment","src":"3136:26:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3154:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3157:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3144:9:15"},"nodeType":"YulFunctionCall","src":"3144:18:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3136:4:15"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"3086:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"3094:4:15","type":""}],"src":"3047:121:15"},{"body":{"nodeType":"YulBlock","src":"3254:464:15","statements":[{"body":{"nodeType":"YulBlock","src":"3287:425:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3301:11:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3311:1:15","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3305:2:15","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3332:2:15"},{"name":"array","nodeType":"YulIdentifier","src":"3336:5:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3325:6:15"},"nodeType":"YulFunctionCall","src":"3325:17:15"},"nodeType":"YulExpressionStatement","src":"3325:17:15"},{"nodeType":"YulVariableDeclaration","src":"3355:31:15","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3377:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"3381:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3367:9:15"},"nodeType":"YulFunctionCall","src":"3367:19:15"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"3359:4:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3399:57:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3422:4:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3432:1:15","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3439:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"3451:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3435:3:15"},"nodeType":"YulFunctionCall","src":"3435:19:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3428:3:15"},"nodeType":"YulFunctionCall","src":"3428:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3418:3:15"},"nodeType":"YulFunctionCall","src":"3418:38:15"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"3403:11:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3493:23:15","statements":[{"nodeType":"YulAssignment","src":"3495:19:15","value":{"name":"data","nodeType":"YulIdentifier","src":"3510:4:15"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3495:11:15"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3475:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"3487:4:15","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3472:2:15"},"nodeType":"YulFunctionCall","src":"3472:20:15"},"nodeType":"YulIf","src":"3469:47:15"},{"nodeType":"YulVariableDeclaration","src":"3529:41:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3543:4:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3553:1:15","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3560:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"3565:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3556:3:15"},"nodeType":"YulFunctionCall","src":"3556:12:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3549:3:15"},"nodeType":"YulFunctionCall","src":"3549:20:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3539:3:15"},"nodeType":"YulFunctionCall","src":"3539:31:15"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3533:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3583:24:15","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"3596:11:15"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"3587:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3681:21:15","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3690:5:15"},{"name":"_1","nodeType":"YulIdentifier","src":"3697:2:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3683:6:15"},"nodeType":"YulFunctionCall","src":"3683:17:15"},"nodeType":"YulExpressionStatement","src":"3683:17:15"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3631:5:15"},{"name":"_2","nodeType":"YulIdentifier","src":"3638:2:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3628:2:15"},"nodeType":"YulFunctionCall","src":"3628:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3642:26:15","statements":[{"nodeType":"YulAssignment","src":"3644:22:15","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3657:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"3664:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3653:3:15"},"nodeType":"YulFunctionCall","src":"3653:13:15"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"3644:5:15"}]}]},"pre":{"nodeType":"YulBlock","src":"3624:3:15","statements":[]},"src":"3620:82:15"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3270:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"3275:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3267:2:15"},"nodeType":"YulFunctionCall","src":"3267:11:15"},"nodeType":"YulIf","src":"3264:448:15"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"3226:5:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"3233:3:15","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"3238:10:15","type":""}],"src":"3173:545:15"},{"body":{"nodeType":"YulBlock","src":"3808:81:15","statements":[{"nodeType":"YulAssignment","src":"3818:65:15","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3833:4:15"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3851:1:15","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"3854:3:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3847:3:15"},"nodeType":"YulFunctionCall","src":"3847:11:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3864:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3860:3:15"},"nodeType":"YulFunctionCall","src":"3860:6:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3843:3:15"},"nodeType":"YulFunctionCall","src":"3843:24:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3839:3:15"},"nodeType":"YulFunctionCall","src":"3839:29:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3829:3:15"},"nodeType":"YulFunctionCall","src":"3829:40:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3875:1:15","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"3878:3:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3871:3:15"},"nodeType":"YulFunctionCall","src":"3871:11:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3826:2:15"},"nodeType":"YulFunctionCall","src":"3826:57:15"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3818:4:15"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3785:4:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"3791:3:15","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3799:4:15","type":""}],"src":"3723:166:15"},{"body":{"nodeType":"YulBlock","src":"3990:1256:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4000:24:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4020:3:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4014:5:15"},"nodeType":"YulFunctionCall","src":"4014:10:15"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"4004:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4067:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4069:16:15"},"nodeType":"YulFunctionCall","src":"4069:18:15"},"nodeType":"YulExpressionStatement","src":"4069:18:15"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4039:6:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4055:2:15","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"4059:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4051:3:15"},"nodeType":"YulFunctionCall","src":"4051:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"4063:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4047:3:15"},"nodeType":"YulFunctionCall","src":"4047:18:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4036:2:15"},"nodeType":"YulFunctionCall","src":"4036:30:15"},"nodeType":"YulIf","src":"4033:56:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4142:4:15"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4180:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4174:5:15"},"nodeType":"YulFunctionCall","src":"4174:11:15"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"4148:25:15"},"nodeType":"YulFunctionCall","src":"4148:38:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"4188:6:15"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"4098:43:15"},"nodeType":"YulFunctionCall","src":"4098:97:15"},"nodeType":"YulExpressionStatement","src":"4098:97:15"},{"nodeType":"YulVariableDeclaration","src":"4204:18:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4221:1:15","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"4208:9:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4231:23:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4250:4:15","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"4235:11:15","type":""}]},{"nodeType":"YulAssignment","src":"4263:24:15","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4276:11:15"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4263:9:15"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4333:656:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4347:35:15","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4366:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4378:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4374:3:15"},"nodeType":"YulFunctionCall","src":"4374:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4362:3:15"},"nodeType":"YulFunctionCall","src":"4362:20:15"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"4351:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4395:49:15","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4439:4:15"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"4409:29:15"},"nodeType":"YulFunctionCall","src":"4409:35:15"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4399:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4457:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4466:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4461:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4544:172:15","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4569:6:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4587:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4592:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4583:3:15"},"nodeType":"YulFunctionCall","src":"4583:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4577:5:15"},"nodeType":"YulFunctionCall","src":"4577:26:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4562:6:15"},"nodeType":"YulFunctionCall","src":"4562:42:15"},"nodeType":"YulExpressionStatement","src":"4562:42:15"},{"nodeType":"YulAssignment","src":"4621:24:15","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4635:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4643:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4631:3:15"},"nodeType":"YulFunctionCall","src":"4631:14:15"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4621:6:15"}]},{"nodeType":"YulAssignment","src":"4662:40:15","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4679:9:15"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4690:11:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4675:3:15"},"nodeType":"YulFunctionCall","src":"4675:27:15"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4662:9:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4491:1:15"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4494:7:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4488:2:15"},"nodeType":"YulFunctionCall","src":"4488:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4503:28:15","statements":[{"nodeType":"YulAssignment","src":"4505:24:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4514:1:15"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4517:11:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4510:3:15"},"nodeType":"YulFunctionCall","src":"4510:19:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4505:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"4484:3:15","statements":[]},"src":"4480:236:15"},{"body":{"nodeType":"YulBlock","src":"4764:166:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4782:43:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4809:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4814:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4805:3:15"},"nodeType":"YulFunctionCall","src":"4805:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4799:5:15"},"nodeType":"YulFunctionCall","src":"4799:26:15"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4786:9:15","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4849:6:15"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4861:9:15"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4888:1:15","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"4891:6:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4884:3:15"},"nodeType":"YulFunctionCall","src":"4884:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"4900:3:15","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4880:3:15"},"nodeType":"YulFunctionCall","src":"4880:24:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4910:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4906:3:15"},"nodeType":"YulFunctionCall","src":"4906:6:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4876:3:15"},"nodeType":"YulFunctionCall","src":"4876:37:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4872:3:15"},"nodeType":"YulFunctionCall","src":"4872:42:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4857:3:15"},"nodeType":"YulFunctionCall","src":"4857:58:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4842:6:15"},"nodeType":"YulFunctionCall","src":"4842:74:15"},"nodeType":"YulExpressionStatement","src":"4842:74:15"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4735:7:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"4744:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4732:2:15"},"nodeType":"YulFunctionCall","src":"4732:19:15"},"nodeType":"YulIf","src":"4729:201:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4950:4:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4964:1:15","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"4967:6:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4960:3:15"},"nodeType":"YulFunctionCall","src":"4960:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"4976:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4956:3:15"},"nodeType":"YulFunctionCall","src":"4956:22:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4943:6:15"},"nodeType":"YulFunctionCall","src":"4943:36:15"},"nodeType":"YulExpressionStatement","src":"4943:36:15"}]},"nodeType":"YulCase","src":"4326:663:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4331:1:15","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5006:234:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5020:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5033:1:15","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5024:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"5069:67:15","statements":[{"nodeType":"YulAssignment","src":"5087:35:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5106:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5111:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5102:3:15"},"nodeType":"YulFunctionCall","src":"5102:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5096:5:15"},"nodeType":"YulFunctionCall","src":"5096:26:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5087:5:15"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"5050:6:15"},"nodeType":"YulIf","src":"5047:89:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5156:4:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5215:5:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"5222:6:15"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"5162:52:15"},"nodeType":"YulFunctionCall","src":"5162:67:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5149:6:15"},"nodeType":"YulFunctionCall","src":"5149:81:15"},"nodeType":"YulExpressionStatement","src":"5149:81:15"}]},"nodeType":"YulCase","src":"4998:242:15","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4306:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4314:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4303:2:15"},"nodeType":"YulFunctionCall","src":"4303:14:15"},"nodeType":"YulSwitch","src":"4296:944:15"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3975:4:15","type":""},{"name":"src","nodeType":"YulTypedName","src":"3981:3:15","type":""}],"src":"3894:1352:15"},{"body":{"nodeType":"YulBlock","src":"5283:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5300:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5307:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5312:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5303:3:15"},"nodeType":"YulFunctionCall","src":"5303:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5293:6:15"},"nodeType":"YulFunctionCall","src":"5293:31:15"},"nodeType":"YulExpressionStatement","src":"5293:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5340:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5343:4:15","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5333:6:15"},"nodeType":"YulFunctionCall","src":"5333:15:15"},"nodeType":"YulExpressionStatement","src":"5333:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5364:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5367:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5357:6:15"},"nodeType":"YulFunctionCall","src":"5357:15:15"},"nodeType":"YulExpressionStatement","src":"5357:15:15"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"5251:127:15"},{"body":{"nodeType":"YulBlock","src":"5557:182:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5574:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5585:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5567:6:15"},"nodeType":"YulFunctionCall","src":"5567:21:15"},"nodeType":"YulExpressionStatement","src":"5567:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5608:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5619:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5604:3:15"},"nodeType":"YulFunctionCall","src":"5604:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"5624:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5597:6:15"},"nodeType":"YulFunctionCall","src":"5597:30:15"},"nodeType":"YulExpressionStatement","src":"5597:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5647:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5658:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5643:3:15"},"nodeType":"YulFunctionCall","src":"5643:18:15"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"5663:34:15","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5636:6:15"},"nodeType":"YulFunctionCall","src":"5636:62:15"},"nodeType":"YulExpressionStatement","src":"5636:62:15"},{"nodeType":"YulAssignment","src":"5707:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5719:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5730:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5715:3:15"},"nodeType":"YulFunctionCall","src":"5715:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5707:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5534:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5548:4:15","type":""}],"src":"5383:356:15"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        if gt(_1, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        let _2 := 0x20\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), _2))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), _2), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _2) }\n        {\n            mstore(add(add(array_1, i), _2), mload(add(add(offset, i), _2)))\n        }\n        mstore(add(add(array_1, _1), _2), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_array$_t_string_memory_ptr_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let _2 := 32\n        let offset_1 := mload(add(headStart, _2))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let offset_2 := mload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let _3 := add(headStart, offset_2)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _1) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let dst := allocate_memory(add(_5, _2))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _2)\n        let srcEnd := add(add(_3, _5), _2)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := mload(src)\n            if gt(innerOffset, _1)\n            {\n                let _6 := 0\n                revert(_6, _6)\n            }\n            mstore(dst, abi_decode_string_fromMemory(add(add(_3, innerOffset), _2), dataEnd))\n            dst := add(dst, _2)\n        }\n        value2 := dst_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6080604052670de0b6b3a7640000601b55674563918244f40000601c553480156200002957600080fd5b5060405162002be538038062002be58339810160408190526200004c9162000374565b828260006200005c838262000520565b5060016200006b828262000520565b5050506200008862000082620000c060201b60201c565b620000c4565b620000938162000116565b5050601a805460ff19166001179055506000601d55601880546001600160a01b0319163317905562000602565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001206200023d565b80600081518110620001365762000136620005ec565b6020026020010151600b90816200014e919062000520565b5080600181518110620001655762000165620005ec565b6020026020010151600c90816200017d919062000520565b5080600281518110620001945762000194620005ec565b6020026020010151600d9081620001ac919062000520565b5080600381518110620001c357620001c3620005ec565b6020026020010151600e9081620001db919062000520565b5080600481518110620001f257620001f2620005ec565b6020026020010151600f90816200020a919062000520565b5080600581518110620002215762000221620005ec565b60200260200101516010908162000239919062000520565b5050565b6007546001600160a01b031633146200029c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620002df57620002df6200029e565b604052919050565b600082601f830112620002f957600080fd5b81516001600160401b038111156200031557620003156200029e565b60206200032b601f8301601f19168201620002b4565b82815285828487010111156200034057600080fd5b60005b838110156200036057858101830151828201840152820162000343565b506000928101909101919091529392505050565b6000806000606084860312156200038a57600080fd5b83516001600160401b0380821115620003a257600080fd5b620003b087838801620002e7565b9450602091508186015181811115620003c857600080fd5b620003d688828901620002e7565b945050604086015181811115620003ec57600080fd5b8601601f81018813620003fe57600080fd5b8051828111156200041357620004136200029e565b8060051b62000424858201620002b4565b918252828101850191858101908b8411156200043f57600080fd5b86850192505b8383101562000480578251868111156200045f5760008081fd5b6200046f8d8983890101620002e7565b835250918601919086019062000445565b809750505050505050509250925092565b600181811c90821680620004a657607f821691505b602082108103620004c757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200051b57600081815260208120601f850160051c81016020861015620004f65750805b601f850160051c820191505b81811015620005175782815560010162000502565b5050505b505050565b81516001600160401b038111156200053c576200053c6200029e565b62000554816200054d845462000491565b84620004cd565b602080601f8311600181146200058c5760008415620005735750858301515b600019600386901b1c1916600185901b17855562000517565b600085815260208120601f198616915b82811015620005bd578886015182559484019460019091019084016200059c565b5085821015620005dc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6125d380620006126000396000f3fe6080604052600436106101d85760003560e01c8063853828b611610102578063b4d93b0711610095578063d5a02dfa11610064578063d5a02dfa146104df578063e985e9c5146104f4578063ed5e57b814610514578063f2fde38b1461053357600080fd5b8063b4d93b0714610481578063b69ef8a814610489578063b88d4fde1461049f578063c87b56dd146104bf57600080fd5b80639cc11d02116100d15780639cc11d0214610428578063a22cb46514610442578063a2309ff814610462578063af2a91901461047957600080fd5b8063853828b6146103c95780638d0a284b146103de5780638da5cb5b146103f557806395d89b411461041357600080fd5b8063207d95a51161017a5780636352211e116101495780636352211e1461035e57806365f9c6561461037e57806370a0823114610394578063715018a6146103b457600080fd5b8063207d95a5146102e957806323b872dd146102fe57806342842e0e1461031e57806353a6cef51461033e57600080fd5b8063081812fc116101b6578063081812fc14610256578063095ea7b31461028e578063182ea932146102ae5780631f69f030146102d357600080fd5b806301ffc9a7146101dd57806304baffc71461021257806306fdde0314610234575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611ed0565b610553565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b5061023261022d366004611f09565b6105a5565b005b34801561024057600080fd5b5061024961063c565b6040516102099190611f74565b34801561026257600080fd5b50610276610271366004611f87565b6106ce565b6040516001600160a01b039091168152602001610209565b34801561029a57600080fd5b506102326102a9366004611fa0565b6106f5565b3480156102ba57600080fd5b506009546102c59081565b604051908152602001610209565b3480156102df57600080fd5b506102c5601c5481565b3480156102f557600080fd5b5061023261080a565b34801561030a57600080fd5b50610232610319366004611fca565b61084c565b34801561032a57600080fd5b50610232610339366004611fca565b61087d565b34801561034a57600080fd5b50610232610359366004611f09565b610898565b34801561036a57600080fd5b50610276610379366004611f87565b61091b565b34801561038a57600080fd5b506102c5601b5481565b3480156103a057600080fd5b506102c56103af366004611f09565b61097b565b3480156103c057600080fd5b50610232610a01565b3480156103d557600080fd5b50610232610a15565b3480156103ea57600080fd5b506008546102c59081565b34801561040157600080fd5b506007546001600160a01b0316610276565b34801561041f57600080fd5b50610249610a6d565b34801561043457600080fd5b50601a546101fd9060ff1681565b34801561044e57600080fd5b5061023261045d366004612006565b610a7c565b34801561046e57600080fd5b50600a546102c59081565b610232610a87565b610232610c3d565b34801561049557600080fd5b506102c560195481565b3480156104ab57600080fd5b506102326104ba366004612058565b610dd3565b3480156104cb57600080fd5b506102496104da366004611f87565b610e0b565b3480156104eb57600080fd5b50610232610f1b565b34801561050057600080fd5b506101fd61050f366004612134565b610f5b565b34801561052057600080fd5b50601a546101fd90610100900460ff1681565b34801561053f57600080fd5b5061023261054e366004611f09565b610f89565b60006001600160e01b031982166380ac58cd60e01b148061058457506001600160e01b03198216635b5e139f60e01b145b8061059f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105ad611002565b601a5460ff6101009091041615156001146105e35760405162461bcd60e51b81526004016105da90612167565b60405180910390fd5b6001600160a01b03811660008181526020808052604091829020805460ff1916600117905590519182527ffe9489a95af8142951ae7fe3795b77b8e0e0e1b7411049c82ce6ec096bc7c59c91015b60405180910390a150565b60606000805461064b906121ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610677906121ab565b80156106c45780601f10610699576101008083540402835291602001916106c4565b820191906000526020600020905b8154815290600101906020018083116106a757829003601f168201915b5050505050905090565b60006106d98261105c565b506000908152600460205260409020546001600160a01b031690565b60006107008261091b565b9050806001600160a01b0316836001600160a01b03160361076d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016105da565b336001600160a01b038216148061078957506107898133610f5b565b6107fb5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016105da565b61080583836110bb565b505050565b610812611002565b601a5460ff61010090910416151560011461083f5760405162461bcd60e51b81526004016105da90612167565b601a805461ff0019169055565b6108563382611129565b6108725760405162461bcd60e51b81526004016105da906121e5565b610805838383611187565b61080583838360405180602001604052806000815250610dd3565b6108a0611002565b601a5460ff1615156001146108c75760405162461bcd60e51b81526004016105da90612232565b6001600160a01b0381166000818152601f6020908152604091829020805460ff1916600117905590519182527f7ca3b83bd54c2e58547d3d3b7fd3c742d00dd3d413ec10bbe23232a1c0ff29b69101610631565b6000818152600260205260408120546001600160a01b03168061059f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105da565b60006001600160a01b0382166109e55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105da565b506001600160a01b031660009081526003602052604090205490565b610a09611002565b610a1360006112f8565b565b610a1d611002565b6000610a316007546001600160a01b031690565b6040519091506001600160a01b038216904780156108fc02916000818181858888f19350505050158015610a69573d6000803e3d6000fd5b5050565b60606001805461064b906121ab565b610a6933838361134a565b336000908152601f602052604090205460ff16610ab65760405162461bcd60e51b81526004016105da90612275565b336000908152601e6020526040902060010154600511610b245760405162461bcd60e51b8152602060048201526024808201527f596f752063616e6e6f74206d696e7420616e796d6f726520676f6c642063617060448201526373756c6560e01b60648201526084016105da565b601b543414610b695760405162461bcd60e51b81526020600482015260116024820152705072696365206973203235204d6174696360781b60448201526064016105da565b6008546102bc1015610bc85760405162461bcd60e51b815260206004820152602260248201527f416c6c20676f6c642063617073756c65732068617665206265656e206d696e74604482015261195960f21b60648201526084016105da565b610bd0611418565b6018546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610c09573d6000803e3d6000fd5b50610c18600880546001019055565b336000908152601e60205260408120600101805491610c36836122cf565b9190505550565b336000908152601f602052604090205460ff16610c6c5760405162461bcd60e51b81526004016105da90612275565b336000908152601e6020526040902054600211610cdb5760405162461bcd60e51b815260206004820152602760248201527f596f752063616e6e6f74206d696e7420616e796d6f7265206469616d6f6e642060448201526663617073756c6560c81b60648201526084016105da565b601c543414610d215760405162461bcd60e51b8152602060048201526012602482015271507269636520697320313330204d6174696360701b60448201526064016105da565b60095461012c1015610d835760405162461bcd60e51b815260206004820152602560248201527f416c6c206469616d6f6e642063617073756c65732068617665206265656e206d6044820152641a5b9d195960da1b60648201526084016105da565b610d8b61161f565b6018546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610dc4573d6000803e3d6000fd5b50610c18600980546001019055565b610ddd3383611129565b610df95760405162461bcd60e51b81526004016105da906121e5565b610e05848484846117eb565b50505050565b6060610e168261105c565b60008281526006602052604081208054610e2f906121ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5b906121ab565b8015610ea85780601f10610e7d57610100808354040283529160200191610ea8565b820191906000526020600020905b815481529060010190602001808311610e8b57829003601f168201915b505050505090506000610ec660408051602081019091526000815290565b90508051600003610ed8575092915050565b815115610f0a578082604051602001610ef29291906122e8565b60405160208183030381529060405292505050919050565b610f138461181e565b949350505050565b610f23611002565b601a5460ff161515600114610f4a5760405162461bcd60e51b81526004016105da90612232565b601a805461ffff1916610100179055565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610f91611002565b6001600160a01b038116610ff65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105da565b610fff816112f8565b50565b6007546001600160a01b03163314610a135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105da565b6000818152600260205260409020546001600160a01b0316610fff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105da565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906110f08261091b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111358361091b565b9050806001600160a01b0316846001600160a01b0316148061115c575061115c8185610f5b565b80610f135750836001600160a01b0316611175846106ce565b6001600160a01b031614949350505050565b826001600160a01b031661119a8261091b565b6001600160a01b0316146111c05760405162461bcd60e51b81526004016105da90612317565b6001600160a01b0382166112225760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105da565b61122f8383836001611892565b826001600160a01b03166112428261091b565b6001600160a01b0316146112685760405162461bcd60e51b81526004016105da90612317565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036113ab5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105da565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006114266001606461191a565b90506001811015801561143a575060328111155b1561154f5761015e601154106115275760f5601254106114ff5760138054906000611464836122cf565b91905055506114ff601354600d805461147c906121ab565b80601f01602080910402602001604051908101604052809291908181526020018280546114a8906121ab565b80156114f55780601f106114ca576101008083540402835291602001916114f5565b820191906000526020600020905b8154815290600101906020018083116114d857829003601f168201915b50505050506119b3565b6012805490600061150f836122cf565b9190505550610fff601254600c805461147c906121ab565b60118054906000611537836122cf565b9190505550610fff601154600b805461147c906121ab565b60338110158015611561575060558111155b156115a35760f5601254106114ff5761015e60115410611527576013805490600061158b836122cf565b9190505550611527601354600d805461147c906121ab565b605681101580156115b5575060648111155b15610fff576069601354106115f75761015e6011541061152757601280549060006115df836122cf565b9190505550611527601254600c805461147c906121ab565b60138054906000611607836122cf565b9190505550610fff601354600d805461147c906121ab565b600061162e60016103e861191a565b905060018110158015611643575061015e8111155b15611706576069601454106116de57605a601554106116b65760356016541061168e5760178054906000611676836122cf565b9190505550610fff6017546010805461147c906121ab565b6016805490600061169e836122cf565b9190505550610fff601654600f805461147c906121ab565b601580549060006116c6836122cf565b9190505550610fff601554600e805461147c906121ab565b601480549060006116ee836122cf565b9190505550610fff601454600d805461147c906121ab565b61015f811015801561171a575061028a8111155b1561174d57605a601554106116b6576069601454106116de5760356016541061168e5760178054906000611676836122cf565b61028b8110158015611761575061033b8111155b156117945760356016541061168e576069601454106116de57605a601554106116b65760178054906000611676836122cf565b61033c81101580156117a857506103e88111155b15610fff576034601754106117db576069601454106116de57605a601554106116b6576016805490600061169e836122cf565b60178054906000611676836122cf565b6117f6848484611187565b61180284848484611a22565b610e055760405162461bcd60e51b81526004016105da9061235c565b60606118298261105c565b600061184060408051602081019091526000815290565b90506000815111611860576040518060200160405280600081525061188b565b8061186a84611b23565b60405160200161187b9291906122e8565b6040516020818303038152906040525b9392505050565b6001811115610e05576001600160a01b038416156118d8576001600160a01b038416600090815260036020526040812080548392906118d29084906123ae565b90915550505b6001600160a01b03831615610e05576001600160a01b0383166000908152600360205260408120805483929061190f9084906123c1565b909155505050505050565b60008061192784846123ae565b905060004233601d546040516020016119659392919092835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b60408051601f198184030181529190528051602090910120601d8054919250600061198f836122cf565b909155508590506119a083836123d4565b6119aa91906123c1565b95945050505050565b6000816119bf84611b23565b6040516020016119d09291906123f6565b60405160208183030381529060405290506119fc33600a6000015460016119f791906123c1565b611bb6565b600a54611a1490611a0e9060016123c1565b82611d4f565b610805600a80546001019055565b60006001600160a01b0384163b15611b1857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a66903390899088908890600401612435565b6020604051808303816000875af1925050508015611aa1575060408051601f3d908101601f19168201909252611a9e91810190612472565b60015b611afe573d808015611acf576040519150601f19603f3d011682016040523d82523d6000602084013e611ad4565b606091505b508051600003611af65760405162461bcd60e51b81526004016105da9061235c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610f13565b506001949350505050565b60606000611b3083611de2565b600101905060008167ffffffffffffffff811115611b5057611b50612042565b6040519080825280601f01601f191660200182016040528015611b7a576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611b8457509392505050565b6001600160a01b038216611c0c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105da565b6000818152600260205260409020546001600160a01b031615611c715760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105da565b611c7f600083836001611892565b6000818152600260205260409020546001600160a01b031615611ce45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105da565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600260205260409020546001600160a01b0316611dca5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016105da565b600082815260066020526040902061080582826124dd565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611e215772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611e4d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611e6b57662386f26fc10000830492506010015b6305f5e1008310611e83576305f5e100830492506008015b6127108310611e9757612710830492506004015b60648310611ea9576064830492506002015b600a831061059f5760010192915050565b6001600160e01b031981168114610fff57600080fd5b600060208284031215611ee257600080fd5b813561188b81611eba565b80356001600160a01b0381168114611f0457600080fd5b919050565b600060208284031215611f1b57600080fd5b61188b82611eed565b60005b83811015611f3f578181015183820152602001611f27565b50506000910152565b60008151808452611f60816020860160208601611f24565b601f01601f19169290920160200192915050565b60208152600061188b6020830184611f48565b600060208284031215611f9957600080fd5b5035919050565b60008060408385031215611fb357600080fd5b611fbc83611eed565b946020939093013593505050565b600080600060608486031215611fdf57600080fd5b611fe884611eed565b9250611ff660208501611eed565b9150604084013590509250925092565b6000806040838503121561201957600080fd5b61202283611eed565b91506020830135801515811461203757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561206e57600080fd5b61207785611eed565b935061208560208601611eed565b925060408501359150606085013567ffffffffffffffff808211156120a957600080fd5b818701915087601f8301126120bd57600080fd5b8135818111156120cf576120cf612042565b604051601f8201601f19908116603f011681019083821181831017156120f7576120f7612042565b816040528281528a602084870101111561211057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561214757600080fd5b61215083611eed565b915061215e60208401611eed565b90509250929050565b60208082526024908201527f66726565206d696e742077686974656c697374696e672070686173652069732060408201526337bb32b960e11b606082015260800190565b600181811c908216806121bf57607f821691505b6020821081036121df57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526023908201527f707265206d696e742077686974656c697374696e67207068617365206973206f6040820152623b32b960e91b606082015260800190565b60208082526024908201527f596f7520617265206e6f742077686974656c697374656420666f7220707265206040820152631b5a5b9d60e21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600182016122e1576122e16122b9565b5060010190565b600083516122fa818460208801611f24565b83519083019061230e818360208801611f24565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8181038181111561059f5761059f6122b9565b8082018082111561059f5761059f6122b9565b6000826123f157634e487b7160e01b600052601260045260246000fd5b500690565b60008351612408818460208801611f24565b83519083019061241c818360208801611f24565b64173539b7b760d91b9101908152600501949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061246890830184611f48565b9695505050505050565b60006020828403121561248457600080fd5b815161188b81611eba565b601f82111561080557600081815260208120601f850160051c810160208610156124b65750805b601f850160051c820191505b818110156124d5578281556001016124c2565b505050505050565b815167ffffffffffffffff8111156124f7576124f7612042565b61250b8161250584546121ab565b8461248f565b602080601f83116001811461254057600084156125285750858301515b600019600386901b1c1916600185901b1785556124d5565b600085815260208120601f198616915b8281101561256f57888601518255948401946001909101908401612550565b508582101561258d5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220d966121f7de202e0f96cf37484997f0a379d91bb8861f1da444b1b8ab0ed18f064736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH8 0xDE0B6B3A7640000 PUSH1 0x1B SSTORE PUSH8 0x4563918244F40000 PUSH1 0x1C SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2BE5 CODESIZE SUB DUP1 PUSH3 0x2BE5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x4C SWAP2 PUSH3 0x374 JUMP JUMPDEST DUP3 DUP3 PUSH1 0x0 PUSH3 0x5C DUP4 DUP3 PUSH3 0x520 JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x6B DUP3 DUP3 PUSH3 0x520 JUMP JUMPDEST POP POP POP PUSH3 0x88 PUSH3 0x82 PUSH3 0xC0 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xC4 JUMP JUMPDEST PUSH3 0x93 DUP2 PUSH3 0x116 JUMP JUMPDEST POP POP PUSH1 0x1A DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1D SSTORE PUSH1 0x18 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH3 0x602 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x120 PUSH3 0x23D JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x136 JUMPI PUSH3 0x136 PUSH3 0x5EC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xB SWAP1 DUP2 PUSH3 0x14E SWAP2 SWAP1 PUSH3 0x520 JUMP JUMPDEST POP DUP1 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH3 0x165 JUMPI PUSH3 0x165 PUSH3 0x5EC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC SWAP1 DUP2 PUSH3 0x17D SWAP2 SWAP1 PUSH3 0x520 JUMP JUMPDEST POP DUP1 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH3 0x194 JUMPI PUSH3 0x194 PUSH3 0x5EC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xD SWAP1 DUP2 PUSH3 0x1AC SWAP2 SWAP1 PUSH3 0x520 JUMP JUMPDEST POP DUP1 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH3 0x1C3 JUMPI PUSH3 0x1C3 PUSH3 0x5EC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xE SWAP1 DUP2 PUSH3 0x1DB SWAP2 SWAP1 PUSH3 0x520 JUMP JUMPDEST POP DUP1 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH3 0x1F2 JUMPI PUSH3 0x1F2 PUSH3 0x5EC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF SWAP1 DUP2 PUSH3 0x20A SWAP2 SWAP1 PUSH3 0x520 JUMP JUMPDEST POP DUP1 PUSH1 0x5 DUP2 MLOAD DUP2 LT PUSH3 0x221 JUMPI PUSH3 0x221 PUSH3 0x5EC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x10 SWAP1 DUP2 PUSH3 0x239 SWAP2 SWAP1 PUSH3 0x520 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x29C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x2DF JUMPI PUSH3 0x2DF PUSH3 0x29E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x315 JUMPI PUSH3 0x315 PUSH3 0x29E JUMP JUMPDEST PUSH1 0x20 PUSH3 0x32B PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH3 0x2B4 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP6 DUP3 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x360 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP3 DUP3 ADD DUP5 ADD MSTORE DUP3 ADD PUSH3 0x343 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 DUP2 ADD SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3B0 DUP8 DUP4 DUP9 ADD PUSH3 0x2E7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 SWAP2 POP DUP2 DUP7 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3D6 DUP9 DUP3 DUP10 ADD PUSH3 0x2E7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x3EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH3 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x413 JUMPI PUSH3 0x413 PUSH3 0x29E JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH3 0x424 DUP6 DUP3 ADD PUSH3 0x2B4 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP3 DUP2 ADD DUP6 ADD SWAP2 DUP6 DUP2 ADD SWAP1 DUP12 DUP5 GT ISZERO PUSH3 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 DUP6 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH3 0x480 JUMPI DUP3 MLOAD DUP7 DUP2 GT ISZERO PUSH3 0x45F JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH3 0x46F DUP14 DUP10 DUP4 DUP10 ADD ADD PUSH3 0x2E7 JUMP JUMPDEST DUP4 MSTORE POP SWAP2 DUP7 ADD SWAP2 SWAP1 DUP7 ADD SWAP1 PUSH3 0x445 JUMP JUMPDEST DUP1 SWAP8 POP POP POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x4A6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x4C7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x51B JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x4F6 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x517 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x502 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x53C JUMPI PUSH3 0x53C PUSH3 0x29E JUMP JUMPDEST PUSH3 0x554 DUP2 PUSH3 0x54D DUP5 SLOAD PUSH3 0x491 JUMP JUMPDEST DUP5 PUSH3 0x4CD JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x58C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x573 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x517 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x5BD JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x59C JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x5DC JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x25D3 DUP1 PUSH3 0x612 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x853828B6 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xB4D93B07 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD5A02DFA GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD5A02DFA EQ PUSH2 0x4DF JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4F4 JUMPI DUP1 PUSH4 0xED5E57B8 EQ PUSH2 0x514 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB4D93B07 EQ PUSH2 0x481 JUMPI DUP1 PUSH4 0xB69EF8A8 EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x4BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9CC11D02 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x9CC11D02 EQ PUSH2 0x428 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0xA2309FF8 EQ PUSH2 0x462 JUMPI DUP1 PUSH4 0xAF2A9190 EQ PUSH2 0x479 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x853828B6 EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x8D0A284B EQ PUSH2 0x3DE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3F5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x207D95A5 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x6352211E GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0x65F9C656 EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x207D95A5 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x53A6CEF5 EQ PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x182EA932 EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0x1F69F030 EQ PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x4BAFFC7 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x234 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH2 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x553 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x22D CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x5A5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x63C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x209 SWAP2 SWAP1 PUSH2 0x1F74 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x276 PUSH2 0x271 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F87 JUMP JUMPDEST PUSH2 0x6CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x209 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA0 JUMP JUMPDEST PUSH2 0x6F5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x2C5 SWAP1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x209 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH1 0x1C SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x80A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x319 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FCA JUMP JUMPDEST PUSH2 0x84C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x339 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FCA JUMP JUMPDEST PUSH2 0x87D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x898 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x276 PUSH2 0x379 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F87 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH1 0x1B SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x97B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0xA01 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0xA15 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH2 0x2C5 SWAP1 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x276 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0xA6D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1A SLOAD PUSH2 0x1FD SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0x2006 JUMP JUMPDEST PUSH2 0xA7C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x2C5 SWAP1 DUP2 JUMP JUMPDEST PUSH2 0x232 PUSH2 0xA87 JUMP JUMPDEST PUSH2 0x232 PUSH2 0xC3D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH1 0x19 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x4BA CALLDATASIZE PUSH1 0x4 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0xDD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x4DA CALLDATASIZE PUSH1 0x4 PUSH2 0x1F87 JUMP JUMPDEST PUSH2 0xE0B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0xF1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH2 0x50F CALLDATASIZE PUSH1 0x4 PUSH2 0x2134 JUMP JUMPDEST PUSH2 0xF5B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1A SLOAD PUSH2 0x1FD SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x584 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x59F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5AD PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0xFF PUSH2 0x100 SWAP1 SWAP2 DIV AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x5E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2167 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xFE9489A95AF8142951AE7FE3795B77B8E0E0E1B7411049C82CE6EC096BC7C59C SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x64B SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x677 SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6C4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x699 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6C4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6A7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6D9 DUP3 PUSH2 0x105C JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x700 DUP3 PUSH2 0x91B JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x76D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x789 JUMPI POP PUSH2 0x789 DUP2 CALLER PUSH2 0xF5B JUMP JUMPDEST PUSH2 0x7FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x805 DUP4 DUP4 PUSH2 0x10BB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x812 PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0xFF PUSH2 0x100 SWAP1 SWAP2 DIV AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x83F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2167 JUMP JUMPDEST PUSH1 0x1A DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x856 CALLER DUP3 PUSH2 0x1129 JUMP JUMPDEST PUSH2 0x872 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x21E5 JUMP JUMPDEST PUSH2 0x805 DUP4 DUP4 DUP4 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x805 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xDD3 JUMP JUMPDEST PUSH2 0x8A0 PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x8C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2232 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x7CA3B83BD54C2E58547D3D3B7FD3C742D00DD3D413EC10BBE23232A1C0FF29B6 SWAP2 ADD PUSH2 0x631 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x59F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA09 PUSH2 0x1002 JUMP JUMPDEST PUSH2 0xA13 PUSH1 0x0 PUSH2 0x12F8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xA1D PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA31 PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xA69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x64B SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH2 0xA69 CALLER DUP4 DUP4 PUSH2 0x134A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xAB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2275 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x5 GT PUSH2 0xB24 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x596F752063616E6E6F74206D696E7420616E796D6F726520676F6C6420636170 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x73756C65 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x1B SLOAD CALLVALUE EQ PUSH2 0xB69 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x5072696365206973203235204D61746963 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x2BC LT ISZERO PUSH2 0xBC8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C6C20676F6C642063617073756C65732068617665206265656E206D696E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x1959 PUSH1 0xF2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0xBD0 PUSH2 0x1418 JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xC09 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xC18 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP2 PUSH2 0xC36 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xC6C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2275 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x2 GT PUSH2 0xCDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752063616E6E6F74206D696E7420616E796D6F7265206469616D6F6E6420 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x63617073756C65 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x1C SLOAD CALLVALUE EQ PUSH2 0xD21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x507269636520697320313330204D61746963 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x12C LT ISZERO PUSH2 0xD83 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C6C206469616D6F6E642063617073756C65732068617665206265656E206D PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1A5B9D1959 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0xD8B PUSH2 0x161F JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xDC4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xC18 PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xDDD CALLER DUP4 PUSH2 0x1129 JUMP JUMPDEST PUSH2 0xDF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x21E5 JUMP JUMPDEST PUSH2 0xE05 DUP5 DUP5 DUP5 DUP5 PUSH2 0x17EB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE16 DUP3 PUSH2 0x105C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xE2F SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE5B SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEA8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE7D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xEA8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE8B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xEC6 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xED8 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0xF0A JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xEF2 SWAP3 SWAP2 SWAP1 PUSH2 0x22E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF13 DUP5 PUSH2 0x181E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xF23 PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0xF4A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2232 JUMP JUMPDEST PUSH1 0x1A DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xF91 PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xFF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0xFFF DUP2 PUSH2 0x12F8 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA13 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x10F0 DUP3 PUSH2 0x91B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1135 DUP4 PUSH2 0x91B JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x115C JUMPI POP PUSH2 0x115C DUP2 DUP6 PUSH2 0xF5B JUMP JUMPDEST DUP1 PUSH2 0xF13 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1175 DUP5 PUSH2 0x6CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x119A DUP3 PUSH2 0x91B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2317 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1222 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x122F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1892 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1242 DUP3 PUSH2 0x91B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1268 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2317 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x13AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1426 PUSH1 0x1 PUSH1 0x64 PUSH2 0x191A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x143A JUMPI POP PUSH1 0x32 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x154F JUMPI PUSH2 0x15E PUSH1 0x11 SLOAD LT PUSH2 0x1527 JUMPI PUSH1 0xF5 PUSH1 0x12 SLOAD LT PUSH2 0x14FF JUMPI PUSH1 0x13 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1464 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0x14FF PUSH1 0x13 SLOAD PUSH1 0xD DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x14A8 SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x14F5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x14CA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x14F5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x14D8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x19B3 JUMP JUMPDEST PUSH1 0x12 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x150F DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x12 SLOAD PUSH1 0xC DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x11 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1537 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x11 SLOAD PUSH1 0xB DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x33 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x1561 JUMPI POP PUSH1 0x55 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x15A3 JUMPI PUSH1 0xF5 PUSH1 0x12 SLOAD LT PUSH2 0x14FF JUMPI PUSH2 0x15E PUSH1 0x11 SLOAD LT PUSH2 0x1527 JUMPI PUSH1 0x13 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x158B DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0x1527 PUSH1 0x13 SLOAD PUSH1 0xD DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x56 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x15B5 JUMPI POP PUSH1 0x64 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0xFFF JUMPI PUSH1 0x69 PUSH1 0x13 SLOAD LT PUSH2 0x15F7 JUMPI PUSH2 0x15E PUSH1 0x11 SLOAD LT PUSH2 0x1527 JUMPI PUSH1 0x12 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x15DF DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0x1527 PUSH1 0x12 SLOAD PUSH1 0xC DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x13 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1607 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x13 SLOAD PUSH1 0xD DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x162E PUSH1 0x1 PUSH2 0x3E8 PUSH2 0x191A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x1643 JUMPI POP PUSH2 0x15E DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x1706 JUMPI PUSH1 0x69 PUSH1 0x14 SLOAD LT PUSH2 0x16DE JUMPI PUSH1 0x5A PUSH1 0x15 SLOAD LT PUSH2 0x16B6 JUMPI PUSH1 0x35 PUSH1 0x16 SLOAD LT PUSH2 0x168E JUMPI PUSH1 0x17 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1676 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x17 SLOAD PUSH1 0x10 DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x169E DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x16 SLOAD PUSH1 0xF DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x15 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x16C6 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x15 SLOAD PUSH1 0xE DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x14 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x16EE DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x14 SLOAD PUSH1 0xD DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH2 0x15F DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x171A JUMPI POP PUSH2 0x28A DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x174D JUMPI PUSH1 0x5A PUSH1 0x15 SLOAD LT PUSH2 0x16B6 JUMPI PUSH1 0x69 PUSH1 0x14 SLOAD LT PUSH2 0x16DE JUMPI PUSH1 0x35 PUSH1 0x16 SLOAD LT PUSH2 0x168E JUMPI PUSH1 0x17 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1676 DUP4 PUSH2 0x22CF JUMP JUMPDEST PUSH2 0x28B DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x1761 JUMPI POP PUSH2 0x33B DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x1794 JUMPI PUSH1 0x35 PUSH1 0x16 SLOAD LT PUSH2 0x168E JUMPI PUSH1 0x69 PUSH1 0x14 SLOAD LT PUSH2 0x16DE JUMPI PUSH1 0x5A PUSH1 0x15 SLOAD LT PUSH2 0x16B6 JUMPI PUSH1 0x17 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1676 DUP4 PUSH2 0x22CF JUMP JUMPDEST PUSH2 0x33C DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x17A8 JUMPI POP PUSH2 0x3E8 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0xFFF JUMPI PUSH1 0x34 PUSH1 0x17 SLOAD LT PUSH2 0x17DB JUMPI PUSH1 0x69 PUSH1 0x14 SLOAD LT PUSH2 0x16DE JUMPI PUSH1 0x5A PUSH1 0x15 SLOAD LT PUSH2 0x16B6 JUMPI PUSH1 0x16 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x169E DUP4 PUSH2 0x22CF JUMP JUMPDEST PUSH1 0x17 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1676 DUP4 PUSH2 0x22CF JUMP JUMPDEST PUSH2 0x17F6 DUP5 DUP5 DUP5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x1802 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1A22 JUMP JUMPDEST PUSH2 0xE05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x235C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1829 DUP3 PUSH2 0x105C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1840 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1860 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x188B JUMP JUMPDEST DUP1 PUSH2 0x186A DUP5 PUSH2 0x1B23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x187B SWAP3 SWAP2 SWAP1 PUSH2 0x22E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xE05 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x18D8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x18D2 SWAP1 DUP5 SWAP1 PUSH2 0x23AE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0xE05 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x190F SWAP1 DUP5 SWAP1 PUSH2 0x23C1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1927 DUP5 DUP5 PUSH2 0x23AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 TIMESTAMP CALLER PUSH1 0x1D SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1965 SWAP4 SWAP3 SWAP2 SWAP1 SWAP3 DUP4 MSTORE PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x54 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x1D DUP1 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 PUSH2 0x198F DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP DUP6 SWAP1 POP PUSH2 0x19A0 DUP4 DUP4 PUSH2 0x23D4 JUMP JUMPDEST PUSH2 0x19AA SWAP2 SWAP1 PUSH2 0x23C1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x19BF DUP5 PUSH2 0x1B23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19D0 SWAP3 SWAP2 SWAP1 PUSH2 0x23F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x19FC CALLER PUSH1 0xA PUSH1 0x0 ADD SLOAD PUSH1 0x1 PUSH2 0x19F7 SWAP2 SWAP1 PUSH2 0x23C1 JUMP JUMPDEST PUSH2 0x1BB6 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x1A14 SWAP1 PUSH2 0x1A0E SWAP1 PUSH1 0x1 PUSH2 0x23C1 JUMP JUMPDEST DUP3 PUSH2 0x1D4F JUMP JUMPDEST PUSH2 0x805 PUSH1 0xA DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1B18 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1A66 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1AA1 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1A9E SWAP2 DUP2 ADD SWAP1 PUSH2 0x2472 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1AFE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1ACF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1AD4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1AF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x235C JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xF13 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1B30 DUP4 PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B50 JUMPI PUSH2 0x1B50 PUSH2 0x2042 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B7A JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1B84 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1C0C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1C71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x1C7F PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1892 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1CE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1DCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x32BC34B9BA32B73A103A37B5B2B7 PUSH1 0x91 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x805 DUP3 DUP3 PUSH2 0x24DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1E21 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1E4D JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1E6B JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1E83 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1E97 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1EA9 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x59F JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xFFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x188B DUP2 PUSH2 0x1EBA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1F04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x188B DUP3 PUSH2 0x1EED JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F3F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1F27 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1F60 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1F24 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x188B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FBC DUP4 PUSH2 0x1EED JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1FDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FE8 DUP5 PUSH2 0x1EED JUMP JUMPDEST SWAP3 POP PUSH2 0x1FF6 PUSH1 0x20 DUP6 ADD PUSH2 0x1EED JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2022 DUP4 PUSH2 0x1EED JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2037 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x206E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2077 DUP6 PUSH2 0x1EED JUMP JUMPDEST SWAP4 POP PUSH2 0x2085 PUSH1 0x20 DUP7 ADD PUSH2 0x1EED JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x20A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x20CF JUMPI PUSH2 0x20CF PUSH2 0x2042 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x20F7 JUMPI PUSH2 0x20F7 PUSH2 0x2042 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x2110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2150 DUP4 PUSH2 0x1EED JUMP JUMPDEST SWAP2 POP PUSH2 0x215E PUSH1 0x20 DUP5 ADD PUSH2 0x1EED JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x66726565206D696E742077686974656C697374696E6720706861736520697320 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x37BB32B9 PUSH1 0xE1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x21BF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x21DF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x707265206D696E742077686974656C697374696E67207068617365206973206F PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x3B32B9 PUSH1 0xE9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x596F7520617265206E6F742077686974656C697374656420666F722070726520 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1B5A5B9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x22E1 JUMPI PUSH2 0x22E1 PUSH2 0x22B9 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x22FA DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1F24 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x230E DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1F24 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x59F JUMPI PUSH2 0x59F PUSH2 0x22B9 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x59F JUMPI PUSH2 0x59F PUSH2 0x22B9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x23F1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2408 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1F24 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x241C DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1F24 JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x5 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2468 SWAP1 DUP4 ADD DUP5 PUSH2 0x1F48 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x188B DUP2 PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x805 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x24B6 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x24D5 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x24C2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24F7 JUMPI PUSH2 0x24F7 PUSH2 0x2042 JUMP JUMPDEST PUSH2 0x250B DUP2 PUSH2 0x2505 DUP5 SLOAD PUSH2 0x21AB JUMP JUMPDEST DUP5 PUSH2 0x248F JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2540 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2528 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x24D5 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x256F JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2550 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x258D JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 PUSH7 0x121F7DE202E0F9 PUSH13 0xF37484997F0A379D91BB8861F1 0xDA DIFFICULTY 0x4B SHL DUP11 0xB0 0xED XOR CREATE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"442:9764:14:-:0;;;1286:7;1263:30;;1346:7;1320:33;;1711:286;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1823:15;1840:17;1456:5:2;:13;1823:15:14;1456:5:2;:13;:::i;:::-;-1:-1:-1;1479:7:2;:17;1489:7;1479;:17;:::i;:::-;;1390:113;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;:32::i;:::-;1869:21:14::1;1880:9:::0;1869:10:::1;:21::i;:::-;-1:-1:-1::0;;1900:22:14::1;:29:::0;;-1:-1:-1;;1900:29:14::1;1925:4;1900:29;::::0;;-1:-1:-1;1900:22:14::1;1939:5;:9:::0;1958:10:::1;:32:::0;;-1:-1:-1;;;;;;1958:32:14::1;1979:10;1958:32;::::0;;442:9764;;640:96:8;719:10;;640:96::o;2433:187:0:-;2525:6;;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;2272:303:14:-;1094:13:0;:11;:13::i;:::-;2364:9:14::1;2374:1;2364:12;;;;;;;;:::i;:::-;;;;;;;2349;:27;;;;;;:::i;:::-;;2402:9;2412:1;2402:12;;;;;;;;:::i;:::-;;;;;;;2386:13;:28;;;;;;:::i;:::-;;2441:9;2451:1;2441:12;;;;;;;;:::i;:::-;;;;;;;2424:14;:29;;;;;;:::i;:::-;;2479:9;2489:1;2479:12;;;;;;;;:::i;:::-;;;;;;;2463:13;:28;;;;;;:::i;:::-;;2518:9;2528:1;2518:12;;;;;;;;:::i;:::-;;;;;;;2501:14;:29;;;;;;:::i;:::-;;2556:9;2566:1;2556:12;;;;;;;;:::i;:::-;;;;;;;2540:13;:28;;;;;;:::i;:::-;;2272:303:::0;:::o;1359:130:0:-;1273:6;;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;5585:2:15;1414:68:0;;;5567:21:15;;;5604:18;;;5597:30;5663:34;5643:18;;;5636:62;5715:18;;1414:68:0;;;;;;;;1359:130::o;14:127:15:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:275;217:2;211:9;282:2;263:13;;-1:-1:-1;;259:27:15;247:40;;-1:-1:-1;;;;;302:34:15;;338:22;;;299:62;296:88;;;364:18;;:::i;:::-;400:2;393:22;146:275;;-1:-1:-1;146:275:15:o;426:650::-;480:5;533:3;526:4;518:6;514:17;510:27;500:55;;551:1;548;541:12;500:55;574:13;;-1:-1:-1;;;;;599:26:15;;596:52;;;628:18;;:::i;:::-;667:4;695:53;738:2;719:13;;-1:-1:-1;;715:27:15;711:36;;695:53;:::i;:::-;773:2;764:7;757:19;817:3;812:2;807;799:6;795:15;791:24;788:33;785:53;;;834:1;831;824:12;785:53;856:1;866:134;880:2;877:1;874:9;866:134;;;969:14;;;965:23;;959:30;937:15;;;933:24;;926:64;891:10;;866:134;;;-1:-1:-1;1043:1:15;1020:16;;;1016:25;;;1009:36;;;;1024:7;426:650;-1:-1:-1;;;426:650:15:o;1081:1576::-;1224:6;1232;1240;1293:2;1281:9;1272:7;1268:23;1264:32;1261:52;;;1309:1;1306;1299:12;1261:52;1336:16;;-1:-1:-1;;;;;1401:14:15;;;1398:34;;;1428:1;1425;1418:12;1398:34;1451:61;1504:7;1495:6;1484:9;1480:22;1451:61;:::i;:::-;1441:71;;1531:2;1521:12;;1579:2;1568:9;1564:18;1558:25;1608:2;1598:8;1595:16;1592:36;;;1624:1;1621;1614:12;1592:36;1647:63;1702:7;1691:8;1680:9;1676:24;1647:63;:::i;:::-;1637:73;;;1756:2;1745:9;1741:18;1735:25;1785:2;1775:8;1772:16;1769:36;;;1801:1;1798;1791:12;1769:36;1824:24;;1879:4;1871:13;;1867:27;-1:-1:-1;1857:55:15;;1908:1;1905;1898:12;1857:55;1937:2;1931:9;1959:2;1955;1952:10;1949:36;;;1965:18;;:::i;:::-;2011:2;2008:1;2004:10;2034:28;2058:2;2054;2050:11;2034:28;:::i;:::-;2096:15;;;2166:11;;;2162:20;;;2127:12;;;;2194:19;;;2191:39;;;2226:1;2223;2216:12;2191:39;2258:2;2254;2250:11;2239:22;;2270:357;2286:6;2281:3;2278:15;2270:357;;;2365:3;2359:10;2401:2;2388:11;2385:19;2382:109;;;2445:1;2474:2;2470;2463:14;2382:109;2516:68;2576:7;2571:2;2557:11;2553:2;2549:20;2545:29;2516:68;:::i;:::-;2504:81;;-1:-1:-1;2303:12:15;;;;2605;;;;2270:357;;;2646:5;2636:15;;;;;;;;;1081:1576;;;;;:::o;2662:380::-;2741:1;2737:12;;;;2784;;;2805:61;;2859:4;2851:6;2847:17;2837:27;;2805:61;2912:2;2904:6;2901:14;2881:18;2878:38;2875:161;;2958:10;2953:3;2949:20;2946:1;2939:31;2993:4;2990:1;2983:15;3021:4;3018:1;3011:15;2875:161;;2662:380;;;:::o;3173:545::-;3275:2;3270:3;3267:11;3264:448;;;3311:1;3336:5;3332:2;3325:17;3381:4;3377:2;3367:19;3451:2;3439:10;3435:19;3432:1;3428:27;3422:4;3418:38;3487:4;3475:10;3472:20;3469:47;;;-1:-1:-1;3510:4:15;3469:47;3565:2;3560:3;3556:12;3553:1;3549:20;3543:4;3539:31;3529:41;;3620:82;3638:2;3631:5;3628:13;3620:82;;;3683:17;;;3664:1;3653:13;3620:82;;;3624:3;;;3264:448;3173:545;;;:::o;3894:1352::-;4014:10;;-1:-1:-1;;;;;4036:30:15;;4033:56;;;4069:18;;:::i;:::-;4098:97;4188:6;4148:38;4180:4;4174:11;4148:38;:::i;:::-;4142:4;4098:97;:::i;:::-;4250:4;;4314:2;4303:14;;4331:1;4326:663;;;;5033:1;5050:6;5047:89;;;-1:-1:-1;5102:19:15;;;5096:26;5047:89;-1:-1:-1;;3851:1:15;3847:11;;;3843:24;3839:29;3829:40;3875:1;3871:11;;;3826:57;5149:81;;4296:944;;4326:663;3120:1;3113:14;;;3157:4;3144:18;;-1:-1:-1;;4362:20:15;;;4480:236;4494:7;4491:1;4488:14;4480:236;;;4583:19;;;4577:26;4562:42;;4675:27;;;;4643:1;4631:14;;;;4510:19;;4480:236;;;4484:3;4744:6;4735:7;4732:19;4729:201;;;4805:19;;;4799:26;-1:-1:-1;;4888:1:15;4884:14;;;4900:3;4880:24;4876:37;4872:42;4857:58;4842:74;;4729:201;-1:-1:-1;;;;;4976:1:15;4960:14;;;4956:22;4943:36;;-1:-1:-1;3894:1352:15:o;5251:127::-;5312:10;5307:3;5303:20;5300:1;5293:31;5343:4;5340:1;5333:15;5367:4;5364:1;5357:15;5383:356;442:9764:14;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1110":{"entryPoint":null,"id":1110,"parameterSlots":4,"returnSlots":0},"@_approve_943":{"entryPoint":4283,"id":943,"parameterSlots":2,"returnSlots":0},"@_baseURI_380":{"entryPoint":null,"id":380,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1097":{"entryPoint":6290,"id":1097,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1051":{"entryPoint":6690,"id":1051,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":4098,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_612":{"entryPoint":null,"id":612,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_646":{"entryPoint":4393,"id":646,"parameterSlots":2,"returnSlots":1},"@_mint_767":{"entryPoint":7094,"id":767,"parameterSlots":2,"returnSlots":0},"@_msgSender_1739":{"entryPoint":null,"id":1739,"parameterSlots":0,"returnSlots":1},"@_ownerOf_594":{"entryPoint":null,"id":594,"parameterSlots":1,"returnSlots":1},"@_requireMinted_989":{"entryPoint":4188,"id":989,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_581":{"entryPoint":6123,"id":581,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_975":{"entryPoint":4938,"id":975,"parameterSlots":3,"returnSlots":0},"@_setTokenURI_1339":{"entryPoint":7503,"id":1339,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":4856,"id":111,"parameterSlots":1,"returnSlots":0},"@_transfer_919":{"entryPoint":4487,"id":919,"parameterSlots":3,"returnSlots":0},"@approve_423":{"entryPoint":1781,"id":423,"parameterSlots":2,"returnSlots":0},"@balanceOf_284":{"entryPoint":2427,"id":284,"parameterSlots":1,"returnSlots":1},"@balance_2956":{"entryPoint":null,"id":2956,"parameterSlots":0,"returnSlots":0},"@canWhitelistforFreeMint_2960":{"entryPoint":null,"id":2960,"parameterSlots":0,"returnSlots":0},"@canWhitelistforPreMint_2958":{"entryPoint":null,"id":2958,"parameterSlots":0,"returnSlots":0},"@diamondCost_2966":{"entryPoint":null,"id":2966,"parameterSlots":0,"returnSlots":0},"@diamond_3662":{"entryPoint":5663,"id":3662,"parameterSlots":0,"returnSlots":0},"@diamondsMinted_2920":{"entryPoint":null,"id":2920,"parameterSlots":0,"returnSlots":0},"@finishFreeMintListing_3186":{"entryPoint":2058,"id":3186,"parameterSlots":0,"returnSlots":0},"@finishPreMintListing_3169":{"entryPoint":3867,"id":3169,"parameterSlots":0,"returnSlots":0},"@getApproved_441":{"entryPoint":1742,"id":441,"parameterSlots":1,"returnSlots":1},"@goldCost_2963":{"entryPoint":null,"id":2963,"parameterSlots":0,"returnSlots":0},"@gold_3415":{"entryPoint":5144,"id":3415,"parameterSlots":0,"returnSlots":0},"@goldsMinted_2917":{"entryPoint":null,"id":2917,"parameterSlots":0,"returnSlots":0},"@increment_1781":{"entryPoint":null,"id":1781,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_476":{"entryPoint":3931,"id":476,"parameterSlots":2,"returnSlots":1},"@isContract_1415":{"entryPoint":null,"id":1415,"parameterSlots":1,"returnSlots":1},"@log10_2736":{"entryPoint":7650,"id":2736,"parameterSlots":1,"returnSlots":1},"@name_322":{"entryPoint":1596,"id":322,"parameterSlots":0,"returnSlots":1},"@ownerOf_312":{"entryPoint":2331,"id":312,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@preMintDiamond_3772":{"entryPoint":3133,"id":3772,"parameterSlots":0,"returnSlots":0},"@preMintGold_3717":{"entryPoint":2695,"id":3717,"parameterSlots":0,"returnSlots":0},"@random_3228":{"entryPoint":6426,"id":3228,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":2561,"id":68,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_522":{"entryPoint":2173,"id":522,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_552":{"entryPoint":3539,"id":552,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_458":{"entryPoint":2684,"id":458,"parameterSlots":2,"returnSlots":0},"@startMint_3272":{"entryPoint":6579,"id":3272,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2021":{"entryPoint":null,"id":2021,"parameterSlots":1,"returnSlots":1},"@supportsInterface_260":{"entryPoint":1363,"id":260,"parameterSlots":1,"returnSlots":1},"@symbol_332":{"entryPoint":2669,"id":332,"parameterSlots":0,"returnSlots":1},"@toString_1881":{"entryPoint":6947,"id":1881,"parameterSlots":1,"returnSlots":1},"@tokenURI_1317":{"entryPoint":3595,"id":1317,"parameterSlots":1,"returnSlots":1},"@tokenURI_371":{"entryPoint":6174,"id":371,"parameterSlots":1,"returnSlots":1},"@totalMinted_2923":{"entryPoint":null,"id":2923,"parameterSlots":0,"returnSlots":0},"@transferFrom_503":{"entryPoint":2124,"id":503,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":3977,"id":91,"parameterSlots":1,"returnSlots":0},"@whitelistForFreeMint_3148":{"entryPoint":1445,"id":3148,"parameterSlots":1,"returnSlots":0},"@whitelistForPreMint_3123":{"entryPoint":2200,"id":3123,"parameterSlots":1,"returnSlots":0},"@withdrawAll_3795":{"entryPoint":2581,"id":3795,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":7917,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":7945,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8500,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":8138,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":8280,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":8198,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":8096,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":7888,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":9330,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":8071,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":8008,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8936,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":9206,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9269,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8052,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_02261fef6fc86d5ea740dcc068758508c34e2c356556c9a70f466de3329527c9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8677,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_13027401c902a3bca868c4078e20a0facaa89845605dd7ed02f94d3aec7a5915__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8821,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9052,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8983,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_387a2ec17cf8a3c128877a652e199fea2dd70226e334a7ed4ed2ccd330f51603__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_41d5e8a11c119646a967e8a499a29ddbe8936f4a0eaee9b4890776bfb5826c45__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4510e3361cf16f44a5a6d65cfde280225c4992dd4e34ba6900a1b9bdb004ba3a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_804f369a9d8a88ec35b1d4ba0eaec6c74b1ec87abddc20645e130a9940f47b69__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c5f112810d57218b6ed7ee19a4f6428b1e6680d1b4e819c1ad1135ace5c93b42__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8551,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cf8e1c54e6c85ca6fc4805b674930d0e960eeceb9b59caa29f57fe35457c26b8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8754,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f507a309cc38ca0b5a69c062b15ee707603dd3beb573417d25389244396b4859__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9153,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9134,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":9359,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":9437,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":7972,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":8619,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":8911,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":9172,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":8889,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8258,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":7866,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:19547:15","statements":[{"nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:15","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:15"},"nodeType":"YulFunctionCall","src":"125:12:15"},"nodeType":"YulExpressionStatement","src":"125:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:15","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:15"},"nodeType":"YulFunctionCall","src":"99:20:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:15"},"nodeType":"YulFunctionCall","src":"88:32:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:15"},"nodeType":"YulFunctionCall","src":"78:43:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:15"},"nodeType":"YulFunctionCall","src":"71:51:15"},"nodeType":"YulIf","src":"68:71:15"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:15","type":""}],"src":"14:131:15"},{"body":{"nodeType":"YulBlock","src":"219:176:15","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:15"},"nodeType":"YulFunctionCall","src":"267:12:15"},"nodeType":"YulExpressionStatement","src":"267:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:15"},"nodeType":"YulFunctionCall","src":"236:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:15"},"nodeType":"YulFunctionCall","src":"232:32:15"},"nodeType":"YulIf","src":"229:52:15"},{"nodeType":"YulVariableDeclaration","src":"290:36:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:15"},"nodeType":"YulFunctionCall","src":"303:23:15"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:15","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:15"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:15"},"nodeType":"YulFunctionCall","src":"335:30:15"},"nodeType":"YulExpressionStatement","src":"335:30:15"},{"nodeType":"YulAssignment","src":"374:15:15","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:15"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:15","type":""}],"src":"150:245:15"},{"body":{"nodeType":"YulBlock","src":"495:92:15","statements":[{"nodeType":"YulAssignment","src":"505:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:15"},"nodeType":"YulFunctionCall","src":"513:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:15"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:15"},"nodeType":"YulFunctionCall","src":"565:14:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:15"},"nodeType":"YulFunctionCall","src":"558:22:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:15"},"nodeType":"YulFunctionCall","src":"540:41:15"},"nodeType":"YulExpressionStatement","src":"540:41:15"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:15","type":""}],"src":"400:187:15"},{"body":{"nodeType":"YulBlock","src":"641:124:15","statements":[{"nodeType":"YulAssignment","src":"651:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"673:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"660:12:15"},"nodeType":"YulFunctionCall","src":"660:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"651:5:15"}]},{"body":{"nodeType":"YulBlock","src":"743:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"752:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"755:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"745:6:15"},"nodeType":"YulFunctionCall","src":"745:12:15"},"nodeType":"YulExpressionStatement","src":"745:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"702:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"713:5:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"728:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"733:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"724:3:15"},"nodeType":"YulFunctionCall","src":"724:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"737:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"720:3:15"},"nodeType":"YulFunctionCall","src":"720:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"709:3:15"},"nodeType":"YulFunctionCall","src":"709:31:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"699:2:15"},"nodeType":"YulFunctionCall","src":"699:42:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"692:6:15"},"nodeType":"YulFunctionCall","src":"692:50:15"},"nodeType":"YulIf","src":"689:70:15"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"620:6:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"631:5:15","type":""}],"src":"592:173:15"},{"body":{"nodeType":"YulBlock","src":"840:116:15","statements":[{"body":{"nodeType":"YulBlock","src":"886:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"895:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"898:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"888:6:15"},"nodeType":"YulFunctionCall","src":"888:12:15"},"nodeType":"YulExpressionStatement","src":"888:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"861:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"870:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"857:3:15"},"nodeType":"YulFunctionCall","src":"857:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"882:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"853:3:15"},"nodeType":"YulFunctionCall","src":"853:32:15"},"nodeType":"YulIf","src":"850:52:15"},{"nodeType":"YulAssignment","src":"911:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"940:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"921:18:15"},"nodeType":"YulFunctionCall","src":"921:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"911:6:15"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"806:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"817:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"829:6:15","type":""}],"src":"770:186:15"},{"body":{"nodeType":"YulBlock","src":"1027:184:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1037:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"1046:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1041:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1106:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1131:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"1136:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1127:3:15"},"nodeType":"YulFunctionCall","src":"1127:11:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1150:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"1155:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1146:3:15"},"nodeType":"YulFunctionCall","src":"1146:11:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1140:5:15"},"nodeType":"YulFunctionCall","src":"1140:18:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1120:6:15"},"nodeType":"YulFunctionCall","src":"1120:39:15"},"nodeType":"YulExpressionStatement","src":"1120:39:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1067:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"1070:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1064:2:15"},"nodeType":"YulFunctionCall","src":"1064:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1078:19:15","statements":[{"nodeType":"YulAssignment","src":"1080:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1089:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"1092:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1085:3:15"},"nodeType":"YulFunctionCall","src":"1085:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1080:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"1060:3:15","statements":[]},"src":"1056:113:15"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1189:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"1194:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1185:3:15"},"nodeType":"YulFunctionCall","src":"1185:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"1203:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1178:6:15"},"nodeType":"YulFunctionCall","src":"1178:27:15"},"nodeType":"YulExpressionStatement","src":"1178:27:15"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1005:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1010:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"1015:6:15","type":""}],"src":"961:250:15"},{"body":{"nodeType":"YulBlock","src":"1266:221:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1276:26:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1296:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1290:5:15"},"nodeType":"YulFunctionCall","src":"1290:12:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1280:6:15","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1318:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"1323:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1311:6:15"},"nodeType":"YulFunctionCall","src":"1311:19:15"},"nodeType":"YulExpressionStatement","src":"1311:19:15"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1378:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"1385:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1374:3:15"},"nodeType":"YulFunctionCall","src":"1374:16:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1396:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"1401:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1392:3:15"},"nodeType":"YulFunctionCall","src":"1392:14:15"},{"name":"length","nodeType":"YulIdentifier","src":"1408:6:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1339:34:15"},"nodeType":"YulFunctionCall","src":"1339:76:15"},"nodeType":"YulExpressionStatement","src":"1339:76:15"},{"nodeType":"YulAssignment","src":"1424:57:15","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1439:3:15"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1452:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1448:3:15"},"nodeType":"YulFunctionCall","src":"1448:15:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1469:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1465:3:15"},"nodeType":"YulFunctionCall","src":"1465:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1444:3:15"},"nodeType":"YulFunctionCall","src":"1444:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1435:3:15"},"nodeType":"YulFunctionCall","src":"1435:39:15"},{"kind":"number","nodeType":"YulLiteral","src":"1476:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1431:3:15"},"nodeType":"YulFunctionCall","src":"1431:50:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1424:3:15"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1243:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1250:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1258:3:15","type":""}],"src":"1216:271:15"},{"body":{"nodeType":"YulBlock","src":"1613:99:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1630:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1641:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1623:6:15"},"nodeType":"YulFunctionCall","src":"1623:21:15"},"nodeType":"YulExpressionStatement","src":"1623:21:15"},{"nodeType":"YulAssignment","src":"1653:53:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1679:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1691:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1702:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1687:3:15"},"nodeType":"YulFunctionCall","src":"1687:18:15"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1661:17:15"},"nodeType":"YulFunctionCall","src":"1661:45:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1653:4:15"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1582:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1593:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1604:4:15","type":""}],"src":"1492:220:15"},{"body":{"nodeType":"YulBlock","src":"1787:110:15","statements":[{"body":{"nodeType":"YulBlock","src":"1833:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1845:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1835:6:15"},"nodeType":"YulFunctionCall","src":"1835:12:15"},"nodeType":"YulExpressionStatement","src":"1835:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1808:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1817:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1804:3:15"},"nodeType":"YulFunctionCall","src":"1804:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1829:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1800:3:15"},"nodeType":"YulFunctionCall","src":"1800:32:15"},"nodeType":"YulIf","src":"1797:52:15"},{"nodeType":"YulAssignment","src":"1858:33:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1881:9:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1868:12:15"},"nodeType":"YulFunctionCall","src":"1868:23:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1858:6:15"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1753:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1764:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1776:6:15","type":""}],"src":"1717:180:15"},{"body":{"nodeType":"YulBlock","src":"2003:102:15","statements":[{"nodeType":"YulAssignment","src":"2013:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2025:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2036:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2021:3:15"},"nodeType":"YulFunctionCall","src":"2021:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2013:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2055:9:15"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2070:6:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2086:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2091:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2082:3:15"},"nodeType":"YulFunctionCall","src":"2082:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"2095:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2078:3:15"},"nodeType":"YulFunctionCall","src":"2078:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2066:3:15"},"nodeType":"YulFunctionCall","src":"2066:32:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2048:6:15"},"nodeType":"YulFunctionCall","src":"2048:51:15"},"nodeType":"YulExpressionStatement","src":"2048:51:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1972:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1983:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1994:4:15","type":""}],"src":"1902:203:15"},{"body":{"nodeType":"YulBlock","src":"2197:167:15","statements":[{"body":{"nodeType":"YulBlock","src":"2243:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2252:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2255:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2245:6:15"},"nodeType":"YulFunctionCall","src":"2245:12:15"},"nodeType":"YulExpressionStatement","src":"2245:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2218:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2227:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2214:3:15"},"nodeType":"YulFunctionCall","src":"2214:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"2239:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2210:3:15"},"nodeType":"YulFunctionCall","src":"2210:32:15"},"nodeType":"YulIf","src":"2207:52:15"},{"nodeType":"YulAssignment","src":"2268:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2297:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2278:18:15"},"nodeType":"YulFunctionCall","src":"2278:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2268:6:15"}]},{"nodeType":"YulAssignment","src":"2316:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2343:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2354:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2339:3:15"},"nodeType":"YulFunctionCall","src":"2339:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2326:12:15"},"nodeType":"YulFunctionCall","src":"2326:32:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2316:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2155:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2166:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2178:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2186:6:15","type":""}],"src":"2110:254:15"},{"body":{"nodeType":"YulBlock","src":"2470:76:15","statements":[{"nodeType":"YulAssignment","src":"2480:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2492:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2503:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2488:3:15"},"nodeType":"YulFunctionCall","src":"2488:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2480:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2522:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"2533:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2515:6:15"},"nodeType":"YulFunctionCall","src":"2515:25:15"},"nodeType":"YulExpressionStatement","src":"2515:25:15"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2439:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2450:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2461:4:15","type":""}],"src":"2369:177:15"},{"body":{"nodeType":"YulBlock","src":"2655:224:15","statements":[{"body":{"nodeType":"YulBlock","src":"2701:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2710:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2713:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2703:6:15"},"nodeType":"YulFunctionCall","src":"2703:12:15"},"nodeType":"YulExpressionStatement","src":"2703:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2676:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2685:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2672:3:15"},"nodeType":"YulFunctionCall","src":"2672:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"2697:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2668:3:15"},"nodeType":"YulFunctionCall","src":"2668:32:15"},"nodeType":"YulIf","src":"2665:52:15"},{"nodeType":"YulAssignment","src":"2726:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2755:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2736:18:15"},"nodeType":"YulFunctionCall","src":"2736:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2726:6:15"}]},{"nodeType":"YulAssignment","src":"2774:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2807:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2818:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2803:3:15"},"nodeType":"YulFunctionCall","src":"2803:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2784:18:15"},"nodeType":"YulFunctionCall","src":"2784:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2774:6:15"}]},{"nodeType":"YulAssignment","src":"2831:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2858:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2869:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2854:3:15"},"nodeType":"YulFunctionCall","src":"2854:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2841:12:15"},"nodeType":"YulFunctionCall","src":"2841:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2831:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2605:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2616:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2628:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2636:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2644:6:15","type":""}],"src":"2551:328:15"},{"body":{"nodeType":"YulBlock","src":"2968:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"3014:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3023:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3026:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3016:6:15"},"nodeType":"YulFunctionCall","src":"3016:12:15"},"nodeType":"YulExpressionStatement","src":"3016:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2989:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2998:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2985:3:15"},"nodeType":"YulFunctionCall","src":"2985:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3010:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2981:3:15"},"nodeType":"YulFunctionCall","src":"2981:32:15"},"nodeType":"YulIf","src":"2978:52:15"},{"nodeType":"YulAssignment","src":"3039:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3068:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3049:18:15"},"nodeType":"YulFunctionCall","src":"3049:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3039:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"3087:45:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3117:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3128:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3113:3:15"},"nodeType":"YulFunctionCall","src":"3113:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3100:12:15"},"nodeType":"YulFunctionCall","src":"3100:32:15"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3091:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3185:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3194:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3197:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3187:6:15"},"nodeType":"YulFunctionCall","src":"3187:12:15"},"nodeType":"YulExpressionStatement","src":"3187:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3154:5:15"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3175:5:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3168:6:15"},"nodeType":"YulFunctionCall","src":"3168:13:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3161:6:15"},"nodeType":"YulFunctionCall","src":"3161:21:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3151:2:15"},"nodeType":"YulFunctionCall","src":"3151:32:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3144:6:15"},"nodeType":"YulFunctionCall","src":"3144:40:15"},"nodeType":"YulIf","src":"3141:60:15"},{"nodeType":"YulAssignment","src":"3210:15:15","value":{"name":"value","nodeType":"YulIdentifier","src":"3220:5:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3210:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2926:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2937:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2949:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2957:6:15","type":""}],"src":"2884:347:15"},{"body":{"nodeType":"YulBlock","src":"3268:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3285:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3297:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3288:3:15"},"nodeType":"YulFunctionCall","src":"3288:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3278:6:15"},"nodeType":"YulFunctionCall","src":"3278:31:15"},"nodeType":"YulExpressionStatement","src":"3278:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3325:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3328:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3318:6:15"},"nodeType":"YulFunctionCall","src":"3318:15:15"},"nodeType":"YulExpressionStatement","src":"3318:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3349:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3352:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3342:6:15"},"nodeType":"YulFunctionCall","src":"3342:15:15"},"nodeType":"YulExpressionStatement","src":"3342:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3236:127:15"},{"body":{"nodeType":"YulBlock","src":"3498:1008:15","statements":[{"body":{"nodeType":"YulBlock","src":"3545:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3554:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3557:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3547:6:15"},"nodeType":"YulFunctionCall","src":"3547:12:15"},"nodeType":"YulExpressionStatement","src":"3547:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3519:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"3528:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3515:3:15"},"nodeType":"YulFunctionCall","src":"3515:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3540:3:15","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3511:3:15"},"nodeType":"YulFunctionCall","src":"3511:33:15"},"nodeType":"YulIf","src":"3508:53:15"},{"nodeType":"YulAssignment","src":"3570:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3599:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3580:18:15"},"nodeType":"YulFunctionCall","src":"3580:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3570:6:15"}]},{"nodeType":"YulAssignment","src":"3618:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3651:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3662:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3647:3:15"},"nodeType":"YulFunctionCall","src":"3647:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3628:18:15"},"nodeType":"YulFunctionCall","src":"3628:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3618:6:15"}]},{"nodeType":"YulAssignment","src":"3675:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3702:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3713:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3698:3:15"},"nodeType":"YulFunctionCall","src":"3698:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3685:12:15"},"nodeType":"YulFunctionCall","src":"3685:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3675:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"3726:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3757:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3768:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3753:3:15"},"nodeType":"YulFunctionCall","src":"3753:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3740:12:15"},"nodeType":"YulFunctionCall","src":"3740:32:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3730:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3781:28:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3791:18:15","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3785:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3836:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3845:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3848:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3838:6:15"},"nodeType":"YulFunctionCall","src":"3838:12:15"},"nodeType":"YulExpressionStatement","src":"3838:12:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3824:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"3832:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3821:2:15"},"nodeType":"YulFunctionCall","src":"3821:14:15"},"nodeType":"YulIf","src":"3818:34:15"},{"nodeType":"YulVariableDeclaration","src":"3861:32:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3875:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3886:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3871:3:15"},"nodeType":"YulFunctionCall","src":"3871:22:15"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3865:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3941:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3950:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3953:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3943:6:15"},"nodeType":"YulFunctionCall","src":"3943:12:15"},"nodeType":"YulExpressionStatement","src":"3943:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3920:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3916:3:15"},"nodeType":"YulFunctionCall","src":"3916:13:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3931:7:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3912:3:15"},"nodeType":"YulFunctionCall","src":"3912:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3905:6:15"},"nodeType":"YulFunctionCall","src":"3905:35:15"},"nodeType":"YulIf","src":"3902:55:15"},{"nodeType":"YulVariableDeclaration","src":"3966:26:15","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3989:2:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3976:12:15"},"nodeType":"YulFunctionCall","src":"3976:16:15"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3970:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4015:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4017:16:15"},"nodeType":"YulFunctionCall","src":"4017:18:15"},"nodeType":"YulExpressionStatement","src":"4017:18:15"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4007:2:15"},{"name":"_1","nodeType":"YulIdentifier","src":"4011:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4004:2:15"},"nodeType":"YulFunctionCall","src":"4004:10:15"},"nodeType":"YulIf","src":"4001:36:15"},{"nodeType":"YulVariableDeclaration","src":"4046:17:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4060:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4056:3:15"},"nodeType":"YulFunctionCall","src":"4056:7:15"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4050:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4072:23:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4092:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4086:5:15"},"nodeType":"YulFunctionCall","src":"4086:9:15"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4076:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4104:71:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4126:6:15"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4150:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"4154:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4146:3:15"},"nodeType":"YulFunctionCall","src":"4146:13:15"},{"name":"_4","nodeType":"YulIdentifier","src":"4161:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4142:3:15"},"nodeType":"YulFunctionCall","src":"4142:22:15"},{"kind":"number","nodeType":"YulLiteral","src":"4166:2:15","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4138:3:15"},"nodeType":"YulFunctionCall","src":"4138:31:15"},{"name":"_4","nodeType":"YulIdentifier","src":"4171:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4134:3:15"},"nodeType":"YulFunctionCall","src":"4134:40:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4122:3:15"},"nodeType":"YulFunctionCall","src":"4122:53:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4108:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4234:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4236:16:15"},"nodeType":"YulFunctionCall","src":"4236:18:15"},"nodeType":"YulExpressionStatement","src":"4236:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4193:10:15"},{"name":"_1","nodeType":"YulIdentifier","src":"4205:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4190:2:15"},"nodeType":"YulFunctionCall","src":"4190:18:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4213:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4225:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4210:2:15"},"nodeType":"YulFunctionCall","src":"4210:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4187:2:15"},"nodeType":"YulFunctionCall","src":"4187:46:15"},"nodeType":"YulIf","src":"4184:72:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4272:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4276:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4265:6:15"},"nodeType":"YulFunctionCall","src":"4265:22:15"},"nodeType":"YulExpressionStatement","src":"4265:22:15"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4303:6:15"},{"name":"_3","nodeType":"YulIdentifier","src":"4311:2:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4296:6:15"},"nodeType":"YulFunctionCall","src":"4296:18:15"},"nodeType":"YulExpressionStatement","src":"4296:18:15"},{"body":{"nodeType":"YulBlock","src":"4360:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4369:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4372:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4362:6:15"},"nodeType":"YulFunctionCall","src":"4362:12:15"},"nodeType":"YulExpressionStatement","src":"4362:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4337:2:15"},{"name":"_3","nodeType":"YulIdentifier","src":"4341:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4333:3:15"},"nodeType":"YulFunctionCall","src":"4333:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"4346:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4329:3:15"},"nodeType":"YulFunctionCall","src":"4329:20:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4351:7:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4326:2:15"},"nodeType":"YulFunctionCall","src":"4326:33:15"},"nodeType":"YulIf","src":"4323:53:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4402:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4410:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4398:3:15"},"nodeType":"YulFunctionCall","src":"4398:15:15"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4419:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4415:3:15"},"nodeType":"YulFunctionCall","src":"4415:11:15"},{"name":"_3","nodeType":"YulIdentifier","src":"4428:2:15"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4385:12:15"},"nodeType":"YulFunctionCall","src":"4385:46:15"},"nodeType":"YulExpressionStatement","src":"4385:46:15"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4455:6:15"},{"name":"_3","nodeType":"YulIdentifier","src":"4463:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4451:3:15"},"nodeType":"YulFunctionCall","src":"4451:15:15"},{"kind":"number","nodeType":"YulLiteral","src":"4468:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4447:3:15"},"nodeType":"YulFunctionCall","src":"4447:24:15"},{"kind":"number","nodeType":"YulLiteral","src":"4473:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4440:6:15"},"nodeType":"YulFunctionCall","src":"4440:35:15"},"nodeType":"YulExpressionStatement","src":"4440:35:15"},{"nodeType":"YulAssignment","src":"4484:16:15","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4494:6:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4484:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3440:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3451:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3463:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3471:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3479:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3487:6:15","type":""}],"src":"3368:1138:15"},{"body":{"nodeType":"YulBlock","src":"4598:173:15","statements":[{"body":{"nodeType":"YulBlock","src":"4644:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4653:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4656:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4646:6:15"},"nodeType":"YulFunctionCall","src":"4646:12:15"},"nodeType":"YulExpressionStatement","src":"4646:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4619:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4628:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4615:3:15"},"nodeType":"YulFunctionCall","src":"4615:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4640:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4611:3:15"},"nodeType":"YulFunctionCall","src":"4611:32:15"},"nodeType":"YulIf","src":"4608:52:15"},{"nodeType":"YulAssignment","src":"4669:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4698:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4679:18:15"},"nodeType":"YulFunctionCall","src":"4679:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4669:6:15"}]},{"nodeType":"YulAssignment","src":"4717:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4750:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4761:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4746:3:15"},"nodeType":"YulFunctionCall","src":"4746:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4727:18:15"},"nodeType":"YulFunctionCall","src":"4727:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4717:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4556:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4567:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4579:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4587:6:15","type":""}],"src":"4511:260:15"},{"body":{"nodeType":"YulBlock","src":"4950:226:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4967:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4978:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4960:6:15"},"nodeType":"YulFunctionCall","src":"4960:21:15"},"nodeType":"YulExpressionStatement","src":"4960:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5001:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5012:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4997:3:15"},"nodeType":"YulFunctionCall","src":"4997:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"5017:2:15","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4990:6:15"},"nodeType":"YulFunctionCall","src":"4990:30:15"},"nodeType":"YulExpressionStatement","src":"4990:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5040:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5051:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5036:3:15"},"nodeType":"YulFunctionCall","src":"5036:18:15"},{"hexValue":"66726565206d696e742077686974656c697374696e6720706861736520697320","kind":"string","nodeType":"YulLiteral","src":"5056:34:15","type":"","value":"free mint whitelisting phase is "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5029:6:15"},"nodeType":"YulFunctionCall","src":"5029:62:15"},"nodeType":"YulExpressionStatement","src":"5029:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5111:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5122:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5107:3:15"},"nodeType":"YulFunctionCall","src":"5107:18:15"},{"hexValue":"6f766572","kind":"string","nodeType":"YulLiteral","src":"5127:6:15","type":"","value":"over"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5100:6:15"},"nodeType":"YulFunctionCall","src":"5100:34:15"},"nodeType":"YulExpressionStatement","src":"5100:34:15"},{"nodeType":"YulAssignment","src":"5143:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5155:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5166:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5151:3:15"},"nodeType":"YulFunctionCall","src":"5151:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5143:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c5f112810d57218b6ed7ee19a4f6428b1e6680d1b4e819c1ad1135ace5c93b42__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4927:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4941:4:15","type":""}],"src":"4776:400:15"},{"body":{"nodeType":"YulBlock","src":"5236:325:15","statements":[{"nodeType":"YulAssignment","src":"5246:22:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5260:1:15","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"5263:4:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5256:3:15"},"nodeType":"YulFunctionCall","src":"5256:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5246:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"5277:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5307:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"5313:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5303:3:15"},"nodeType":"YulFunctionCall","src":"5303:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5281:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"5354:31:15","statements":[{"nodeType":"YulAssignment","src":"5356:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5370:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"5378:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5366:3:15"},"nodeType":"YulFunctionCall","src":"5366:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5356:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5334:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5327:6:15"},"nodeType":"YulFunctionCall","src":"5327:26:15"},"nodeType":"YulIf","src":"5324:61:15"},{"body":{"nodeType":"YulBlock","src":"5444:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5465:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5472:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5477:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5468:3:15"},"nodeType":"YulFunctionCall","src":"5468:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5458:6:15"},"nodeType":"YulFunctionCall","src":"5458:31:15"},"nodeType":"YulExpressionStatement","src":"5458:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5509:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5512:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5502:6:15"},"nodeType":"YulFunctionCall","src":"5502:15:15"},"nodeType":"YulExpressionStatement","src":"5502:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5537:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5540:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5530:6:15"},"nodeType":"YulFunctionCall","src":"5530:15:15"},"nodeType":"YulExpressionStatement","src":"5530:15:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5400:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5423:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"5431:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5420:2:15"},"nodeType":"YulFunctionCall","src":"5420:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5397:2:15"},"nodeType":"YulFunctionCall","src":"5397:38:15"},"nodeType":"YulIf","src":"5394:161:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5216:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5225:6:15","type":""}],"src":"5181:380:15"},{"body":{"nodeType":"YulBlock","src":"5740:223:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5757:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5768:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5750:6:15"},"nodeType":"YulFunctionCall","src":"5750:21:15"},"nodeType":"YulExpressionStatement","src":"5750:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5791:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5802:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5787:3:15"},"nodeType":"YulFunctionCall","src":"5787:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"5807:2:15","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5780:6:15"},"nodeType":"YulFunctionCall","src":"5780:30:15"},"nodeType":"YulExpressionStatement","src":"5780:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5830:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5841:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5826:3:15"},"nodeType":"YulFunctionCall","src":"5826:18:15"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5846:34:15","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5819:6:15"},"nodeType":"YulFunctionCall","src":"5819:62:15"},"nodeType":"YulExpressionStatement","src":"5819:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5901:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5912:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5897:3:15"},"nodeType":"YulFunctionCall","src":"5897:18:15"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5917:3:15","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5890:6:15"},"nodeType":"YulFunctionCall","src":"5890:31:15"},"nodeType":"YulExpressionStatement","src":"5890:31:15"},{"nodeType":"YulAssignment","src":"5930:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5942:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5953:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5938:3:15"},"nodeType":"YulFunctionCall","src":"5938:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5930:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5717:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5731:4:15","type":""}],"src":"5566:397:15"},{"body":{"nodeType":"YulBlock","src":"6142:251:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6159:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6170:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6152:6:15"},"nodeType":"YulFunctionCall","src":"6152:21:15"},"nodeType":"YulExpressionStatement","src":"6152:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6193:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6204:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6189:3:15"},"nodeType":"YulFunctionCall","src":"6189:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"6209:2:15","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6182:6:15"},"nodeType":"YulFunctionCall","src":"6182:30:15"},"nodeType":"YulExpressionStatement","src":"6182:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6232:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6243:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6228:3:15"},"nodeType":"YulFunctionCall","src":"6228:18:15"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"6248:34:15","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6221:6:15"},"nodeType":"YulFunctionCall","src":"6221:62:15"},"nodeType":"YulExpressionStatement","src":"6221:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6303:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6314:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6299:3:15"},"nodeType":"YulFunctionCall","src":"6299:18:15"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"6319:31:15","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6292:6:15"},"nodeType":"YulFunctionCall","src":"6292:59:15"},"nodeType":"YulExpressionStatement","src":"6292:59:15"},{"nodeType":"YulAssignment","src":"6360:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6372:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6383:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6368:3:15"},"nodeType":"YulFunctionCall","src":"6368:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6360:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6119:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6133:4:15","type":""}],"src":"5968:425:15"},{"body":{"nodeType":"YulBlock","src":"6572:235:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6589:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6600:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6582:6:15"},"nodeType":"YulFunctionCall","src":"6582:21:15"},"nodeType":"YulExpressionStatement","src":"6582:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6623:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6634:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6619:3:15"},"nodeType":"YulFunctionCall","src":"6619:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"6639:2:15","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6612:6:15"},"nodeType":"YulFunctionCall","src":"6612:30:15"},"nodeType":"YulExpressionStatement","src":"6612:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6662:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6673:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6658:3:15"},"nodeType":"YulFunctionCall","src":"6658:18:15"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"6678:34:15","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6651:6:15"},"nodeType":"YulFunctionCall","src":"6651:62:15"},"nodeType":"YulExpressionStatement","src":"6651:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6733:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6744:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6729:3:15"},"nodeType":"YulFunctionCall","src":"6729:18:15"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6749:15:15","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6722:6:15"},"nodeType":"YulFunctionCall","src":"6722:43:15"},"nodeType":"YulExpressionStatement","src":"6722:43:15"},{"nodeType":"YulAssignment","src":"6774:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6786:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6797:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6782:3:15"},"nodeType":"YulFunctionCall","src":"6782:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6774:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6549:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6563:4:15","type":""}],"src":"6398:409:15"},{"body":{"nodeType":"YulBlock","src":"6986:225:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7003:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7014:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6996:6:15"},"nodeType":"YulFunctionCall","src":"6996:21:15"},"nodeType":"YulExpressionStatement","src":"6996:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7037:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7048:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7033:3:15"},"nodeType":"YulFunctionCall","src":"7033:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"7053:2:15","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7026:6:15"},"nodeType":"YulFunctionCall","src":"7026:30:15"},"nodeType":"YulExpressionStatement","src":"7026:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7076:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7087:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7072:3:15"},"nodeType":"YulFunctionCall","src":"7072:18:15"},{"hexValue":"707265206d696e742077686974656c697374696e67207068617365206973206f","kind":"string","nodeType":"YulLiteral","src":"7092:34:15","type":"","value":"pre mint whitelisting phase is o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7065:6:15"},"nodeType":"YulFunctionCall","src":"7065:62:15"},"nodeType":"YulExpressionStatement","src":"7065:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7147:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7158:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7143:3:15"},"nodeType":"YulFunctionCall","src":"7143:18:15"},{"hexValue":"766572","kind":"string","nodeType":"YulLiteral","src":"7163:5:15","type":"","value":"ver"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7136:6:15"},"nodeType":"YulFunctionCall","src":"7136:33:15"},"nodeType":"YulExpressionStatement","src":"7136:33:15"},{"nodeType":"YulAssignment","src":"7178:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7190:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7201:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7186:3:15"},"nodeType":"YulFunctionCall","src":"7186:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7178:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_cf8e1c54e6c85ca6fc4805b674930d0e960eeceb9b59caa29f57fe35457c26b8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6963:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6977:4:15","type":""}],"src":"6812:399:15"},{"body":{"nodeType":"YulBlock","src":"7390:174:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7407:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7418:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7400:6:15"},"nodeType":"YulFunctionCall","src":"7400:21:15"},"nodeType":"YulExpressionStatement","src":"7400:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7441:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7452:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7437:3:15"},"nodeType":"YulFunctionCall","src":"7437:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"7457:2:15","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7430:6:15"},"nodeType":"YulFunctionCall","src":"7430:30:15"},"nodeType":"YulExpressionStatement","src":"7430:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7480:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7491:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7476:3:15"},"nodeType":"YulFunctionCall","src":"7476:18:15"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"7496:26:15","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7469:6:15"},"nodeType":"YulFunctionCall","src":"7469:54:15"},"nodeType":"YulExpressionStatement","src":"7469:54:15"},{"nodeType":"YulAssignment","src":"7532:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7544:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7555:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7540:3:15"},"nodeType":"YulFunctionCall","src":"7540:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7532:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7367:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7381:4:15","type":""}],"src":"7216:348:15"},{"body":{"nodeType":"YulBlock","src":"7743:231:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7760:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7771:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7753:6:15"},"nodeType":"YulFunctionCall","src":"7753:21:15"},"nodeType":"YulExpressionStatement","src":"7753:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7794:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7805:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7790:3:15"},"nodeType":"YulFunctionCall","src":"7790:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"7810:2:15","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7783:6:15"},"nodeType":"YulFunctionCall","src":"7783:30:15"},"nodeType":"YulExpressionStatement","src":"7783:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7833:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7844:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7829:3:15"},"nodeType":"YulFunctionCall","src":"7829:18:15"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"7849:34:15","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7822:6:15"},"nodeType":"YulFunctionCall","src":"7822:62:15"},"nodeType":"YulExpressionStatement","src":"7822:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7904:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7915:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7900:3:15"},"nodeType":"YulFunctionCall","src":"7900:18:15"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7920:11:15","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7893:6:15"},"nodeType":"YulFunctionCall","src":"7893:39:15"},"nodeType":"YulExpressionStatement","src":"7893:39:15"},{"nodeType":"YulAssignment","src":"7941:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7953:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7964:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7949:3:15"},"nodeType":"YulFunctionCall","src":"7949:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7941:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7720:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7734:4:15","type":""}],"src":"7569:405:15"},{"body":{"nodeType":"YulBlock","src":"8153:226:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8170:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8181:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8163:6:15"},"nodeType":"YulFunctionCall","src":"8163:21:15"},"nodeType":"YulExpressionStatement","src":"8163:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8204:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8215:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8200:3:15"},"nodeType":"YulFunctionCall","src":"8200:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"8220:2:15","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8193:6:15"},"nodeType":"YulFunctionCall","src":"8193:30:15"},"nodeType":"YulExpressionStatement","src":"8193:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8243:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8254:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8239:3:15"},"nodeType":"YulFunctionCall","src":"8239:18:15"},{"hexValue":"596f7520617265206e6f742077686974656c697374656420666f722070726520","kind":"string","nodeType":"YulLiteral","src":"8259:34:15","type":"","value":"You are not whitelisted for pre "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8232:6:15"},"nodeType":"YulFunctionCall","src":"8232:62:15"},"nodeType":"YulExpressionStatement","src":"8232:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8314:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8325:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8310:3:15"},"nodeType":"YulFunctionCall","src":"8310:18:15"},{"hexValue":"6d696e74","kind":"string","nodeType":"YulLiteral","src":"8330:6:15","type":"","value":"mint"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8303:6:15"},"nodeType":"YulFunctionCall","src":"8303:34:15"},"nodeType":"YulExpressionStatement","src":"8303:34:15"},{"nodeType":"YulAssignment","src":"8346:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8358:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8369:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8354:3:15"},"nodeType":"YulFunctionCall","src":"8354:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8346:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_13027401c902a3bca868c4078e20a0facaa89845605dd7ed02f94d3aec7a5915__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8130:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8144:4:15","type":""}],"src":"7979:400:15"},{"body":{"nodeType":"YulBlock","src":"8558:226:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8575:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8586:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8568:6:15"},"nodeType":"YulFunctionCall","src":"8568:21:15"},"nodeType":"YulExpressionStatement","src":"8568:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8609:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8620:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8605:3:15"},"nodeType":"YulFunctionCall","src":"8605:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"8625:2:15","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8598:6:15"},"nodeType":"YulFunctionCall","src":"8598:30:15"},"nodeType":"YulExpressionStatement","src":"8598:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8648:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8659:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8644:3:15"},"nodeType":"YulFunctionCall","src":"8644:18:15"},{"hexValue":"596f752063616e6e6f74206d696e7420616e796d6f726520676f6c6420636170","kind":"string","nodeType":"YulLiteral","src":"8664:34:15","type":"","value":"You cannot mint anymore gold cap"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8637:6:15"},"nodeType":"YulFunctionCall","src":"8637:62:15"},"nodeType":"YulExpressionStatement","src":"8637:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8719:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8730:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8715:3:15"},"nodeType":"YulFunctionCall","src":"8715:18:15"},{"hexValue":"73756c65","kind":"string","nodeType":"YulLiteral","src":"8735:6:15","type":"","value":"sule"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8708:6:15"},"nodeType":"YulFunctionCall","src":"8708:34:15"},"nodeType":"YulExpressionStatement","src":"8708:34:15"},{"nodeType":"YulAssignment","src":"8751:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8763:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8774:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8759:3:15"},"nodeType":"YulFunctionCall","src":"8759:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8751:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_f507a309cc38ca0b5a69c062b15ee707603dd3beb573417d25389244396b4859__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8535:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8549:4:15","type":""}],"src":"8384:400:15"},{"body":{"nodeType":"YulBlock","src":"8963:167:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8980:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8991:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8973:6:15"},"nodeType":"YulFunctionCall","src":"8973:21:15"},"nodeType":"YulExpressionStatement","src":"8973:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9014:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9025:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9010:3:15"},"nodeType":"YulFunctionCall","src":"9010:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"9030:2:15","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9003:6:15"},"nodeType":"YulFunctionCall","src":"9003:30:15"},"nodeType":"YulExpressionStatement","src":"9003:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9053:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9064:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9049:3:15"},"nodeType":"YulFunctionCall","src":"9049:18:15"},{"hexValue":"5072696365206973203235204d61746963","kind":"string","nodeType":"YulLiteral","src":"9069:19:15","type":"","value":"Price is 25 Matic"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9042:6:15"},"nodeType":"YulFunctionCall","src":"9042:47:15"},"nodeType":"YulExpressionStatement","src":"9042:47:15"},{"nodeType":"YulAssignment","src":"9098:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9110:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9121:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9106:3:15"},"nodeType":"YulFunctionCall","src":"9106:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9098:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_804f369a9d8a88ec35b1d4ba0eaec6c74b1ec87abddc20645e130a9940f47b69__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8940:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8954:4:15","type":""}],"src":"8789:341:15"},{"body":{"nodeType":"YulBlock","src":"9309:224:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9326:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9337:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9319:6:15"},"nodeType":"YulFunctionCall","src":"9319:21:15"},"nodeType":"YulExpressionStatement","src":"9319:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9360:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9371:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9356:3:15"},"nodeType":"YulFunctionCall","src":"9356:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"9376:2:15","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9349:6:15"},"nodeType":"YulFunctionCall","src":"9349:30:15"},"nodeType":"YulExpressionStatement","src":"9349:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9399:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9410:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9395:3:15"},"nodeType":"YulFunctionCall","src":"9395:18:15"},{"hexValue":"416c6c20676f6c642063617073756c65732068617665206265656e206d696e74","kind":"string","nodeType":"YulLiteral","src":"9415:34:15","type":"","value":"All gold capsules have been mint"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9388:6:15"},"nodeType":"YulFunctionCall","src":"9388:62:15"},"nodeType":"YulExpressionStatement","src":"9388:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9470:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9481:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9466:3:15"},"nodeType":"YulFunctionCall","src":"9466:18:15"},{"hexValue":"6564","kind":"string","nodeType":"YulLiteral","src":"9486:4:15","type":"","value":"ed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9459:6:15"},"nodeType":"YulFunctionCall","src":"9459:32:15"},"nodeType":"YulExpressionStatement","src":"9459:32:15"},{"nodeType":"YulAssignment","src":"9500:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9512:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"9523:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9508:3:15"},"nodeType":"YulFunctionCall","src":"9508:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9500:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_387a2ec17cf8a3c128877a652e199fea2dd70226e334a7ed4ed2ccd330f51603__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9286:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9300:4:15","type":""}],"src":"9135:398:15"},{"body":{"nodeType":"YulBlock","src":"9570:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9587:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9594:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9599:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9590:3:15"},"nodeType":"YulFunctionCall","src":"9590:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9580:6:15"},"nodeType":"YulFunctionCall","src":"9580:31:15"},"nodeType":"YulExpressionStatement","src":"9580:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9627:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9630:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9620:6:15"},"nodeType":"YulFunctionCall","src":"9620:15:15"},"nodeType":"YulExpressionStatement","src":"9620:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9651:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9654:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9644:6:15"},"nodeType":"YulFunctionCall","src":"9644:15:15"},"nodeType":"YulExpressionStatement","src":"9644:15:15"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9538:127:15"},{"body":{"nodeType":"YulBlock","src":"9717:88:15","statements":[{"body":{"nodeType":"YulBlock","src":"9748:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9750:16:15"},"nodeType":"YulFunctionCall","src":"9750:18:15"},"nodeType":"YulExpressionStatement","src":"9750:18:15"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9733:5:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9744:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9740:3:15"},"nodeType":"YulFunctionCall","src":"9740:6:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9730:2:15"},"nodeType":"YulFunctionCall","src":"9730:17:15"},"nodeType":"YulIf","src":"9727:43:15"},{"nodeType":"YulAssignment","src":"9779:20:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9790:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"9797:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9786:3:15"},"nodeType":"YulFunctionCall","src":"9786:13:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"9779:3:15"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9699:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9709:3:15","type":""}],"src":"9670:135:15"},{"body":{"nodeType":"YulBlock","src":"9984:229:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10001:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10012:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9994:6:15"},"nodeType":"YulFunctionCall","src":"9994:21:15"},"nodeType":"YulExpressionStatement","src":"9994:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10035:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10046:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10031:3:15"},"nodeType":"YulFunctionCall","src":"10031:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"10051:2:15","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10024:6:15"},"nodeType":"YulFunctionCall","src":"10024:30:15"},"nodeType":"YulExpressionStatement","src":"10024:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10074:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10085:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10070:3:15"},"nodeType":"YulFunctionCall","src":"10070:18:15"},{"hexValue":"596f752063616e6e6f74206d696e7420616e796d6f7265206469616d6f6e6420","kind":"string","nodeType":"YulLiteral","src":"10090:34:15","type":"","value":"You cannot mint anymore diamond "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10063:6:15"},"nodeType":"YulFunctionCall","src":"10063:62:15"},"nodeType":"YulExpressionStatement","src":"10063:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10145:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10156:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10141:3:15"},"nodeType":"YulFunctionCall","src":"10141:18:15"},{"hexValue":"63617073756c65","kind":"string","nodeType":"YulLiteral","src":"10161:9:15","type":"","value":"capsule"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10134:6:15"},"nodeType":"YulFunctionCall","src":"10134:37:15"},"nodeType":"YulExpressionStatement","src":"10134:37:15"},{"nodeType":"YulAssignment","src":"10180:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10192:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10203:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10188:3:15"},"nodeType":"YulFunctionCall","src":"10188:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10180:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_41d5e8a11c119646a967e8a499a29ddbe8936f4a0eaee9b4890776bfb5826c45__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9961:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9975:4:15","type":""}],"src":"9810:403:15"},{"body":{"nodeType":"YulBlock","src":"10392:168:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10409:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10420:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10402:6:15"},"nodeType":"YulFunctionCall","src":"10402:21:15"},"nodeType":"YulExpressionStatement","src":"10402:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10443:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10454:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10439:3:15"},"nodeType":"YulFunctionCall","src":"10439:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"10459:2:15","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10432:6:15"},"nodeType":"YulFunctionCall","src":"10432:30:15"},"nodeType":"YulExpressionStatement","src":"10432:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10482:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10493:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10478:3:15"},"nodeType":"YulFunctionCall","src":"10478:18:15"},{"hexValue":"507269636520697320313330204d61746963","kind":"string","nodeType":"YulLiteral","src":"10498:20:15","type":"","value":"Price is 130 Matic"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10471:6:15"},"nodeType":"YulFunctionCall","src":"10471:48:15"},"nodeType":"YulExpressionStatement","src":"10471:48:15"},{"nodeType":"YulAssignment","src":"10528:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10540:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10551:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10536:3:15"},"nodeType":"YulFunctionCall","src":"10536:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10528:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_4510e3361cf16f44a5a6d65cfde280225c4992dd4e34ba6900a1b9bdb004ba3a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10369:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10383:4:15","type":""}],"src":"10218:342:15"},{"body":{"nodeType":"YulBlock","src":"10739:227:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10756:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10767:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10749:6:15"},"nodeType":"YulFunctionCall","src":"10749:21:15"},"nodeType":"YulExpressionStatement","src":"10749:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10790:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10801:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10786:3:15"},"nodeType":"YulFunctionCall","src":"10786:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"10806:2:15","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10779:6:15"},"nodeType":"YulFunctionCall","src":"10779:30:15"},"nodeType":"YulExpressionStatement","src":"10779:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10829:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10840:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10825:3:15"},"nodeType":"YulFunctionCall","src":"10825:18:15"},{"hexValue":"416c6c206469616d6f6e642063617073756c65732068617665206265656e206d","kind":"string","nodeType":"YulLiteral","src":"10845:34:15","type":"","value":"All diamond capsules have been m"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10818:6:15"},"nodeType":"YulFunctionCall","src":"10818:62:15"},"nodeType":"YulExpressionStatement","src":"10818:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10900:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10911:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10896:3:15"},"nodeType":"YulFunctionCall","src":"10896:18:15"},{"hexValue":"696e746564","kind":"string","nodeType":"YulLiteral","src":"10916:7:15","type":"","value":"inted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10889:6:15"},"nodeType":"YulFunctionCall","src":"10889:35:15"},"nodeType":"YulExpressionStatement","src":"10889:35:15"},{"nodeType":"YulAssignment","src":"10933:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10945:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10956:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10941:3:15"},"nodeType":"YulFunctionCall","src":"10941:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10933:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_02261fef6fc86d5ea740dcc068758508c34e2c356556c9a70f466de3329527c9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10716:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10730:4:15","type":""}],"src":"10565:401:15"},{"body":{"nodeType":"YulBlock","src":"11158:309:15","statements":[{"nodeType":"YulVariableDeclaration","src":"11168:27:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11188:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11182:5:15"},"nodeType":"YulFunctionCall","src":"11182:13:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11172:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11243:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"11251:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11239:3:15"},"nodeType":"YulFunctionCall","src":"11239:17:15"},{"name":"pos","nodeType":"YulIdentifier","src":"11258:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"11263:6:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11204:34:15"},"nodeType":"YulFunctionCall","src":"11204:66:15"},"nodeType":"YulExpressionStatement","src":"11204:66:15"},{"nodeType":"YulVariableDeclaration","src":"11279:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11296:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"11301:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11292:3:15"},"nodeType":"YulFunctionCall","src":"11292:16:15"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"11283:5:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11317:29:15","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11339:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11333:5:15"},"nodeType":"YulFunctionCall","src":"11333:13:15"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"11321:8:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11394:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"11402:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11390:3:15"},"nodeType":"YulFunctionCall","src":"11390:17:15"},{"name":"end_1","nodeType":"YulIdentifier","src":"11409:5:15"},{"name":"length_1","nodeType":"YulIdentifier","src":"11416:8:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11355:34:15"},"nodeType":"YulFunctionCall","src":"11355:70:15"},"nodeType":"YulExpressionStatement","src":"11355:70:15"},{"nodeType":"YulAssignment","src":"11434:27:15","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"11445:5:15"},{"name":"length_1","nodeType":"YulIdentifier","src":"11452:8:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11441:3:15"},"nodeType":"YulFunctionCall","src":"11441:20:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11434:3:15"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11126:3:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11131:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11139:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11150:3:15","type":""}],"src":"10971:496:15"},{"body":{"nodeType":"YulBlock","src":"11646:228:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11663:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11674:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11656:6:15"},"nodeType":"YulFunctionCall","src":"11656:21:15"},"nodeType":"YulExpressionStatement","src":"11656:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11697:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11708:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11693:3:15"},"nodeType":"YulFunctionCall","src":"11693:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"11713:2:15","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11686:6:15"},"nodeType":"YulFunctionCall","src":"11686:30:15"},"nodeType":"YulExpressionStatement","src":"11686:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11736:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11747:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11732:3:15"},"nodeType":"YulFunctionCall","src":"11732:18:15"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"11752:34:15","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11725:6:15"},"nodeType":"YulFunctionCall","src":"11725:62:15"},"nodeType":"YulExpressionStatement","src":"11725:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11807:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11818:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11803:3:15"},"nodeType":"YulFunctionCall","src":"11803:18:15"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"11823:8:15","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11796:6:15"},"nodeType":"YulFunctionCall","src":"11796:36:15"},"nodeType":"YulExpressionStatement","src":"11796:36:15"},{"nodeType":"YulAssignment","src":"11841:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11853:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11864:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11849:3:15"},"nodeType":"YulFunctionCall","src":"11849:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11841:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11623:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11637:4:15","type":""}],"src":"11472:402:15"},{"body":{"nodeType":"YulBlock","src":"12053:182:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12070:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12081:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12063:6:15"},"nodeType":"YulFunctionCall","src":"12063:21:15"},"nodeType":"YulExpressionStatement","src":"12063:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12104:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12115:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12100:3:15"},"nodeType":"YulFunctionCall","src":"12100:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"12120:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12093:6:15"},"nodeType":"YulFunctionCall","src":"12093:30:15"},"nodeType":"YulExpressionStatement","src":"12093:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12143:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12154:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12139:3:15"},"nodeType":"YulFunctionCall","src":"12139:18:15"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"12159:34:15","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12132:6:15"},"nodeType":"YulFunctionCall","src":"12132:62:15"},"nodeType":"YulExpressionStatement","src":"12132:62:15"},{"nodeType":"YulAssignment","src":"12203:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12215:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12226:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12211:3:15"},"nodeType":"YulFunctionCall","src":"12211:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12203:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12030:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12044:4:15","type":""}],"src":"11879:356:15"},{"body":{"nodeType":"YulBlock","src":"12414:227:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12431:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12442:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12424:6:15"},"nodeType":"YulFunctionCall","src":"12424:21:15"},"nodeType":"YulExpressionStatement","src":"12424:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12465:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12476:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12461:3:15"},"nodeType":"YulFunctionCall","src":"12461:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"12481:2:15","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12454:6:15"},"nodeType":"YulFunctionCall","src":"12454:30:15"},"nodeType":"YulExpressionStatement","src":"12454:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12504:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12515:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12500:3:15"},"nodeType":"YulFunctionCall","src":"12500:18:15"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"12520:34:15","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12493:6:15"},"nodeType":"YulFunctionCall","src":"12493:62:15"},"nodeType":"YulExpressionStatement","src":"12493:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12575:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12586:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12571:3:15"},"nodeType":"YulFunctionCall","src":"12571:18:15"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"12591:7:15","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12564:6:15"},"nodeType":"YulFunctionCall","src":"12564:35:15"},"nodeType":"YulExpressionStatement","src":"12564:35:15"},{"nodeType":"YulAssignment","src":"12608:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12620:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12631:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12616:3:15"},"nodeType":"YulFunctionCall","src":"12616:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12608:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12391:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12405:4:15","type":""}],"src":"12240:401:15"},{"body":{"nodeType":"YulBlock","src":"12820:226:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12837:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12848:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12830:6:15"},"nodeType":"YulFunctionCall","src":"12830:21:15"},"nodeType":"YulExpressionStatement","src":"12830:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12871:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12882:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12867:3:15"},"nodeType":"YulFunctionCall","src":"12867:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"12887:2:15","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12860:6:15"},"nodeType":"YulFunctionCall","src":"12860:30:15"},"nodeType":"YulExpressionStatement","src":"12860:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12910:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12921:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12906:3:15"},"nodeType":"YulFunctionCall","src":"12906:18:15"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"12926:34:15","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12899:6:15"},"nodeType":"YulFunctionCall","src":"12899:62:15"},"nodeType":"YulExpressionStatement","src":"12899:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12981:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12992:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12977:3:15"},"nodeType":"YulFunctionCall","src":"12977:18:15"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"12997:6:15","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12970:6:15"},"nodeType":"YulFunctionCall","src":"12970:34:15"},"nodeType":"YulExpressionStatement","src":"12970:34:15"},{"nodeType":"YulAssignment","src":"13013:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13025:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13036:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13021:3:15"},"nodeType":"YulFunctionCall","src":"13021:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13013:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12797:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12811:4:15","type":""}],"src":"12646:400:15"},{"body":{"nodeType":"YulBlock","src":"13225:175:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13242:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13253:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13235:6:15"},"nodeType":"YulFunctionCall","src":"13235:21:15"},"nodeType":"YulExpressionStatement","src":"13235:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13276:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13287:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13272:3:15"},"nodeType":"YulFunctionCall","src":"13272:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"13292:2:15","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13265:6:15"},"nodeType":"YulFunctionCall","src":"13265:30:15"},"nodeType":"YulExpressionStatement","src":"13265:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13315:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13326:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13311:3:15"},"nodeType":"YulFunctionCall","src":"13311:18:15"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"13331:27:15","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13304:6:15"},"nodeType":"YulFunctionCall","src":"13304:55:15"},"nodeType":"YulExpressionStatement","src":"13304:55:15"},{"nodeType":"YulAssignment","src":"13368:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13380:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13391:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13376:3:15"},"nodeType":"YulFunctionCall","src":"13376:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13368:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13202:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13216:4:15","type":""}],"src":"13051:349:15"},{"body":{"nodeType":"YulBlock","src":"13579:240:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13596:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13607:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13589:6:15"},"nodeType":"YulFunctionCall","src":"13589:21:15"},"nodeType":"YulExpressionStatement","src":"13589:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13630:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13641:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13626:3:15"},"nodeType":"YulFunctionCall","src":"13626:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"13646:2:15","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13619:6:15"},"nodeType":"YulFunctionCall","src":"13619:30:15"},"nodeType":"YulExpressionStatement","src":"13619:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13669:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13680:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13665:3:15"},"nodeType":"YulFunctionCall","src":"13665:18:15"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"13685:34:15","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13658:6:15"},"nodeType":"YulFunctionCall","src":"13658:62:15"},"nodeType":"YulExpressionStatement","src":"13658:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13740:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13751:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13736:3:15"},"nodeType":"YulFunctionCall","src":"13736:18:15"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"13756:20:15","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13729:6:15"},"nodeType":"YulFunctionCall","src":"13729:48:15"},"nodeType":"YulExpressionStatement","src":"13729:48:15"},{"nodeType":"YulAssignment","src":"13786:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13798:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13809:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13794:3:15"},"nodeType":"YulFunctionCall","src":"13794:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13786:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13556:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13570:4:15","type":""}],"src":"13405:414:15"},{"body":{"nodeType":"YulBlock","src":"13873:79:15","statements":[{"nodeType":"YulAssignment","src":"13883:17:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13895:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"13898:1:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13891:3:15"},"nodeType":"YulFunctionCall","src":"13891:9:15"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"13883:4:15"}]},{"body":{"nodeType":"YulBlock","src":"13924:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13926:16:15"},"nodeType":"YulFunctionCall","src":"13926:18:15"},"nodeType":"YulExpressionStatement","src":"13926:18:15"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"13915:4:15"},{"name":"x","nodeType":"YulIdentifier","src":"13921:1:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13912:2:15"},"nodeType":"YulFunctionCall","src":"13912:11:15"},"nodeType":"YulIf","src":"13909:37:15"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13855:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"13858:1:15","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"13864:4:15","type":""}],"src":"13824:128:15"},{"body":{"nodeType":"YulBlock","src":"14005:77:15","statements":[{"nodeType":"YulAssignment","src":"14015:16:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14026:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"14029:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14022:3:15"},"nodeType":"YulFunctionCall","src":"14022:9:15"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"14015:3:15"}]},{"body":{"nodeType":"YulBlock","src":"14054:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14056:16:15"},"nodeType":"YulFunctionCall","src":"14056:18:15"},"nodeType":"YulExpressionStatement","src":"14056:18:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14046:1:15"},{"name":"sum","nodeType":"YulIdentifier","src":"14049:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14043:2:15"},"nodeType":"YulFunctionCall","src":"14043:10:15"},"nodeType":"YulIf","src":"14040:36:15"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13988:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"13991:1:15","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"13997:3:15","type":""}],"src":"13957:125:15"},{"body":{"nodeType":"YulBlock","src":"14262:184:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14279:3:15"},{"name":"value0","nodeType":"YulIdentifier","src":"14284:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14272:6:15"},"nodeType":"YulFunctionCall","src":"14272:19:15"},"nodeType":"YulExpressionStatement","src":"14272:19:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14311:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14316:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14307:3:15"},"nodeType":"YulFunctionCall","src":"14307:12:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14329:2:15","type":"","value":"96"},{"name":"value1","nodeType":"YulIdentifier","src":"14333:6:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14325:3:15"},"nodeType":"YulFunctionCall","src":"14325:15:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14346:26:15","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14342:3:15"},"nodeType":"YulFunctionCall","src":"14342:31:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14321:3:15"},"nodeType":"YulFunctionCall","src":"14321:53:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14300:6:15"},"nodeType":"YulFunctionCall","src":"14300:75:15"},"nodeType":"YulExpressionStatement","src":"14300:75:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14395:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14400:2:15","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14391:3:15"},"nodeType":"YulFunctionCall","src":"14391:12:15"},{"name":"value2","nodeType":"YulIdentifier","src":"14405:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14384:6:15"},"nodeType":"YulFunctionCall","src":"14384:28:15"},"nodeType":"YulExpressionStatement","src":"14384:28:15"},{"nodeType":"YulAssignment","src":"14421:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14432:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14437:2:15","type":"","value":"84"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14428:3:15"},"nodeType":"YulFunctionCall","src":"14428:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14421:3:15"}]}]},"name":"abi_encode_tuple_packed_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14222:3:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14227:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14235:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14243:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14254:3:15","type":""}],"src":"14087:359:15"},{"body":{"nodeType":"YulBlock","src":"14483:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14500:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14507:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"14512:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14503:3:15"},"nodeType":"YulFunctionCall","src":"14503:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14493:6:15"},"nodeType":"YulFunctionCall","src":"14493:31:15"},"nodeType":"YulExpressionStatement","src":"14493:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14540:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14543:4:15","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14533:6:15"},"nodeType":"YulFunctionCall","src":"14533:15:15"},"nodeType":"YulExpressionStatement","src":"14533:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14564:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14567:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14557:6:15"},"nodeType":"YulFunctionCall","src":"14557:15:15"},"nodeType":"YulExpressionStatement","src":"14557:15:15"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"14451:127:15"},{"body":{"nodeType":"YulBlock","src":"14621:171:15","statements":[{"body":{"nodeType":"YulBlock","src":"14652:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14673:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14680:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"14685:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14676:3:15"},"nodeType":"YulFunctionCall","src":"14676:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14666:6:15"},"nodeType":"YulFunctionCall","src":"14666:31:15"},"nodeType":"YulExpressionStatement","src":"14666:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14717:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14720:4:15","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14710:6:15"},"nodeType":"YulFunctionCall","src":"14710:15:15"},"nodeType":"YulExpressionStatement","src":"14710:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14745:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14748:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14738:6:15"},"nodeType":"YulFunctionCall","src":"14738:15:15"},"nodeType":"YulExpressionStatement","src":"14738:15:15"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14641:1:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14634:6:15"},"nodeType":"YulFunctionCall","src":"14634:9:15"},"nodeType":"YulIf","src":"14631:132:15"},{"nodeType":"YulAssignment","src":"14772:14:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14781:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"14784:1:15"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"14777:3:15"},"nodeType":"YulFunctionCall","src":"14777:9:15"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"14772:1:15"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14606:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"14609:1:15","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"14615:1:15","type":""}],"src":"14583:209:15"},{"body":{"nodeType":"YulBlock","src":"15085:375:15","statements":[{"nodeType":"YulVariableDeclaration","src":"15095:27:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15115:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15109:5:15"},"nodeType":"YulFunctionCall","src":"15109:13:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15099:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15170:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"15178:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15166:3:15"},"nodeType":"YulFunctionCall","src":"15166:17:15"},{"name":"pos","nodeType":"YulIdentifier","src":"15185:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"15190:6:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15131:34:15"},"nodeType":"YulFunctionCall","src":"15131:66:15"},"nodeType":"YulExpressionStatement","src":"15131:66:15"},{"nodeType":"YulVariableDeclaration","src":"15206:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15223:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"15228:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15219:3:15"},"nodeType":"YulFunctionCall","src":"15219:16:15"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"15210:5:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15244:29:15","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15266:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15260:5:15"},"nodeType":"YulFunctionCall","src":"15260:13:15"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"15248:8:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15321:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"15329:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15317:3:15"},"nodeType":"YulFunctionCall","src":"15317:17:15"},{"name":"end_1","nodeType":"YulIdentifier","src":"15336:5:15"},{"name":"length_1","nodeType":"YulIdentifier","src":"15343:8:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15282:34:15"},"nodeType":"YulFunctionCall","src":"15282:70:15"},"nodeType":"YulExpressionStatement","src":"15282:70:15"},{"nodeType":"YulVariableDeclaration","src":"15361:33:15","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"15378:5:15"},{"name":"length_1","nodeType":"YulIdentifier","src":"15385:8:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15374:3:15"},"nodeType":"YulFunctionCall","src":"15374:20:15"},"variables":[{"name":"end_2","nodeType":"YulTypedName","src":"15365:5:15","type":""}]},{"expression":{"arguments":[{"name":"end_2","nodeType":"YulIdentifier","src":"15410:5:15"},{"hexValue":"2e6a736f6e","kind":"string","nodeType":"YulLiteral","src":"15417:7:15","type":"","value":".json"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15403:6:15"},"nodeType":"YulFunctionCall","src":"15403:22:15"},"nodeType":"YulExpressionStatement","src":"15403:22:15"},{"nodeType":"YulAssignment","src":"15434:20:15","value":{"arguments":[{"name":"end_2","nodeType":"YulIdentifier","src":"15445:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"15452:1:15","type":"","value":"5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15441:3:15"},"nodeType":"YulFunctionCall","src":"15441:13:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15434:3:15"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15053:3:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15058:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15066:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15077:3:15","type":""}],"src":"14797:663:15"},{"body":{"nodeType":"YulBlock","src":"15668:286:15","statements":[{"nodeType":"YulVariableDeclaration","src":"15678:29:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15696:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15701:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15692:3:15"},"nodeType":"YulFunctionCall","src":"15692:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"15705:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15688:3:15"},"nodeType":"YulFunctionCall","src":"15688:19:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15682:2:15","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15723:9:15"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15738:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"15746:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15734:3:15"},"nodeType":"YulFunctionCall","src":"15734:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15716:6:15"},"nodeType":"YulFunctionCall","src":"15716:34:15"},"nodeType":"YulExpressionStatement","src":"15716:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15770:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15781:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15766:3:15"},"nodeType":"YulFunctionCall","src":"15766:18:15"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15790:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"15798:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15786:3:15"},"nodeType":"YulFunctionCall","src":"15786:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15759:6:15"},"nodeType":"YulFunctionCall","src":"15759:43:15"},"nodeType":"YulExpressionStatement","src":"15759:43:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15822:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15833:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15818:3:15"},"nodeType":"YulFunctionCall","src":"15818:18:15"},{"name":"value2","nodeType":"YulIdentifier","src":"15838:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15811:6:15"},"nodeType":"YulFunctionCall","src":"15811:34:15"},"nodeType":"YulExpressionStatement","src":"15811:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15865:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15876:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15861:3:15"},"nodeType":"YulFunctionCall","src":"15861:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"15881:3:15","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15854:6:15"},"nodeType":"YulFunctionCall","src":"15854:31:15"},"nodeType":"YulExpressionStatement","src":"15854:31:15"},{"nodeType":"YulAssignment","src":"15894:54:15","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"15920:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15932:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15943:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15928:3:15"},"nodeType":"YulFunctionCall","src":"15928:19:15"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"15902:17:15"},"nodeType":"YulFunctionCall","src":"15902:46:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15894:4:15"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15613:9:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15624:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15632:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15640:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15648:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15659:4:15","type":""}],"src":"15465:489:15"},{"body":{"nodeType":"YulBlock","src":"16039:169:15","statements":[{"body":{"nodeType":"YulBlock","src":"16085:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16094:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16097:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16087:6:15"},"nodeType":"YulFunctionCall","src":"16087:12:15"},"nodeType":"YulExpressionStatement","src":"16087:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16060:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"16069:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16056:3:15"},"nodeType":"YulFunctionCall","src":"16056:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"16081:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16052:3:15"},"nodeType":"YulFunctionCall","src":"16052:32:15"},"nodeType":"YulIf","src":"16049:52:15"},{"nodeType":"YulVariableDeclaration","src":"16110:29:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16129:9:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16123:5:15"},"nodeType":"YulFunctionCall","src":"16123:16:15"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"16114:5:15","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16172:5:15"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"16148:23:15"},"nodeType":"YulFunctionCall","src":"16148:30:15"},"nodeType":"YulExpressionStatement","src":"16148:30:15"},{"nodeType":"YulAssignment","src":"16187:15:15","value":{"name":"value","nodeType":"YulIdentifier","src":"16197:5:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16187:6:15"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16005:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16016:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16028:6:15","type":""}],"src":"15959:249:15"},{"body":{"nodeType":"YulBlock","src":"16387:182:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16404:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16415:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16397:6:15"},"nodeType":"YulFunctionCall","src":"16397:21:15"},"nodeType":"YulExpressionStatement","src":"16397:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16438:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16449:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16434:3:15"},"nodeType":"YulFunctionCall","src":"16434:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"16454:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16427:6:15"},"nodeType":"YulFunctionCall","src":"16427:30:15"},"nodeType":"YulExpressionStatement","src":"16427:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16477:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16488:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16473:3:15"},"nodeType":"YulFunctionCall","src":"16473:18:15"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"16493:34:15","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16466:6:15"},"nodeType":"YulFunctionCall","src":"16466:62:15"},"nodeType":"YulExpressionStatement","src":"16466:62:15"},{"nodeType":"YulAssignment","src":"16537:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16549:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16560:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16545:3:15"},"nodeType":"YulFunctionCall","src":"16545:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16537:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16364:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16378:4:15","type":""}],"src":"16213:356:15"},{"body":{"nodeType":"YulBlock","src":"16748:178:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16765:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16776:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16758:6:15"},"nodeType":"YulFunctionCall","src":"16758:21:15"},"nodeType":"YulExpressionStatement","src":"16758:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16799:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16810:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16795:3:15"},"nodeType":"YulFunctionCall","src":"16795:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"16815:2:15","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16788:6:15"},"nodeType":"YulFunctionCall","src":"16788:30:15"},"nodeType":"YulExpressionStatement","src":"16788:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16838:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16849:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16834:3:15"},"nodeType":"YulFunctionCall","src":"16834:18:15"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"16854:30:15","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16827:6:15"},"nodeType":"YulFunctionCall","src":"16827:58:15"},"nodeType":"YulExpressionStatement","src":"16827:58:15"},{"nodeType":"YulAssignment","src":"16894:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16906:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16917:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16902:3:15"},"nodeType":"YulFunctionCall","src":"16902:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16894:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16725:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16739:4:15","type":""}],"src":"16574:352:15"},{"body":{"nodeType":"YulBlock","src":"17105:236:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17122:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17133:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17115:6:15"},"nodeType":"YulFunctionCall","src":"17115:21:15"},"nodeType":"YulExpressionStatement","src":"17115:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17156:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17167:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17152:3:15"},"nodeType":"YulFunctionCall","src":"17152:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"17172:2:15","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17145:6:15"},"nodeType":"YulFunctionCall","src":"17145:30:15"},"nodeType":"YulExpressionStatement","src":"17145:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17195:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17206:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17191:3:15"},"nodeType":"YulFunctionCall","src":"17191:18:15"},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e","kind":"string","nodeType":"YulLiteral","src":"17211:34:15","type":"","value":"ERC721URIStorage: URI set of non"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17184:6:15"},"nodeType":"YulFunctionCall","src":"17184:62:15"},"nodeType":"YulExpressionStatement","src":"17184:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17266:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17277:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17262:3:15"},"nodeType":"YulFunctionCall","src":"17262:18:15"},{"hexValue":"6578697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"17282:16:15","type":"","value":"existent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17255:6:15"},"nodeType":"YulFunctionCall","src":"17255:44:15"},"nodeType":"YulExpressionStatement","src":"17255:44:15"},{"nodeType":"YulAssignment","src":"17308:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17320:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17331:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17316:3:15"},"nodeType":"YulFunctionCall","src":"17316:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17308:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17082:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17096:4:15","type":""}],"src":"16931:410:15"},{"body":{"nodeType":"YulBlock","src":"17402:65:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17419:1:15","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"17422:3:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17412:6:15"},"nodeType":"YulFunctionCall","src":"17412:14:15"},"nodeType":"YulExpressionStatement","src":"17412:14:15"},{"nodeType":"YulAssignment","src":"17435:26:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17453:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17456:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"17443:9:15"},"nodeType":"YulFunctionCall","src":"17443:18:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"17435:4:15"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"17385:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"17393:4:15","type":""}],"src":"17346:121:15"},{"body":{"nodeType":"YulBlock","src":"17553:464:15","statements":[{"body":{"nodeType":"YulBlock","src":"17586:425:15","statements":[{"nodeType":"YulVariableDeclaration","src":"17600:11:15","value":{"kind":"number","nodeType":"YulLiteral","src":"17610:1:15","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"17604:2:15","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17631:2:15"},{"name":"array","nodeType":"YulIdentifier","src":"17635:5:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17624:6:15"},"nodeType":"YulFunctionCall","src":"17624:17:15"},"nodeType":"YulExpressionStatement","src":"17624:17:15"},{"nodeType":"YulVariableDeclaration","src":"17654:31:15","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"17676:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"17680:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"17666:9:15"},"nodeType":"YulFunctionCall","src":"17666:19:15"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"17658:4:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17698:57:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17721:4:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17731:1:15","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"17738:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"17750:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17734:3:15"},"nodeType":"YulFunctionCall","src":"17734:19:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17727:3:15"},"nodeType":"YulFunctionCall","src":"17727:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17717:3:15"},"nodeType":"YulFunctionCall","src":"17717:38:15"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"17702:11:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"17792:23:15","statements":[{"nodeType":"YulAssignment","src":"17794:19:15","value":{"name":"data","nodeType":"YulIdentifier","src":"17809:4:15"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"17794:11:15"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"17774:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"17786:4:15","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17771:2:15"},"nodeType":"YulFunctionCall","src":"17771:20:15"},"nodeType":"YulIf","src":"17768:47:15"},{"nodeType":"YulVariableDeclaration","src":"17828:41:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"17842:4:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17852:1:15","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"17859:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"17864:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17855:3:15"},"nodeType":"YulFunctionCall","src":"17855:12:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17848:3:15"},"nodeType":"YulFunctionCall","src":"17848:20:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17838:3:15"},"nodeType":"YulFunctionCall","src":"17838:31:15"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"17832:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17882:24:15","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"17895:11:15"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"17886:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"17980:21:15","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17989:5:15"},{"name":"_1","nodeType":"YulIdentifier","src":"17996:2:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"17982:6:15"},"nodeType":"YulFunctionCall","src":"17982:17:15"},"nodeType":"YulExpressionStatement","src":"17982:17:15"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17930:5:15"},{"name":"_2","nodeType":"YulIdentifier","src":"17937:2:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17927:2:15"},"nodeType":"YulFunctionCall","src":"17927:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17941:26:15","statements":[{"nodeType":"YulAssignment","src":"17943:22:15","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17956:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"17963:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17952:3:15"},"nodeType":"YulFunctionCall","src":"17952:13:15"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"17943:5:15"}]}]},"pre":{"nodeType":"YulBlock","src":"17923:3:15","statements":[]},"src":"17919:82:15"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"17569:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"17574:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17566:2:15"},"nodeType":"YulFunctionCall","src":"17566:11:15"},"nodeType":"YulIf","src":"17563:448:15"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"17525:5:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"17532:3:15","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"17537:10:15","type":""}],"src":"17472:545:15"},{"body":{"nodeType":"YulBlock","src":"18107:81:15","statements":[{"nodeType":"YulAssignment","src":"18117:65:15","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"18132:4:15"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18150:1:15","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"18153:3:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18146:3:15"},"nodeType":"YulFunctionCall","src":"18146:11:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18163:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18159:3:15"},"nodeType":"YulFunctionCall","src":"18159:6:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"18142:3:15"},"nodeType":"YulFunctionCall","src":"18142:24:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18138:3:15"},"nodeType":"YulFunctionCall","src":"18138:29:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18128:3:15"},"nodeType":"YulFunctionCall","src":"18128:40:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18174:1:15","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"18177:3:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18170:3:15"},"nodeType":"YulFunctionCall","src":"18170:11:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"18125:2:15"},"nodeType":"YulFunctionCall","src":"18125:57:15"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"18117:4:15"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"18084:4:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"18090:3:15","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"18098:4:15","type":""}],"src":"18022:166:15"},{"body":{"nodeType":"YulBlock","src":"18289:1256:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18299:24:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18319:3:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18313:5:15"},"nodeType":"YulFunctionCall","src":"18313:10:15"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"18303:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"18366:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"18368:16:15"},"nodeType":"YulFunctionCall","src":"18368:18:15"},"nodeType":"YulExpressionStatement","src":"18368:18:15"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"18338:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"18346:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18335:2:15"},"nodeType":"YulFunctionCall","src":"18335:30:15"},"nodeType":"YulIf","src":"18332:56:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18441:4:15"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18479:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"18473:5:15"},"nodeType":"YulFunctionCall","src":"18473:11:15"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"18447:25:15"},"nodeType":"YulFunctionCall","src":"18447:38:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"18487:6:15"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"18397:43:15"},"nodeType":"YulFunctionCall","src":"18397:97:15"},"nodeType":"YulExpressionStatement","src":"18397:97:15"},{"nodeType":"YulVariableDeclaration","src":"18503:18:15","value":{"kind":"number","nodeType":"YulLiteral","src":"18520:1:15","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"18507:9:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18530:23:15","value":{"kind":"number","nodeType":"YulLiteral","src":"18549:4:15","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"18534:11:15","type":""}]},{"nodeType":"YulAssignment","src":"18562:24:15","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"18575:11:15"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18562:9:15"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"18632:656:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18646:35:15","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"18665:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18677:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18673:3:15"},"nodeType":"YulFunctionCall","src":"18673:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18661:3:15"},"nodeType":"YulFunctionCall","src":"18661:20:15"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"18650:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18694:49:15","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18738:4:15"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"18708:29:15"},"nodeType":"YulFunctionCall","src":"18708:35:15"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"18698:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18756:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"18765:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"18760:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"18843:172:15","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18868:6:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18886:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"18891:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18882:3:15"},"nodeType":"YulFunctionCall","src":"18882:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18876:5:15"},"nodeType":"YulFunctionCall","src":"18876:26:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18861:6:15"},"nodeType":"YulFunctionCall","src":"18861:42:15"},"nodeType":"YulExpressionStatement","src":"18861:42:15"},{"nodeType":"YulAssignment","src":"18920:24:15","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18934:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"18942:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18930:3:15"},"nodeType":"YulFunctionCall","src":"18930:14:15"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18920:6:15"}]},{"nodeType":"YulAssignment","src":"18961:40:15","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18978:9:15"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"18989:11:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18974:3:15"},"nodeType":"YulFunctionCall","src":"18974:27:15"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18961:9:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18790:1:15"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"18793:7:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18787:2:15"},"nodeType":"YulFunctionCall","src":"18787:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18802:28:15","statements":[{"nodeType":"YulAssignment","src":"18804:24:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18813:1:15"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"18816:11:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18809:3:15"},"nodeType":"YulFunctionCall","src":"18809:19:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"18804:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"18783:3:15","statements":[]},"src":"18779:236:15"},{"body":{"nodeType":"YulBlock","src":"19063:166:15","statements":[{"nodeType":"YulVariableDeclaration","src":"19081:43:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19108:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"19113:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19104:3:15"},"nodeType":"YulFunctionCall","src":"19104:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19098:5:15"},"nodeType":"YulFunctionCall","src":"19098:26:15"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"19085:9:15","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"19148:6:15"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"19160:9:15"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19187:1:15","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"19190:6:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19183:3:15"},"nodeType":"YulFunctionCall","src":"19183:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"19199:3:15","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19179:3:15"},"nodeType":"YulFunctionCall","src":"19179:24:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19209:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19205:3:15"},"nodeType":"YulFunctionCall","src":"19205:6:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"19175:3:15"},"nodeType":"YulFunctionCall","src":"19175:37:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19171:3:15"},"nodeType":"YulFunctionCall","src":"19171:42:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19156:3:15"},"nodeType":"YulFunctionCall","src":"19156:58:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"19141:6:15"},"nodeType":"YulFunctionCall","src":"19141:74:15"},"nodeType":"YulExpressionStatement","src":"19141:74:15"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"19034:7:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"19043:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19031:2:15"},"nodeType":"YulFunctionCall","src":"19031:19:15"},"nodeType":"YulIf","src":"19028:201:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"19249:4:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19263:1:15","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"19266:6:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19259:3:15"},"nodeType":"YulFunctionCall","src":"19259:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"19275:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19255:3:15"},"nodeType":"YulFunctionCall","src":"19255:22:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"19242:6:15"},"nodeType":"YulFunctionCall","src":"19242:36:15"},"nodeType":"YulExpressionStatement","src":"19242:36:15"}]},"nodeType":"YulCase","src":"18625:663:15","value":{"kind":"number","nodeType":"YulLiteral","src":"18630:1:15","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"19305:234:15","statements":[{"nodeType":"YulVariableDeclaration","src":"19319:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"19332:1:15","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"19323:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"19368:67:15","statements":[{"nodeType":"YulAssignment","src":"19386:35:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19405:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"19410:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19401:3:15"},"nodeType":"YulFunctionCall","src":"19401:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19395:5:15"},"nodeType":"YulFunctionCall","src":"19395:26:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19386:5:15"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"19349:6:15"},"nodeType":"YulIf","src":"19346:89:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"19455:4:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19514:5:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"19521:6:15"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"19461:52:15"},"nodeType":"YulFunctionCall","src":"19461:67:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"19448:6:15"},"nodeType":"YulFunctionCall","src":"19448:81:15"},"nodeType":"YulExpressionStatement","src":"19448:81:15"}]},"nodeType":"YulCase","src":"19297:242:15","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"18605:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"18613:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18602:2:15"},"nodeType":"YulFunctionCall","src":"18602:14:15"},"nodeType":"YulSwitch","src":"18595:944:15"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"18274:4:15","type":""},{"name":"src","nodeType":"YulTypedName","src":"18280:3:15","type":""}],"src":"18193:1352:15"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_c5f112810d57218b6ed7ee19a4f6428b1e6680d1b4e819c1ad1135ace5c93b42__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"free mint whitelisting phase is \")\n        mstore(add(headStart, 96), \"over\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cf8e1c54e6c85ca6fc4805b674930d0e960eeceb9b59caa29f57fe35457c26b8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"pre mint whitelisting phase is o\")\n        mstore(add(headStart, 96), \"ver\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_13027401c902a3bca868c4078e20a0facaa89845605dd7ed02f94d3aec7a5915__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"You are not whitelisted for pre \")\n        mstore(add(headStart, 96), \"mint\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f507a309cc38ca0b5a69c062b15ee707603dd3beb573417d25389244396b4859__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"You cannot mint anymore gold cap\")\n        mstore(add(headStart, 96), \"sule\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_804f369a9d8a88ec35b1d4ba0eaec6c74b1ec87abddc20645e130a9940f47b69__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Price is 25 Matic\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_387a2ec17cf8a3c128877a652e199fea2dd70226e334a7ed4ed2ccd330f51603__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"All gold capsules have been mint\")\n        mstore(add(headStart, 96), \"ed\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_41d5e8a11c119646a967e8a499a29ddbe8936f4a0eaee9b4890776bfb5826c45__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"You cannot mint anymore diamond \")\n        mstore(add(headStart, 96), \"capsule\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4510e3361cf16f44a5a6d65cfde280225c4992dd4e34ba6900a1b9bdb004ba3a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Price is 130 Matic\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_02261fef6fc86d5ea740dcc068758508c34e2c356556c9a70f466de3329527c9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"All diamond capsules have been m\")\n        mstore(add(headStart, 96), \"inted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_packed_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(96, value1), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 52), value2)\n        end := add(pos, 84)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        let end_2 := add(end_1, length_1)\n        mstore(end_2, \".json\")\n        end := add(end_2, 5)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC721URIStorage: URI set of non\")\n        mstore(add(headStart, 96), \"existent token\")\n        tail := add(headStart, 128)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106101d85760003560e01c8063853828b611610102578063b4d93b0711610095578063d5a02dfa11610064578063d5a02dfa146104df578063e985e9c5146104f4578063ed5e57b814610514578063f2fde38b1461053357600080fd5b8063b4d93b0714610481578063b69ef8a814610489578063b88d4fde1461049f578063c87b56dd146104bf57600080fd5b80639cc11d02116100d15780639cc11d0214610428578063a22cb46514610442578063a2309ff814610462578063af2a91901461047957600080fd5b8063853828b6146103c95780638d0a284b146103de5780638da5cb5b146103f557806395d89b411461041357600080fd5b8063207d95a51161017a5780636352211e116101495780636352211e1461035e57806365f9c6561461037e57806370a0823114610394578063715018a6146103b457600080fd5b8063207d95a5146102e957806323b872dd146102fe57806342842e0e1461031e57806353a6cef51461033e57600080fd5b8063081812fc116101b6578063081812fc14610256578063095ea7b31461028e578063182ea932146102ae5780631f69f030146102d357600080fd5b806301ffc9a7146101dd57806304baffc71461021257806306fdde0314610234575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611ed0565b610553565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b5061023261022d366004611f09565b6105a5565b005b34801561024057600080fd5b5061024961063c565b6040516102099190611f74565b34801561026257600080fd5b50610276610271366004611f87565b6106ce565b6040516001600160a01b039091168152602001610209565b34801561029a57600080fd5b506102326102a9366004611fa0565b6106f5565b3480156102ba57600080fd5b506009546102c59081565b604051908152602001610209565b3480156102df57600080fd5b506102c5601c5481565b3480156102f557600080fd5b5061023261080a565b34801561030a57600080fd5b50610232610319366004611fca565b61084c565b34801561032a57600080fd5b50610232610339366004611fca565b61087d565b34801561034a57600080fd5b50610232610359366004611f09565b610898565b34801561036a57600080fd5b50610276610379366004611f87565b61091b565b34801561038a57600080fd5b506102c5601b5481565b3480156103a057600080fd5b506102c56103af366004611f09565b61097b565b3480156103c057600080fd5b50610232610a01565b3480156103d557600080fd5b50610232610a15565b3480156103ea57600080fd5b506008546102c59081565b34801561040157600080fd5b506007546001600160a01b0316610276565b34801561041f57600080fd5b50610249610a6d565b34801561043457600080fd5b50601a546101fd9060ff1681565b34801561044e57600080fd5b5061023261045d366004612006565b610a7c565b34801561046e57600080fd5b50600a546102c59081565b610232610a87565b610232610c3d565b34801561049557600080fd5b506102c560195481565b3480156104ab57600080fd5b506102326104ba366004612058565b610dd3565b3480156104cb57600080fd5b506102496104da366004611f87565b610e0b565b3480156104eb57600080fd5b50610232610f1b565b34801561050057600080fd5b506101fd61050f366004612134565b610f5b565b34801561052057600080fd5b50601a546101fd90610100900460ff1681565b34801561053f57600080fd5b5061023261054e366004611f09565b610f89565b60006001600160e01b031982166380ac58cd60e01b148061058457506001600160e01b03198216635b5e139f60e01b145b8061059f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105ad611002565b601a5460ff6101009091041615156001146105e35760405162461bcd60e51b81526004016105da90612167565b60405180910390fd5b6001600160a01b03811660008181526020808052604091829020805460ff1916600117905590519182527ffe9489a95af8142951ae7fe3795b77b8e0e0e1b7411049c82ce6ec096bc7c59c91015b60405180910390a150565b60606000805461064b906121ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610677906121ab565b80156106c45780601f10610699576101008083540402835291602001916106c4565b820191906000526020600020905b8154815290600101906020018083116106a757829003601f168201915b5050505050905090565b60006106d98261105c565b506000908152600460205260409020546001600160a01b031690565b60006107008261091b565b9050806001600160a01b0316836001600160a01b03160361076d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016105da565b336001600160a01b038216148061078957506107898133610f5b565b6107fb5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016105da565b61080583836110bb565b505050565b610812611002565b601a5460ff61010090910416151560011461083f5760405162461bcd60e51b81526004016105da90612167565b601a805461ff0019169055565b6108563382611129565b6108725760405162461bcd60e51b81526004016105da906121e5565b610805838383611187565b61080583838360405180602001604052806000815250610dd3565b6108a0611002565b601a5460ff1615156001146108c75760405162461bcd60e51b81526004016105da90612232565b6001600160a01b0381166000818152601f6020908152604091829020805460ff1916600117905590519182527f7ca3b83bd54c2e58547d3d3b7fd3c742d00dd3d413ec10bbe23232a1c0ff29b69101610631565b6000818152600260205260408120546001600160a01b03168061059f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105da565b60006001600160a01b0382166109e55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105da565b506001600160a01b031660009081526003602052604090205490565b610a09611002565b610a1360006112f8565b565b610a1d611002565b6000610a316007546001600160a01b031690565b6040519091506001600160a01b038216904780156108fc02916000818181858888f19350505050158015610a69573d6000803e3d6000fd5b5050565b60606001805461064b906121ab565b610a6933838361134a565b336000908152601f602052604090205460ff16610ab65760405162461bcd60e51b81526004016105da90612275565b336000908152601e6020526040902060010154600511610b245760405162461bcd60e51b8152602060048201526024808201527f596f752063616e6e6f74206d696e7420616e796d6f726520676f6c642063617060448201526373756c6560e01b60648201526084016105da565b601b543414610b695760405162461bcd60e51b81526020600482015260116024820152705072696365206973203235204d6174696360781b60448201526064016105da565b6008546102bc1015610bc85760405162461bcd60e51b815260206004820152602260248201527f416c6c20676f6c642063617073756c65732068617665206265656e206d696e74604482015261195960f21b60648201526084016105da565b610bd0611418565b6018546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610c09573d6000803e3d6000fd5b50610c18600880546001019055565b336000908152601e60205260408120600101805491610c36836122cf565b9190505550565b336000908152601f602052604090205460ff16610c6c5760405162461bcd60e51b81526004016105da90612275565b336000908152601e6020526040902054600211610cdb5760405162461bcd60e51b815260206004820152602760248201527f596f752063616e6e6f74206d696e7420616e796d6f7265206469616d6f6e642060448201526663617073756c6560c81b60648201526084016105da565b601c543414610d215760405162461bcd60e51b8152602060048201526012602482015271507269636520697320313330204d6174696360701b60448201526064016105da565b60095461012c1015610d835760405162461bcd60e51b815260206004820152602560248201527f416c6c206469616d6f6e642063617073756c65732068617665206265656e206d6044820152641a5b9d195960da1b60648201526084016105da565b610d8b61161f565b6018546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610dc4573d6000803e3d6000fd5b50610c18600980546001019055565b610ddd3383611129565b610df95760405162461bcd60e51b81526004016105da906121e5565b610e05848484846117eb565b50505050565b6060610e168261105c565b60008281526006602052604081208054610e2f906121ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5b906121ab565b8015610ea85780601f10610e7d57610100808354040283529160200191610ea8565b820191906000526020600020905b815481529060010190602001808311610e8b57829003601f168201915b505050505090506000610ec660408051602081019091526000815290565b90508051600003610ed8575092915050565b815115610f0a578082604051602001610ef29291906122e8565b60405160208183030381529060405292505050919050565b610f138461181e565b949350505050565b610f23611002565b601a5460ff161515600114610f4a5760405162461bcd60e51b81526004016105da90612232565b601a805461ffff1916610100179055565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610f91611002565b6001600160a01b038116610ff65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105da565b610fff816112f8565b50565b6007546001600160a01b03163314610a135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105da565b6000818152600260205260409020546001600160a01b0316610fff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105da565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906110f08261091b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111358361091b565b9050806001600160a01b0316846001600160a01b0316148061115c575061115c8185610f5b565b80610f135750836001600160a01b0316611175846106ce565b6001600160a01b031614949350505050565b826001600160a01b031661119a8261091b565b6001600160a01b0316146111c05760405162461bcd60e51b81526004016105da90612317565b6001600160a01b0382166112225760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105da565b61122f8383836001611892565b826001600160a01b03166112428261091b565b6001600160a01b0316146112685760405162461bcd60e51b81526004016105da90612317565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036113ab5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105da565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006114266001606461191a565b90506001811015801561143a575060328111155b1561154f5761015e601154106115275760f5601254106114ff5760138054906000611464836122cf565b91905055506114ff601354600d805461147c906121ab565b80601f01602080910402602001604051908101604052809291908181526020018280546114a8906121ab565b80156114f55780601f106114ca576101008083540402835291602001916114f5565b820191906000526020600020905b8154815290600101906020018083116114d857829003601f168201915b50505050506119b3565b6012805490600061150f836122cf565b9190505550610fff601254600c805461147c906121ab565b60118054906000611537836122cf565b9190505550610fff601154600b805461147c906121ab565b60338110158015611561575060558111155b156115a35760f5601254106114ff5761015e60115410611527576013805490600061158b836122cf565b9190505550611527601354600d805461147c906121ab565b605681101580156115b5575060648111155b15610fff576069601354106115f75761015e6011541061152757601280549060006115df836122cf565b9190505550611527601254600c805461147c906121ab565b60138054906000611607836122cf565b9190505550610fff601354600d805461147c906121ab565b600061162e60016103e861191a565b905060018110158015611643575061015e8111155b15611706576069601454106116de57605a601554106116b65760356016541061168e5760178054906000611676836122cf565b9190505550610fff6017546010805461147c906121ab565b6016805490600061169e836122cf565b9190505550610fff601654600f805461147c906121ab565b601580549060006116c6836122cf565b9190505550610fff601554600e805461147c906121ab565b601480549060006116ee836122cf565b9190505550610fff601454600d805461147c906121ab565b61015f811015801561171a575061028a8111155b1561174d57605a601554106116b6576069601454106116de5760356016541061168e5760178054906000611676836122cf565b61028b8110158015611761575061033b8111155b156117945760356016541061168e576069601454106116de57605a601554106116b65760178054906000611676836122cf565b61033c81101580156117a857506103e88111155b15610fff576034601754106117db576069601454106116de57605a601554106116b6576016805490600061169e836122cf565b60178054906000611676836122cf565b6117f6848484611187565b61180284848484611a22565b610e055760405162461bcd60e51b81526004016105da9061235c565b60606118298261105c565b600061184060408051602081019091526000815290565b90506000815111611860576040518060200160405280600081525061188b565b8061186a84611b23565b60405160200161187b9291906122e8565b6040516020818303038152906040525b9392505050565b6001811115610e05576001600160a01b038416156118d8576001600160a01b038416600090815260036020526040812080548392906118d29084906123ae565b90915550505b6001600160a01b03831615610e05576001600160a01b0383166000908152600360205260408120805483929061190f9084906123c1565b909155505050505050565b60008061192784846123ae565b905060004233601d546040516020016119659392919092835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b60408051601f198184030181529190528051602090910120601d8054919250600061198f836122cf565b909155508590506119a083836123d4565b6119aa91906123c1565b95945050505050565b6000816119bf84611b23565b6040516020016119d09291906123f6565b60405160208183030381529060405290506119fc33600a6000015460016119f791906123c1565b611bb6565b600a54611a1490611a0e9060016123c1565b82611d4f565b610805600a80546001019055565b60006001600160a01b0384163b15611b1857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a66903390899088908890600401612435565b6020604051808303816000875af1925050508015611aa1575060408051601f3d908101601f19168201909252611a9e91810190612472565b60015b611afe573d808015611acf576040519150601f19603f3d011682016040523d82523d6000602084013e611ad4565b606091505b508051600003611af65760405162461bcd60e51b81526004016105da9061235c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610f13565b506001949350505050565b60606000611b3083611de2565b600101905060008167ffffffffffffffff811115611b5057611b50612042565b6040519080825280601f01601f191660200182016040528015611b7a576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611b8457509392505050565b6001600160a01b038216611c0c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105da565b6000818152600260205260409020546001600160a01b031615611c715760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105da565b611c7f600083836001611892565b6000818152600260205260409020546001600160a01b031615611ce45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105da565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600260205260409020546001600160a01b0316611dca5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016105da565b600082815260066020526040902061080582826124dd565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611e215772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611e4d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611e6b57662386f26fc10000830492506010015b6305f5e1008310611e83576305f5e100830492506008015b6127108310611e9757612710830492506004015b60648310611ea9576064830492506002015b600a831061059f5760010192915050565b6001600160e01b031981168114610fff57600080fd5b600060208284031215611ee257600080fd5b813561188b81611eba565b80356001600160a01b0381168114611f0457600080fd5b919050565b600060208284031215611f1b57600080fd5b61188b82611eed565b60005b83811015611f3f578181015183820152602001611f27565b50506000910152565b60008151808452611f60816020860160208601611f24565b601f01601f19169290920160200192915050565b60208152600061188b6020830184611f48565b600060208284031215611f9957600080fd5b5035919050565b60008060408385031215611fb357600080fd5b611fbc83611eed565b946020939093013593505050565b600080600060608486031215611fdf57600080fd5b611fe884611eed565b9250611ff660208501611eed565b9150604084013590509250925092565b6000806040838503121561201957600080fd5b61202283611eed565b91506020830135801515811461203757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561206e57600080fd5b61207785611eed565b935061208560208601611eed565b925060408501359150606085013567ffffffffffffffff808211156120a957600080fd5b818701915087601f8301126120bd57600080fd5b8135818111156120cf576120cf612042565b604051601f8201601f19908116603f011681019083821181831017156120f7576120f7612042565b816040528281528a602084870101111561211057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561214757600080fd5b61215083611eed565b915061215e60208401611eed565b90509250929050565b60208082526024908201527f66726565206d696e742077686974656c697374696e672070686173652069732060408201526337bb32b960e11b606082015260800190565b600181811c908216806121bf57607f821691505b6020821081036121df57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526023908201527f707265206d696e742077686974656c697374696e67207068617365206973206f6040820152623b32b960e91b606082015260800190565b60208082526024908201527f596f7520617265206e6f742077686974656c697374656420666f7220707265206040820152631b5a5b9d60e21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600182016122e1576122e16122b9565b5060010190565b600083516122fa818460208801611f24565b83519083019061230e818360208801611f24565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8181038181111561059f5761059f6122b9565b8082018082111561059f5761059f6122b9565b6000826123f157634e487b7160e01b600052601260045260246000fd5b500690565b60008351612408818460208801611f24565b83519083019061241c818360208801611f24565b64173539b7b760d91b9101908152600501949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061246890830184611f48565b9695505050505050565b60006020828403121561248457600080fd5b815161188b81611eba565b601f82111561080557600081815260208120601f850160051c810160208610156124b65750805b601f850160051c820191505b818110156124d5578281556001016124c2565b505050505050565b815167ffffffffffffffff8111156124f7576124f7612042565b61250b8161250584546121ab565b8461248f565b602080601f83116001811461254057600084156125285750858301515b600019600386901b1c1916600185901b1785556124d5565b600085815260208120601f198616915b8281101561256f57888601518255948401946001909101908401612550565b508582101561258d5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220d966121f7de202e0f96cf37484997f0a379d91bb8861f1da444b1b8ab0ed18f064736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x853828B6 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xB4D93B07 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD5A02DFA GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD5A02DFA EQ PUSH2 0x4DF JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4F4 JUMPI DUP1 PUSH4 0xED5E57B8 EQ PUSH2 0x514 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB4D93B07 EQ PUSH2 0x481 JUMPI DUP1 PUSH4 0xB69EF8A8 EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x4BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9CC11D02 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x9CC11D02 EQ PUSH2 0x428 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0xA2309FF8 EQ PUSH2 0x462 JUMPI DUP1 PUSH4 0xAF2A9190 EQ PUSH2 0x479 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x853828B6 EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x8D0A284B EQ PUSH2 0x3DE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3F5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x207D95A5 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x6352211E GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0x65F9C656 EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x207D95A5 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x53A6CEF5 EQ PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x182EA932 EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0x1F69F030 EQ PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x4BAFFC7 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x234 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH2 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1ED0 JUMP JUMPDEST PUSH2 0x553 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x22D CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x5A5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x63C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x209 SWAP2 SWAP1 PUSH2 0x1F74 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x276 PUSH2 0x271 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F87 JUMP JUMPDEST PUSH2 0x6CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x209 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FA0 JUMP JUMPDEST PUSH2 0x6F5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0x2C5 SWAP1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x209 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH1 0x1C SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x80A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x319 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FCA JUMP JUMPDEST PUSH2 0x84C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x339 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FCA JUMP JUMPDEST PUSH2 0x87D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x898 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x276 PUSH2 0x379 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F87 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH1 0x1B SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x97B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0xA01 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0xA15 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH2 0x2C5 SWAP1 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x276 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0xA6D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1A SLOAD PUSH2 0x1FD SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0x2006 JUMP JUMPDEST PUSH2 0xA7C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH2 0x2C5 SWAP1 DUP2 JUMP JUMPDEST PUSH2 0x232 PUSH2 0xA87 JUMP JUMPDEST PUSH2 0x232 PUSH2 0xC3D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C5 PUSH1 0x19 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x4BA CALLDATASIZE PUSH1 0x4 PUSH2 0x2058 JUMP JUMPDEST PUSH2 0xDD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x4DA CALLDATASIZE PUSH1 0x4 PUSH2 0x1F87 JUMP JUMPDEST PUSH2 0xE0B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0xF1B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH2 0x50F CALLDATASIZE PUSH1 0x4 PUSH2 0x2134 JUMP JUMPDEST PUSH2 0xF5B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1A SLOAD PUSH2 0x1FD SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x584 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x59F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5AD PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0xFF PUSH2 0x100 SWAP1 SWAP2 DIV AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x5E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2167 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xFE9489A95AF8142951AE7FE3795B77B8E0E0E1B7411049C82CE6EC096BC7C59C SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x64B SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x677 SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6C4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x699 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6C4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6A7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6D9 DUP3 PUSH2 0x105C JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x700 DUP3 PUSH2 0x91B JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x76D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x789 JUMPI POP PUSH2 0x789 DUP2 CALLER PUSH2 0xF5B JUMP JUMPDEST PUSH2 0x7FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x805 DUP4 DUP4 PUSH2 0x10BB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x812 PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0xFF PUSH2 0x100 SWAP1 SWAP2 DIV AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x83F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2167 JUMP JUMPDEST PUSH1 0x1A DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x856 CALLER DUP3 PUSH2 0x1129 JUMP JUMPDEST PUSH2 0x872 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x21E5 JUMP JUMPDEST PUSH2 0x805 DUP4 DUP4 DUP4 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x805 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xDD3 JUMP JUMPDEST PUSH2 0x8A0 PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x8C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2232 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x7CA3B83BD54C2E58547D3D3B7FD3C742D00DD3D413EC10BBE23232A1C0FF29B6 SWAP2 ADD PUSH2 0x631 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x59F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA09 PUSH2 0x1002 JUMP JUMPDEST PUSH2 0xA13 PUSH1 0x0 PUSH2 0x12F8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xA1D PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA31 PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xA69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x64B SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH2 0xA69 CALLER DUP4 DUP4 PUSH2 0x134A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xAB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2275 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x5 GT PUSH2 0xB24 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x596F752063616E6E6F74206D696E7420616E796D6F726520676F6C6420636170 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x73756C65 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x1B SLOAD CALLVALUE EQ PUSH2 0xB69 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x5072696365206973203235204D61746963 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x2BC LT ISZERO PUSH2 0xBC8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C6C20676F6C642063617073756C65732068617665206265656E206D696E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x1959 PUSH1 0xF2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0xBD0 PUSH2 0x1418 JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xC09 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xC18 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP2 PUSH2 0xC36 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xC6C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2275 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x2 GT PUSH2 0xCDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752063616E6E6F74206D696E7420616E796D6F7265206469616D6F6E6420 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x63617073756C65 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x1C SLOAD CALLVALUE EQ PUSH2 0xD21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x507269636520697320313330204D61746963 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x12C LT ISZERO PUSH2 0xD83 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C6C206469616D6F6E642063617073756C65732068617665206265656E206D PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1A5B9D1959 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0xD8B PUSH2 0x161F JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xDC4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xC18 PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xDDD CALLER DUP4 PUSH2 0x1129 JUMP JUMPDEST PUSH2 0xDF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x21E5 JUMP JUMPDEST PUSH2 0xE05 DUP5 DUP5 DUP5 DUP5 PUSH2 0x17EB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE16 DUP3 PUSH2 0x105C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xE2F SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE5B SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEA8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE7D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xEA8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE8B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xEC6 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xED8 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0xF0A JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xEF2 SWAP3 SWAP2 SWAP1 PUSH2 0x22E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF13 DUP5 PUSH2 0x181E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xF23 PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0xF4A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2232 JUMP JUMPDEST PUSH1 0x1A DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xF91 PUSH2 0x1002 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xFF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0xFFF DUP2 PUSH2 0x12F8 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA13 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x10F0 DUP3 PUSH2 0x91B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1135 DUP4 PUSH2 0x91B JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x115C JUMPI POP PUSH2 0x115C DUP2 DUP6 PUSH2 0xF5B JUMP JUMPDEST DUP1 PUSH2 0xF13 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1175 DUP5 PUSH2 0x6CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x119A DUP3 PUSH2 0x91B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2317 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1222 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x122F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1892 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1242 DUP3 PUSH2 0x91B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1268 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x2317 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x13AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1426 PUSH1 0x1 PUSH1 0x64 PUSH2 0x191A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x143A JUMPI POP PUSH1 0x32 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x154F JUMPI PUSH2 0x15E PUSH1 0x11 SLOAD LT PUSH2 0x1527 JUMPI PUSH1 0xF5 PUSH1 0x12 SLOAD LT PUSH2 0x14FF JUMPI PUSH1 0x13 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1464 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0x14FF PUSH1 0x13 SLOAD PUSH1 0xD DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x14A8 SWAP1 PUSH2 0x21AB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x14F5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x14CA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x14F5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x14D8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x19B3 JUMP JUMPDEST PUSH1 0x12 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x150F DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x12 SLOAD PUSH1 0xC DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x11 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1537 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x11 SLOAD PUSH1 0xB DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x33 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x1561 JUMPI POP PUSH1 0x55 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x15A3 JUMPI PUSH1 0xF5 PUSH1 0x12 SLOAD LT PUSH2 0x14FF JUMPI PUSH2 0x15E PUSH1 0x11 SLOAD LT PUSH2 0x1527 JUMPI PUSH1 0x13 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x158B DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0x1527 PUSH1 0x13 SLOAD PUSH1 0xD DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x56 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x15B5 JUMPI POP PUSH1 0x64 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0xFFF JUMPI PUSH1 0x69 PUSH1 0x13 SLOAD LT PUSH2 0x15F7 JUMPI PUSH2 0x15E PUSH1 0x11 SLOAD LT PUSH2 0x1527 JUMPI PUSH1 0x12 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x15DF DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0x1527 PUSH1 0x12 SLOAD PUSH1 0xC DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x13 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1607 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x13 SLOAD PUSH1 0xD DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x162E PUSH1 0x1 PUSH2 0x3E8 PUSH2 0x191A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x1643 JUMPI POP PUSH2 0x15E DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x1706 JUMPI PUSH1 0x69 PUSH1 0x14 SLOAD LT PUSH2 0x16DE JUMPI PUSH1 0x5A PUSH1 0x15 SLOAD LT PUSH2 0x16B6 JUMPI PUSH1 0x35 PUSH1 0x16 SLOAD LT PUSH2 0x168E JUMPI PUSH1 0x17 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1676 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x17 SLOAD PUSH1 0x10 DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x16 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x169E DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x16 SLOAD PUSH1 0xF DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x15 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x16C6 DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x15 SLOAD PUSH1 0xE DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH1 0x14 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x16EE DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xFFF PUSH1 0x14 SLOAD PUSH1 0xD DUP1 SLOAD PUSH2 0x147C SWAP1 PUSH2 0x21AB JUMP JUMPDEST PUSH2 0x15F DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x171A JUMPI POP PUSH2 0x28A DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x174D JUMPI PUSH1 0x5A PUSH1 0x15 SLOAD LT PUSH2 0x16B6 JUMPI PUSH1 0x69 PUSH1 0x14 SLOAD LT PUSH2 0x16DE JUMPI PUSH1 0x35 PUSH1 0x16 SLOAD LT PUSH2 0x168E JUMPI PUSH1 0x17 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1676 DUP4 PUSH2 0x22CF JUMP JUMPDEST PUSH2 0x28B DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x1761 JUMPI POP PUSH2 0x33B DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x1794 JUMPI PUSH1 0x35 PUSH1 0x16 SLOAD LT PUSH2 0x168E JUMPI PUSH1 0x69 PUSH1 0x14 SLOAD LT PUSH2 0x16DE JUMPI PUSH1 0x5A PUSH1 0x15 SLOAD LT PUSH2 0x16B6 JUMPI PUSH1 0x17 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1676 DUP4 PUSH2 0x22CF JUMP JUMPDEST PUSH2 0x33C DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x17A8 JUMPI POP PUSH2 0x3E8 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0xFFF JUMPI PUSH1 0x34 PUSH1 0x17 SLOAD LT PUSH2 0x17DB JUMPI PUSH1 0x69 PUSH1 0x14 SLOAD LT PUSH2 0x16DE JUMPI PUSH1 0x5A PUSH1 0x15 SLOAD LT PUSH2 0x16B6 JUMPI PUSH1 0x16 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x169E DUP4 PUSH2 0x22CF JUMP JUMPDEST PUSH1 0x17 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1676 DUP4 PUSH2 0x22CF JUMP JUMPDEST PUSH2 0x17F6 DUP5 DUP5 DUP5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x1802 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1A22 JUMP JUMPDEST PUSH2 0xE05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x235C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1829 DUP3 PUSH2 0x105C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1840 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1860 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x188B JUMP JUMPDEST DUP1 PUSH2 0x186A DUP5 PUSH2 0x1B23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x187B SWAP3 SWAP2 SWAP1 PUSH2 0x22E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xE05 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x18D8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x18D2 SWAP1 DUP5 SWAP1 PUSH2 0x23AE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0xE05 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x190F SWAP1 DUP5 SWAP1 PUSH2 0x23C1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1927 DUP5 DUP5 PUSH2 0x23AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 TIMESTAMP CALLER PUSH1 0x1D SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1965 SWAP4 SWAP3 SWAP2 SWAP1 SWAP3 DUP4 MSTORE PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x54 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x1D DUP1 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 PUSH2 0x198F DUP4 PUSH2 0x22CF JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP DUP6 SWAP1 POP PUSH2 0x19A0 DUP4 DUP4 PUSH2 0x23D4 JUMP JUMPDEST PUSH2 0x19AA SWAP2 SWAP1 PUSH2 0x23C1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x19BF DUP5 PUSH2 0x1B23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19D0 SWAP3 SWAP2 SWAP1 PUSH2 0x23F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x19FC CALLER PUSH1 0xA PUSH1 0x0 ADD SLOAD PUSH1 0x1 PUSH2 0x19F7 SWAP2 SWAP1 PUSH2 0x23C1 JUMP JUMPDEST PUSH2 0x1BB6 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x1A14 SWAP1 PUSH2 0x1A0E SWAP1 PUSH1 0x1 PUSH2 0x23C1 JUMP JUMPDEST DUP3 PUSH2 0x1D4F JUMP JUMPDEST PUSH2 0x805 PUSH1 0xA DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1B18 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1A66 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1AA1 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1A9E SWAP2 DUP2 ADD SWAP1 PUSH2 0x2472 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1AFE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1ACF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1AD4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1AF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5DA SWAP1 PUSH2 0x235C JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xF13 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1B30 DUP4 PUSH2 0x1DE2 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B50 JUMPI PUSH2 0x1B50 PUSH2 0x2042 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B7A JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1B84 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1C0C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1C71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x1C7F PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1892 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1CE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1DCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x32BC34B9BA32B73A103A37B5B2B7 PUSH1 0x91 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x805 DUP3 DUP3 PUSH2 0x24DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1E21 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1E4D JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1E6B JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1E83 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1E97 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1EA9 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x59F JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xFFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x188B DUP2 PUSH2 0x1EBA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1F04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x188B DUP3 PUSH2 0x1EED JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1F3F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1F27 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1F60 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1F24 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x188B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FBC DUP4 PUSH2 0x1EED JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1FDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FE8 DUP5 PUSH2 0x1EED JUMP JUMPDEST SWAP3 POP PUSH2 0x1FF6 PUSH1 0x20 DUP6 ADD PUSH2 0x1EED JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2022 DUP4 PUSH2 0x1EED JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2037 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x206E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2077 DUP6 PUSH2 0x1EED JUMP JUMPDEST SWAP4 POP PUSH2 0x2085 PUSH1 0x20 DUP7 ADD PUSH2 0x1EED JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x20A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x20CF JUMPI PUSH2 0x20CF PUSH2 0x2042 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x20F7 JUMPI PUSH2 0x20F7 PUSH2 0x2042 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x2110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2150 DUP4 PUSH2 0x1EED JUMP JUMPDEST SWAP2 POP PUSH2 0x215E PUSH1 0x20 DUP5 ADD PUSH2 0x1EED JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x66726565206D696E742077686974656C697374696E6720706861736520697320 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x37BB32B9 PUSH1 0xE1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x21BF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x21DF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x707265206D696E742077686974656C697374696E67207068617365206973206F PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x3B32B9 PUSH1 0xE9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x596F7520617265206E6F742077686974656C697374656420666F722070726520 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1B5A5B9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x22E1 JUMPI PUSH2 0x22E1 PUSH2 0x22B9 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x22FA DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1F24 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x230E DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1F24 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x59F JUMPI PUSH2 0x59F PUSH2 0x22B9 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x59F JUMPI PUSH2 0x59F PUSH2 0x22B9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x23F1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2408 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1F24 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x241C DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1F24 JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x5 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2468 SWAP1 DUP4 ADD DUP5 PUSH2 0x1F48 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x188B DUP2 PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x805 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x24B6 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x24D5 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x24C2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24F7 JUMPI PUSH2 0x24F7 PUSH2 0x2042 JUMP JUMPDEST PUSH2 0x250B DUP2 PUSH2 0x2505 DUP5 SLOAD PUSH2 0x21AB JUMP JUMPDEST DUP5 PUSH2 0x248F JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2540 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2528 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x24D5 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x256F JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2550 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x258D JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 PUSH7 0x121F7DE202E0F9 PUSH13 0xF37484997F0A379D91BB8861F1 0xDA DIFFICULTY 0x4B SHL DUP11 0xB0 0xED XOR CREATE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"442:9764:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:2;;;;;;;;;;-1:-1:-1;1570:300:2;;;;;:::i;:::-;;:::i;:::-;;;565:14:15;;558:22;540:41;;528:2;513:18;1570:300:2;;;;;;;;2825:243:14;;;;;;;;;;-1:-1:-1;2825:243:14;;;;;:::i;:::-;;:::i;:::-;;2471:98:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;;;;;-1:-1:-1;3935:167:2;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2066:32:15;;;2048:51;;2036:2;2021:18;3935:167:2;1902:203:15;3468:406:2;;;;;;;;;;-1:-1:-1;3468:406:2;;;;;:::i;:::-;;:::i;579:38:14:-;;;;;;;;;;-1:-1:-1;579:38:14;;;;;;;;;2515:25:15;;;2503:2;2488:18;579:38:14;2369:177:15;1320:33:14;;;;;;;;;;;;;;;;3307:191;;;;;;;;;;;;;:::i;4612:326:2:-;;;;;;;;;;-1:-1:-1;4612:326:2;;;;;:::i;:::-;;:::i;5004:179::-;;;;;;;;;;-1:-1:-1;5004:179:2;;;;;:::i;:::-;;:::i;2581:238:14:-;;;;;;;;;;-1:-1:-1;2581:238:14;;;;;:::i;:::-;;:::i;2190:219:2:-;;;;;;;;;;-1:-1:-1;2190:219:2;;;;;:::i;:::-;;:::i;1263:30:14:-;;;;;;;;;;;;;;;;1929:204:2;;;;;;;;;;-1:-1:-1;1929:204:2;;;;;:::i;:::-;;:::i;1831:101:0:-;;;;;;;;;;;;;:::i;10067:137:14:-;;;;;;;;;;;;;:::i;538:35::-;;;;;;;;;;-1:-1:-1;538:35:14;;;;;;1201:85:0;;;;;;;;;;-1:-1:-1;1273:6:0;;-1:-1:-1;;;;;1273:6:0;1201:85;;2633:102:2;;;;;;;;;;;;;:::i;1182:34:14:-;;;;;;;;;;-1:-1:-1;1182:34:14;;;;;;;;4169:153:2;;;;;;;;;;-1:-1:-1;4169:153:2;;;;;:::i;:::-;;:::i;623:35:14:-;;;;;;;;;;-1:-1:-1;623:35:14;;;;;;9174:428;;;:::i;9608:453::-;;;:::i;1156:19::-;;;;;;;;;;;;;;;;5249:314:2;;;;;;;;;;-1:-1:-1;5249:314:2;;;;;:::i;:::-;;:::i;482:608:5:-;;;;;;;;;;-1:-1:-1;482:608:5;;;;;:::i;:::-;;:::i;3074:227:14:-;;;;;;;;;;;;;:::i;4388:162:2:-;;;;;;;;;;-1:-1:-1;4388:162:2;;;;;:::i;:::-;;:::i;1222:35:14:-;;;;;;;;;;-1:-1:-1;1222:35:14;;;;;;;;;;;2081:198:0;;;;;;;;;;-1:-1:-1;2081:198:0;;;;;:::i;:::-;;:::i;1570:300:2:-;1672:4;-1:-1:-1;;;;;;1707:40:2;;-1:-1:-1;;;1707:40:2;;:104;;-1:-1:-1;;;;;;;1763:48:2;;-1:-1:-1;;;1763:48:2;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:11;;;1827:36:2;1688:175;1570:300;-1:-1:-1;;1570:300:2:o;2825:243:14:-;1094:13:0;:11;:13::i;:::-;2911:23:14::1;::::0;::::1;;::::0;;::::1;;:31;;:23;:31;2903:80;;;;-1:-1:-1::0;;;2903:80:14::1;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1::0;;;;;2993:21:14;::::1;;::::0;;;:11:::1;:21:::0;;;;;;;;:28;;-1:-1:-1;;2993:28:14::1;3017:4;2993:28;::::0;;3036:25;;2048:51:15;;;3036:25:14::1;::::0;2021:18:15;3036:25:14::1;;;;;;;;2825:243:::0;:::o;2471:98:2:-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:2;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:2;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:2;:2;-1:-1:-1;;;;;3605:11:2;;3597:57;;;;-1:-1:-1;;;3597:57:2;;5768:2:15;3597:57:2;;;5750:21:15;5807:2;5787:18;;;5780:30;5846:34;5826:18;;;5819:62;-1:-1:-1;;;5897:18:15;;;5890:31;5938:19;;3597:57:2;5566:397:15;3597:57:2;719:10:8;-1:-1:-1;;;;;3686:21:2;;;;:62;;-1:-1:-1;3711:37:2;3728:5;719:10:8;4388:162:2;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:2;;6170:2:15;3665:170:2;;;6152:21:15;6209:2;6189:18;;;6182:30;6248:34;6228:18;;;6221:62;6319:31;6299:18;;;6292:59;6368:19;;3665:170:2;5968:425:15;3665:170:2;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;3307:191:14:-;1094:13:0;:11;:13::i;:::-;3378:23:14::1;::::0;::::1;;::::0;;::::1;;:31;;:23;:31;3370:80;;;;-1:-1:-1::0;;;3370:80:14::1;;;;;;;:::i;:::-;3460:23;:31:::0;;-1:-1:-1;;3460:31:14::1;::::0;;3307:191::o;4612:326:2:-;4801:41;719:10:8;4834:7:2;4801:18;:41::i;:::-;4793:99;;;;-1:-1:-1;;;4793:99:2;;;;;;;:::i;:::-;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;2581:238:14:-;1094:13:0;:11;:13::i;:::-;2666:22:14::1;::::0;::::1;;:30;;:22:::0;:30:::1;2658:78;;;;-1:-1:-1::0;;;2658:78:14::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;2746:20:14;::::1;;::::0;;;:10:::1;:20;::::0;;;;;;;;:27;;-1:-1:-1;;2746:27:14::1;2769:4;2746:27;::::0;;2788:24;;2048:51:15;;;2788:24:14::1;::::0;2021:18:15;2788:24:14::1;1902:203:15::0;2190:219:2;2262:7;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;;2324:56;;;;-1:-1:-1;;;2324:56:2;;7418:2:15;2324:56:2;;;7400:21:15;7457:2;7437:18;;;7430:30;-1:-1:-1;;;7476:18:15;;;7469:54;7540:18;;2324:56:2;7216:348:15;1929:204:2;2001:7;-1:-1:-1;;;;;2028:19:2;;2020:73;;;;-1:-1:-1;;;2020:73:2;;7771:2:15;2020:73:2;;;7753:21:15;7810:2;7790:18;;;7783:30;7849:34;7829:18;;;7822:62;-1:-1:-1;;;7900:18:15;;;7893:39;7949:19;;2020:73:2;7569:405:15;2020:73:2;-1:-1:-1;;;;;;2110:16:2;;;;;:9;:16;;;;;;;1929:204::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;10067:137:14:-;1094:13:0;:11;:13::i;:::-;10119:12:14::1;10134:7;1273:6:0::0;;-1:-1:-1;;;;;1273:6:0;;1201:85;10134:7:14::1;10152:45;::::0;10119:22;;-1:-1:-1;;;;;;10152:22:14;::::1;::::0;10175:21:::1;10152:45:::0;::::1;;;::::0;::::1;::::0;;;10175:21;10152:22;:45;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;10109:95;10067:137::o:0;2633:102:2:-;2689:13;2721:7;2714:14;;;;;:::i;4169:153::-;4263:52;719:10:8;4296:8:2;4306;4263:18;:52::i;9174:428:14:-;2060:10;2049:22;;;;:10;:22;;;;;;;;2040:72;;;;-1:-1:-1;;;2040:72:14;;;;;;;:::i;:::-;9254:10:::1;9248:17;::::0;;;:5:::1;:17;::::0;;;;:29:::1;;::::0;9280:1:::1;-1:-1:-1::0;9240:82:14::1;;;::::0;-1:-1:-1;;;9240:82:14;;8586:2:15;9240:82:14::1;::::0;::::1;8568:21:15::0;8625:2;8605:18;;;8598:30;8664:34;8644:18;;;8637:62;-1:-1:-1;;;8715:18:15;;;8708:34;8759:19;;9240:82:14::1;8384:400:15::0;9240:82:14::1;9353:8;;9340:9;:21;9332:51;;;::::0;-1:-1:-1;;;9332:51:14;;8991:2:15;9332:51:14::1;::::0;::::1;8973:21:15::0;9030:2;9010:18;;;9003:30;-1:-1:-1;;;9049:18:15;;;9042:47;9106:18;;9332:51:14::1;8789:341:15::0;9332:51:14::1;9401:11;:18:::0;9423:3:::1;-1:-1:-1::0;9401:25:14::1;9393:72;;;::::0;-1:-1:-1;;;9393:72:14;;9337:2:15;9393:72:14::1;::::0;::::1;9319:21:15::0;9376:2;9356:18;;;9349:30;9415:34;9395:18;;;9388:62;-1:-1:-1;;;9466:18:15;;;9459:32;9508:19;;9393:72:14::1;9135:398:15::0;9393:72:14::1;9475:6;:4;:6::i;:::-;9491:10;::::0;:30:::1;::::0;-1:-1:-1;;;;;9491:10:14;;::::1;::::0;9511:9:::1;9491:30:::0;::::1;;;::::0;:10:::1;:30:::0;:10;:30;9511:9;9491:10;:30;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;9531:23;:11;1032:19:9::0;;1050:1;1032:19;;;945:123;9531:23:14::1;9570:10;9564:17;::::0;;;:5:::1;:17;::::0;;;;:29:::1;;:31:::0;;;::::1;::::0;::::1;:::i;:::-;;;;;;9174:428::o:0;9608:453::-;2060:10;2049:22;;;;:10;:22;;;;;;;;2040:72;;;;-1:-1:-1;;;2040:72:14;;;;;;;:::i;:::-;9691:10:::1;9685:17;::::0;;;:5:::1;:17;::::0;;;;:32;9720:1:::1;-1:-1:-1::0;9677:88:14::1;;;::::0;-1:-1:-1;;;9677:88:14;;10012:2:15;9677:88:14::1;::::0;::::1;9994:21:15::0;10051:2;10031:18;;;10024:30;10090:34;10070:18;;;10063:62;-1:-1:-1;;;10141:18:15;;;10134:37;10188:19;;9677:88:14::1;9810:403:15::0;9677:88:14::1;9796:11;;9783:9;:24;9775:55;;;::::0;-1:-1:-1;;;9775:55:14;;10420:2:15;9775:55:14::1;::::0;::::1;10402:21:15::0;10459:2;10439:18;;;10432:30;-1:-1:-1;;;10478:18:15;;;10471:48;10536:18;;9775:55:14::1;10218:342:15::0;9775:55:14::1;9848:14;:21:::0;9873:3:::1;-1:-1:-1::0;9848:28:14::1;9840:78;;;::::0;-1:-1:-1;;;9840:78:14;;10767:2:15;9840:78:14::1;::::0;::::1;10749:21:15::0;10806:2;10786:18;;;10779:30;10845:34;10825:18;;;10818:62;-1:-1:-1;;;10896:18:15;;;10889:35;10941:19;;9840:78:14::1;10565:401:15::0;9840:78:14::1;9928:9;:7;:9::i;:::-;9947:10;::::0;:30:::1;::::0;-1:-1:-1;;;;;9947:10:14;;::::1;::::0;9967:9:::1;9947:30:::0;::::1;;;::::0;:10:::1;:30:::0;:10;:30;9967:9;9947:10;:30;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;9987:26;:14;1032:19:9::0;;1050:1;1032:19;;;945:123;5249:314:2;5417:41;719:10:8;5450:7:2;5417:18;:41::i;:::-;5409:99;;;;-1:-1:-1;;;5409:99:2;;;;;;;:::i;:::-;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;482:608:5:-;555:13;580:23;595:7;580:14;:23::i;:::-;614;640:19;;;:10;:19;;;;;614:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;669:18;690:10;3395:9:2;;;;;;;;;-1:-1:-1;3395:9:2;;;3319:92;690:10:5;669:31;;779:4;773:18;795:1;773:23;769:70;;-1:-1:-1;819:9:5;482:608;-1:-1:-1;;482:608:5:o;769:70::-;941:23;;:27;937:106;;1015:4;1021:9;998:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;984:48;;;;482:608;;;:::o;937:106::-;1060:23;1075:7;1060:14;:23::i;:::-;1053:30;482:608;-1:-1:-1;;;;482:608:5:o;3074:227:14:-;1094:13:0;:11;:13::i;:::-;3144:22:14::1;::::0;::::1;;:30;;:22:::0;:30:::1;3136:78;;;;-1:-1:-1::0;;;3136:78:14::1;;;;;;;:::i;:::-;3224:22;:30:::0;;-1:-1:-1;;3264:30:14;3224::::1;3264;::::0;;3074:227::o;4388:162:2:-;-1:-1:-1;;;;;4508:25:2;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162::o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;11674:2:15;2161:73:0::1;::::0;::::1;11656:21:15::0;11713:2;11693:18;;;11686:30;11752:34;11732:18;;;11725:62;-1:-1:-1;;;11803:18:15;;;11796:36;11849:19;;2161:73:0::1;11472:402:15::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1359:130::-;1273:6;;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;12081:2:15;1414:68:0;;;12063:21:15;;;12100:18;;;12093:30;12159:34;12139:18;;;12132:62;12211:18;;1414:68:0;11879:356:15;13466:133:2;7321:4;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;13539:53;;;;-1:-1:-1;;;13539:53:2;;7418:2:15;13539:53:2;;;7400:21:15;7457:2;7437:18;;;7430:30;-1:-1:-1;;;7476:18:15;;;7469:54;7540:18;;13539:53:2;7216:348:15;12768:171:2;12842:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;12842:29:2;-1:-1:-1;;;;;12842:29:2;;;;;;;;:24;;12895:23;12842:24;12895:14;:23::i;:::-;-1:-1:-1;;;;;12886:46:2;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;-1:-1:-1;;;;;7706:16:2;:7;-1:-1:-1;;;;;7706:16:2;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:87;;;;7786:7;-1:-1:-1;;;;;7762:31:2;:20;7774:7;7762:11;:20::i;:::-;-1:-1:-1;;;;;7762:31:2;;7698:96;7540:261;-1:-1:-1;;;;7540:261:2:o;11423:1233::-;11577:4;-1:-1:-1;;;;;11550:31:2;:23;11565:7;11550:14;:23::i;:::-;-1:-1:-1;;;;;11550:31:2;;11542:81;;;;-1:-1:-1;;;11542:81:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;11641:16:2;;11633:65;;;;-1:-1:-1;;;11633:65:2;;12848:2:15;11633:65:2;;;12830:21:15;12887:2;12867:18;;;12860:30;12926:34;12906:18;;;12899:62;-1:-1:-1;;;12977:18:15;;;12970:34;13021:19;;11633:65:2;12646:400:15;11633:65:2;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;-1:-1:-1;;;;;11851:31:2;:23;11866:7;11851:14;:23::i;:::-;-1:-1:-1;;;;;11851:31:2;;11843:81;;;;-1:-1:-1;;;11843:81:2;;;;;;;:::i;:::-;11993:24;;;;:15;:24;;;;;;;;11986:31;;-1:-1:-1;;;;;;11986:31:2;;;;;;-1:-1:-1;;;;;12461:15:2;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;12461:20:2;;;12495:13;;;;;;;;;:18;;11986:31;12495:18;;;12533:16;;;:7;:16;;;;;;:21;;;;;;;;;;12570:27;;12009:7;;12570:27;;;3538:336;3468:406;;:::o;2433:187:0:-;2525:6;;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;13075:307:2:-;13225:8;-1:-1:-1;;;;;13216:17:2;:5;-1:-1:-1;;;;;13216:17:2;;13208:55;;;;-1:-1:-1;;;13208:55:2;;13253:2:15;13208:55:2;;;13235:21:15;13292:2;13272:18;;;13265:30;13331:27;13311:18;;;13304:55;13376:18;;13208:55:2;13051:349:15;13208:55:2;-1:-1:-1;;;;;13273:25:2;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13273:46:2;;;;;;;;;;13334:41;;540::15;;;13334::2;;513:18:15;13334:41:2;;;;;;;13075:307;;;:::o;4090:1596:14:-;4125:7;4135:14;4142:1;4145:3;4135:6;:14::i;:::-;4125:24;;4169:1;4163:2;:7;;:19;;;;;4180:2;4174;:8;;4163:19;4159:1521;;;4224:3;4210:10;;:17;4206:439;;4278:3;4263:11;;:18;4259:158;;4321:13;:15;;;:13;:15;;;:::i;:::-;;;;;;4358:40;4368:13;;4383:14;4358:40;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:9;:40::i;:::-;4434:11;:13;;;:11;:13;;;:::i;:::-;;;;;;4465:37;4475:11;;4488:13;4465:37;;;;;:::i;4206:439::-;4565:10;:12;;;:10;:12;;;:::i;:::-;;;;;;4595:35;4605:10;;4617:12;4595:35;;;;;:::i;4159:1521::-;4679:2;4673;:8;;:20;;;;;4691:2;4685;:8;;4673:20;4669:1011;;;4736:3;4721:11;;:18;4717:439;;4789:3;4775:10;;:17;4771:157;;4832:13;:15;;;:13;:15;;;:::i;:::-;;;;;;4869:40;4879:13;;4894:14;4869:40;;;;;:::i;4669:1011::-;5190:2;5184;:8;;:21;;;;;5202:3;5196:2;:9;;5184:21;5180:500;;;5250:3;5233:13;;:20;5229:441;;5303:3;5289:10;;:17;5285:152;;5346:11;:13;;;:11;:13;;;:::i;:::-;;;;;;5381:37;5391:11;;5404:13;5381:37;;;;;:::i;5229:441::-;5582:13;:15;;;:13;:15;;;:::i;:::-;;;;;;5615:40;5625:13;;5640:14;5615:40;;;;;:::i;5692:3475::-;5730:7;5740:15;5747:1;5750:4;5740:6;:15::i;:::-;5730:25;;5775:1;5769:2;:7;;:20;;;;;5786:3;5780:2;:9;;5769:20;5765:3396;;;5834:3;5817:13;;:20;5813:779;;5888:2;5873:11;;:17;5869:573;;5950:2;5934:12;;:18;5930:343;;6000:11;:13;;;:11;:13;;;:::i;:::-;;;;;;6039:37;6049:11;;6062:13;6039:37;;;;;:::i;5930:343::-;6171:12;:14;;;:12;:14;;;:::i;:::-;;;;;;6211:39;6221:12;;6235:14;6211:39;;;;;:::i;5869:573::-;6351:11;:13;;;:11;:13;;;:::i;:::-;;;;;;6386:37;6396:11;;6409:13;6386:37;;;;;:::i;5813:779::-;6504:13;:15;;;:13;:15;;;:::i;:::-;;;;;;6537:40;6547:13;;6562:14;6537:40;;;;;:::i;5765:3396::-;6626:3;6620:2;:9;;:22;;;;;6639:3;6633:2;:9;;6620:22;6616:2545;;;6685:2;6670:11;;:17;6666:779;;6740:3;6723:13;;:20;6719:581;;6803:2;6787:12;;:18;6783:343;;6853:11;:13;;;:11;:13;;;:::i;6616:2545::-;7479:3;7473:2;:9;;:22;;;;;7492:3;7486:2;:9;;7473:22;7469:1692;;;7539:2;7523:12;;:18;7519:779;;7594:3;7577:13;;:20;7573:577;;7656:2;7641:11;;:17;7637:339;;7706:11;:13;;;:11;:13;;;:::i;7469:1692::-;8332:3;8326:2;:9;;:23;;;;;8345:4;8339:2;:10;;8326:23;8322:839;;;8392:2;8377:11;;:17;8373:778;;8447:3;8430:13;;:20;8426:580;;8509:2;8494:11;;:17;8490:342;;8559:12;:14;;;:12;:14;;;:::i;8373:778::-;9068:11;:13;;;:11;:13;;;:::i;6424:305:2:-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;-1:-1:-1;;;6612:110:2;;;;;;;:::i;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;3395:9;;;;;;;;;-1:-1:-1;3395:9:2;;;3319:92;2957:10;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;2801:276;-1:-1:-1;;;2801:276:2:o;15698:396::-;15882:1;15870:9;:13;15866:222;;;-1:-1:-1;;;;;15903:18:2;;;15899:85;;-1:-1:-1;;;;;15941:15:2;;;;;;:9;:15;;;;;:28;;15960:9;;15941:15;:28;;15960:9;;15941:28;:::i;:::-;;;;-1:-1:-1;;15899:85:2;-1:-1:-1;;;;;16001:16:2;;;15997:81;;-1:-1:-1;;;;;16037:13:2;;;;;;:9;:13;;;;;:26;;16054:9;;16037:13;:26;;16054:9;;16037:26;:::i;:::-;;;;-1:-1:-1;;15698:396:2;;;;:::o;3504:260:14:-;3557:4;;3586:9;3591:4;3586:2;:9;:::i;:::-;3573:22;;3605:17;3657:15;3674:10;3686:5;;3640:52;;;;;;;;;14272:19:15;;;14329:2;14325:15;;;;-1:-1:-1;;14321:53:15;14316:2;14307:12;;14300:75;14400:2;14391:12;;14384:28;14437:2;14428:12;;14087:359;3640:52:14;;;;-1:-1:-1;;3640:52:14;;;;;;;;;3630:63;;3640:52;3630:63;;;;3704:5;:7;;3630:63;;-1:-1:-1;3625:69:14;3704:7;;;:::i;:::-;;;;-1:-1:-1;3753:4:14;;-1:-1:-1;3729:20:14;3744:5;3729:12;:20;:::i;:::-;3728:29;;;;:::i;:::-;3721:36;3504:260;-1:-1:-1;;;;;3504:260:14:o;3770:313::-;3845:24;3896:12;3910:13;:2;:11;:13::i;:::-;3879:54;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3845:89;;3944:41;3950:10;3962:11;:18;;;3983:1;3962:22;;;;:::i;:::-;3944:5;:41::i;:::-;4008:11;:18;3995:48;;4008:22;;4029:1;4008:22;:::i;:::-;4032:10;3995:12;:48::i;:::-;4053:23;:11;1032:19:9;;1050:1;1032:19;;;945:123;14151:831:2;14300:4;-1:-1:-1;;;;;14320:13:2;;1465:19:7;:23;14316:660:2;;14355:71;;-1:-1:-1;;;14355:71:2;;-1:-1:-1;;;;;14355:36:2;;;;;:71;;719:10:8;;14406:4:2;;14412:7;;14421:4;;14355:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14355:71:2;;;;;;;;-1:-1:-1;;14355:71:2;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14593:6;:13;14610:1;14593:18;14589:321;;14635:60;;-1:-1:-1;;;14635:60:2;;;;;;;:::i;14589:321::-;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;-1:-1:-1;;;;;;14476:51:2;-1:-1:-1;;;14476:51:2;;-1:-1:-1;14469:58:2;;14316:660;-1:-1:-1;14961:4:2;14151:831;;;;;;:::o;415:696:10:-;471:13;520:14;537:17;548:5;537:10;:17::i;:::-;557:1;537:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;595:18:10;-1:-1:-1;572:41:10;-1:-1:-1;733:28:10;;;749:2;733:28;788:280;-1:-1:-1;;819:5:10;-1:-1:-1;;;953:2:10;942:14;;937:30;819:5;924:44;1012:2;1003:11;;;-1:-1:-1;1032:21:10;788:280;1032:21;-1:-1:-1;1088:6:10;415:696;-1:-1:-1;;;415:696:10:o;9091:920:2:-;-1:-1:-1;;;;;9170:16:2;;9162:61;;;;-1:-1:-1;;;9162:61:2;;16415:2:15;9162:61:2;;;16397:21:15;;;16434:18;;;16427:30;16493:34;16473:18;;;16466:62;16545:18;;9162:61:2;16213:356:15;9162:61:2;7321:4;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;7344:31;9233:58;;;;-1:-1:-1;;;9233:58:2;;16776:2:15;9233:58:2;;;16758:21:15;16815:2;16795:18;;;16788:30;16854;16834:18;;;16827:58;16902:18;;9233:58:2;16574:352:15;9233:58:2;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;7321:4;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;7344:31;9437:58;;;;-1:-1:-1;;;9437:58:2;;16776:2:15;9437:58:2;;;16758:21:15;16815:2;16795:18;;;16788:30;16854;16834:18;;;16827:58;16902:18;;9437:58:2;16574:352:15;9437:58:2;-1:-1:-1;;;;;9837:13:2;;;;;;:9;:13;;;;;;;;:18;;9854:1;9837:18;;;9876:16;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9876:21:2;;;;;9913:33;9884:7;;9837:13;;9913:33;;9837:13;;9913:33;10152:45:14::1;10109:95;10067:137::o:0;1237:214:5:-;7321:4:2;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;1328:75:5;;;;-1:-1:-1;;;1328:75:5;;17133:2:15;1328:75:5;;;17115:21:15;17172:2;17152:18;;;17145:30;17211:34;17191:18;;;17184:62;-1:-1:-1;;;17262:18:15;;;17255:44;17316:19;;1328:75:5;16931:410:15;1328:75:5;1413:19;;;;:10;:19;;;;;:31;1435:9;1413:19;:31;:::i;9889:890:13:-;9942:7;;-1:-1:-1;;;10017:15:13;;10013:99;;-1:-1:-1;;;10052:15:13;;;-1:-1:-1;10095:2:13;10085:12;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;-1:-1:-1;10207:2:13;10197:12;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;-1:-1:-1;10319:2:13;10309:12;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;-1:-1:-1;10429:1:13;10419:11;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;-1:-1:-1;10538:1:13;10528:11;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;-1:-1:-1;10647:1:13;10637:11;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;10766:6;9889:890;-1:-1:-1;;9889:890:13:o;14:131:15:-;-1:-1:-1;;;;;;88:32:15;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:173::-;660:20;;-1:-1:-1;;;;;709:31:15;;699:42;;689:70;;755:1;752;745:12;689:70;592:173;;;:::o;770:186::-;829:6;882:2;870:9;861:7;857:23;853:32;850:52;;;898:1;895;888:12;850:52;921:29;940:9;921:29;:::i;961:250::-;1046:1;1056:113;1070:6;1067:1;1064:13;1056:113;;;1146:11;;;1140:18;1127:11;;;1120:39;1092:2;1085:10;1056:113;;;-1:-1:-1;;1203:1:15;1185:16;;1178:27;961:250::o;1216:271::-;1258:3;1296:5;1290:12;1323:6;1318:3;1311:19;1339:76;1408:6;1401:4;1396:3;1392:14;1385:4;1378:5;1374:16;1339:76;:::i;:::-;1469:2;1448:15;-1:-1:-1;;1444:29:15;1435:39;;;;1476:4;1431:50;;1216:271;-1:-1:-1;;1216:271:15:o;1492:220::-;1641:2;1630:9;1623:21;1604:4;1661:45;1702:2;1691:9;1687:18;1679:6;1661:45;:::i;1717:180::-;1776:6;1829:2;1817:9;1808:7;1804:23;1800:32;1797:52;;;1845:1;1842;1835:12;1797:52;-1:-1:-1;1868:23:15;;1717:180;-1:-1:-1;1717:180:15:o;2110:254::-;2178:6;2186;2239:2;2227:9;2218:7;2214:23;2210:32;2207:52;;;2255:1;2252;2245:12;2207:52;2278:29;2297:9;2278:29;:::i;:::-;2268:39;2354:2;2339:18;;;;2326:32;;-1:-1:-1;;;2110:254:15:o;2551:328::-;2628:6;2636;2644;2697:2;2685:9;2676:7;2672:23;2668:32;2665:52;;;2713:1;2710;2703:12;2665:52;2736:29;2755:9;2736:29;:::i;:::-;2726:39;;2784:38;2818:2;2807:9;2803:18;2784:38;:::i;:::-;2774:48;;2869:2;2858:9;2854:18;2841:32;2831:42;;2551:328;;;;;:::o;2884:347::-;2949:6;2957;3010:2;2998:9;2989:7;2985:23;2981:32;2978:52;;;3026:1;3023;3016:12;2978:52;3049:29;3068:9;3049:29;:::i;:::-;3039:39;;3128:2;3117:9;3113:18;3100:32;3175:5;3168:13;3161:21;3154:5;3151:32;3141:60;;3197:1;3194;3187:12;3141:60;3220:5;3210:15;;;2884:347;;;;;:::o;3236:127::-;3297:10;3292:3;3288:20;3285:1;3278:31;3328:4;3325:1;3318:15;3352:4;3349:1;3342:15;3368:1138;3463:6;3471;3479;3487;3540:3;3528:9;3519:7;3515:23;3511:33;3508:53;;;3557:1;3554;3547:12;3508:53;3580:29;3599:9;3580:29;:::i;:::-;3570:39;;3628:38;3662:2;3651:9;3647:18;3628:38;:::i;:::-;3618:48;;3713:2;3702:9;3698:18;3685:32;3675:42;;3768:2;3757:9;3753:18;3740:32;3791:18;3832:2;3824:6;3821:14;3818:34;;;3848:1;3845;3838:12;3818:34;3886:6;3875:9;3871:22;3861:32;;3931:7;3924:4;3920:2;3916:13;3912:27;3902:55;;3953:1;3950;3943:12;3902:55;3989:2;3976:16;4011:2;4007;4004:10;4001:36;;;4017:18;;:::i;:::-;4092:2;4086:9;4060:2;4146:13;;-1:-1:-1;;4142:22:15;;;4166:2;4138:31;4134:40;4122:53;;;4190:18;;;4210:22;;;4187:46;4184:72;;;4236:18;;:::i;:::-;4276:10;4272:2;4265:22;4311:2;4303:6;4296:18;4351:7;4346:2;4341;4337;4333:11;4329:20;4326:33;4323:53;;;4372:1;4369;4362:12;4323:53;4428:2;4423;4419;4415:11;4410:2;4402:6;4398:15;4385:46;4473:1;4468:2;4463;4455:6;4451:15;4447:24;4440:35;4494:6;4484:16;;;;;;;3368:1138;;;;;;;:::o;4511:260::-;4579:6;4587;4640:2;4628:9;4619:7;4615:23;4611:32;4608:52;;;4656:1;4653;4646:12;4608:52;4679:29;4698:9;4679:29;:::i;:::-;4669:39;;4727:38;4761:2;4750:9;4746:18;4727:38;:::i;:::-;4717:48;;4511:260;;;;;:::o;4776:400::-;4978:2;4960:21;;;5017:2;4997:18;;;4990:30;5056:34;5051:2;5036:18;;5029:62;-1:-1:-1;;;5122:2:15;5107:18;;5100:34;5166:3;5151:19;;4776:400::o;5181:380::-;5260:1;5256:12;;;;5303;;;5324:61;;5378:4;5370:6;5366:17;5356:27;;5324:61;5431:2;5423:6;5420:14;5400:18;5397:38;5394:161;;5477:10;5472:3;5468:20;5465:1;5458:31;5512:4;5509:1;5502:15;5540:4;5537:1;5530:15;5394:161;;5181:380;;;:::o;6398:409::-;6600:2;6582:21;;;6639:2;6619:18;;;6612:30;6678:34;6673:2;6658:18;;6651:62;-1:-1:-1;;;6744:2:15;6729:18;;6722:43;6797:3;6782:19;;6398:409::o;6812:399::-;7014:2;6996:21;;;7053:2;7033:18;;;7026:30;7092:34;7087:2;7072:18;;7065:62;-1:-1:-1;;;7158:2:15;7143:18;;7136:33;7201:3;7186:19;;6812:399::o;7979:400::-;8181:2;8163:21;;;8220:2;8200:18;;;8193:30;8259:34;8254:2;8239:18;;8232:62;-1:-1:-1;;;8325:2:15;8310:18;;8303:34;8369:3;8354:19;;7979:400::o;9538:127::-;9599:10;9594:3;9590:20;9587:1;9580:31;9630:4;9627:1;9620:15;9654:4;9651:1;9644:15;9670:135;9709:3;9730:17;;;9727:43;;9750:18;;:::i;:::-;-1:-1:-1;9797:1:15;9786:13;;9670:135::o;10971:496::-;11150:3;11188:6;11182:13;11204:66;11263:6;11258:3;11251:4;11243:6;11239:17;11204:66;:::i;:::-;11333:13;;11292:16;;;;11355:70;11333:13;11292:16;11402:4;11390:17;;11355:70;:::i;:::-;11441:20;;10971:496;-1:-1:-1;;;;10971:496:15:o;12240:401::-;12442:2;12424:21;;;12481:2;12461:18;;;12454:30;12520:34;12515:2;12500:18;;12493:62;-1:-1:-1;;;12586:2:15;12571:18;;12564:35;12631:3;12616:19;;12240:401::o;13405:414::-;13607:2;13589:21;;;13646:2;13626:18;;;13619:30;13685:34;13680:2;13665:18;;13658:62;-1:-1:-1;;;13751:2:15;13736:18;;13729:48;13809:3;13794:19;;13405:414::o;13824:128::-;13891:9;;;13912:11;;;13909:37;;;13926:18;;:::i;13957:125::-;14022:9;;;14043:10;;;14040:36;;;14056:18;;:::i;14583:209::-;14615:1;14641;14631:132;;14685:10;14680:3;14676:20;14673:1;14666:31;14720:4;14717:1;14710:15;14748:4;14745:1;14738:15;14631:132;-1:-1:-1;14777:9:15;;14583:209::o;14797:663::-;15077:3;15115:6;15109:13;15131:66;15190:6;15185:3;15178:4;15170:6;15166:17;15131:66;:::i;:::-;15260:13;;15219:16;;;;15282:70;15260:13;15219:16;15329:4;15317:17;;15282:70;:::i;:::-;-1:-1:-1;;;15374:20:15;;15403:22;;;15452:1;15441:13;;14797:663;-1:-1:-1;;;;14797:663:15:o;15465:489::-;-1:-1:-1;;;;;15734:15:15;;;15716:34;;15786:15;;15781:2;15766:18;;15759:43;15833:2;15818:18;;15811:34;;;15881:3;15876:2;15861:18;;15854:31;;;15659:4;;15902:46;;15928:19;;15920:6;15902:46;:::i;:::-;15894:54;15465:489;-1:-1:-1;;;;;;15465:489:15:o;15959:249::-;16028:6;16081:2;16069:9;16060:7;16056:23;16052:32;16049:52;;;16097:1;16094;16087:12;16049:52;16129:9;16123:16;16148:30;16172:5;16148:30;:::i;17472:545::-;17574:2;17569:3;17566:11;17563:448;;;17610:1;17635:5;17631:2;17624:17;17680:4;17676:2;17666:19;17750:2;17738:10;17734:19;17731:1;17727:27;17721:4;17717:38;17786:4;17774:10;17771:20;17768:47;;;-1:-1:-1;17809:4:15;17768:47;17864:2;17859:3;17855:12;17852:1;17848:20;17842:4;17838:31;17828:41;;17919:82;17937:2;17930:5;17927:13;17919:82;;;17982:17;;;17963:1;17952:13;17919:82;;;17923:3;;;17472:545;;;:::o;18193:1352::-;18319:3;18313:10;18346:18;18338:6;18335:30;18332:56;;;18368:18;;:::i;:::-;18397:97;18487:6;18447:38;18479:4;18473:11;18447:38;:::i;:::-;18441:4;18397:97;:::i;:::-;18549:4;;18613:2;18602:14;;18630:1;18625:663;;;;19332:1;19349:6;19346:89;;;-1:-1:-1;19401:19:15;;;19395:26;19346:89;-1:-1:-1;;18150:1:15;18146:11;;;18142:24;18138:29;18128:40;18174:1;18170:11;;;18125:57;19448:81;;18595:944;;18625:663;17419:1;17412:14;;;17456:4;17443:18;;-1:-1:-1;;18661:20:15;;;18779:236;18793:7;18790:1;18787:14;18779:236;;;18882:19;;;18876:26;18861:42;;18974:27;;;;18942:1;18930:14;;;;18809:19;;18779:236;;;18783:3;19043:6;19034:7;19031:19;19028:201;;;19104:19;;;19098:26;-1:-1:-1;;19187:1:15;19183:14;;;19199:3;19179:24;19175:37;19171:42;19156:58;19141:74;;19028:201;-1:-1:-1;;;;;19275:1:15;19259:14;;;19255:22;19242:36;;-1:-1:-1;18193:1352:15:o"},"gasEstimates":{"creation":{"codeDepositCost":"1936600","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balance()":"2362","balanceOf(address)":"2678","canWhitelistforFreeMint()":"2398","canWhitelistforPreMint()":"2344","diamondCost()":"2407","diamondsMinted()":"2388","finishFreeMintListing()":"28721","finishPreMintListing()":"28711","getApproved(uint256)":"4770","goldCost()":"2362","goldsMinted()":"2366","isApprovedForAll(address,address)":"infinite","name()":"infinite","owner()":"2421","ownerOf(uint256)":"2583","preMintDiamond()":"infinite","preMintGold()":"infinite","renounceOwnership()":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26750","supportsInterface(bytes4)":"557","symbol()":"infinite","tokenURI(uint256)":"infinite","totalMinted()":"2387","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"28446","whitelistForFreeMint(address)":"30061","whitelistForPreMint(address)":"30104","withdrawAll()":"infinite"},"internal":{"diamond()":"infinite","gold()":"infinite","random(uint256,uint256)":"infinite","setBaseURI(string memory[] memory)":"infinite","startMint(uint256,string memory)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balance()":"b69ef8a8","balanceOf(address)":"70a08231","canWhitelistforFreeMint()":"ed5e57b8","canWhitelistforPreMint()":"9cc11d02","diamondCost()":"1f69f030","diamondsMinted()":"182ea932","finishFreeMintListing()":"207d95a5","finishPreMintListing()":"d5a02dfa","getApproved(uint256)":"081812fc","goldCost()":"65f9c656","goldsMinted()":"8d0a284b","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","preMintDiamond()":"b4d93b07","preMintGold()":"af2a9190","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","totalMinted()":"a2309ff8","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","whitelistForFreeMint(address)":"04baffc7","whitelistForPreMint(address)":"53a6cef5","withdrawAll()":"853828b6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_collectionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_collectionSymbol\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_baseURIs\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserCanFreeMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserCanPreMint\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWhitelistforFreeMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWhitelistforPreMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondsMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishFreeMintListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishPreMintListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldsMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintDiamond\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintGold\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"whitelistForFreeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"whitelistForPreMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mint.sol\":\"Mint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Mint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\"; \\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Mint is ERC721URIStorage, Ownable {\\n     \\n    using Counters for Counters.Counter;\\n    Counters.Counter public goldsMinted;\\n    Counters.Counter public diamondsMinted;\\n    Counters.Counter public totalMinted;\\n\\n    using Strings for uint256;\\n\\n    string internal baseURIVenus;\\n    string internal baseURIMars_1;\\n    string internal baseURIJupiter;\\n    string internal baseURIUranus;\\n    string internal baseURINeptune;\\n    string internal baseURIMars_2;\\n\\n    uint private indexVenus;\\n    uint private indexMars_1;\\n    uint private indexJupiterG;\\n    uint private indexJupiterD;\\n    uint private indexUranus;\\n    uint private indexNeptune;\\n    uint private indexMars_2;\\n\\n    address payable incAccount;\\n    uint public balance;\\n\\n    bool public canWhitelistforPreMint;\\n    bool public canWhitelistforFreeMint;\\n    uint public goldCost = 1 ether; // 25 MATIC normally\\n    uint public diamondCost = 5 ether; // 130 MATIC normally\\n    uint private nonce;\\n\\n    struct User {\\n        uint diamondsBought;\\n        uint goldsBought;\\n    }\\n\\n    mapping (address => User) users;\\n\\n    mapping (address => bool) canPreMint;\\n    mapping (address => bool) canFreeMint;\\n    \\n\\n    event UserCanPreMint(address userAddress);\\n    event UserCanFreeMint(address userAddress);\\n\\n    constructor (string memory _collectionName, string memory _collectionSymbol, string[] memory _baseURIs) ERC721 (_collectionName, _collectionSymbol) {\\n        setBaseURI(_baseURIs);\\n        canWhitelistforPreMint = true;\\n        nonce = 0;\\n        incAccount = payable(msg.sender);\\n    }\\n\\n    modifier preMintAllowed () {\\n        require (canPreMint[msg.sender], \\\"You are not whitelisted for pre mint\\\");\\n        _;\\n    }\\n\\n    modifier freeMintAllowed () {\\n        require (canFreeMint[msg.sender], \\\"You are not whitelisted for free mint\\\");\\n        _;\\n    }\\n\\n    function setBaseURI (string[] memory _baseURIs) internal onlyOwner {\\n        baseURIVenus = _baseURIs[0];\\n        baseURIMars_1 = _baseURIs[1];\\n        baseURIJupiter = _baseURIs[2];\\n        baseURIUranus = _baseURIs[3];\\n        baseURINeptune = _baseURIs[4];\\n        baseURIMars_2 = _baseURIs[5];\\n    }\\n\\n    function whitelistForPreMint (address _address) external onlyOwner {\\n        require(canWhitelistforPreMint == true, \\\"pre mint whitelisting phase is over\\\");\\n        canPreMint[_address] = true;\\n        emit UserCanPreMint(_address);\\n    }\\n\\n    function whitelistForFreeMint (address _address) external onlyOwner {\\n        require(canWhitelistforFreeMint == true, \\\"free mint whitelisting phase is over\\\");\\n        canFreeMint[_address] = true;\\n        emit UserCanFreeMint(_address);\\n    }\\n\\n    function finishPreMintListing () external onlyOwner {\\n        require(canWhitelistforPreMint == true, \\\"pre mint whitelisting phase is over\\\");\\n        canWhitelistforPreMint = false;\\n        canWhitelistforFreeMint = true;\\n    }\\n\\n    function finishFreeMintListing () external onlyOwner {\\n        require(canWhitelistforFreeMint == true, \\\"free mint whitelisting phase is over\\\");\\n        canWhitelistforFreeMint = false;\\n    }\\n\\n    function random(uint from, uint to) private returns (uint) {\\n        uint range = to - from;\\n        uint randomNumber = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, nonce)));\\n        nonce++;\\n        return (randomNumber % range) + from;\\n    }\\n\\n    function startMint(uint id, string memory characterURI) internal {\\n        string memory currentURI = string(abi.encodePacked(characterURI, id.toString(), \\\".json\\\"));\\n        _mint(msg.sender, totalMinted._value + 1);\\n        _setTokenURI(totalMinted._value + 1, currentURI);\\n        totalMinted.increment();\\n    }\\n\\n\\n    function gold() internal {\\n        uint id = random(1, 100);\\n        if (id >= 1 && id <= 50)\\n        {\\n            if (indexVenus >= 350)\\n            {\\n                if (indexMars_1 >= 245)\\n                {\\n                    indexJupiterG++;\\n                    startMint(indexJupiterG, baseURIJupiter);\\n                }\\n                indexMars_1++;\\n                startMint(indexMars_1, baseURIMars_1);\\n            }\\n            else\\n            {\\n                indexVenus++;\\n                startMint(indexVenus, baseURIVenus);\\n            }\\n        }\\n        else if (id >= 51 && id <= 85)\\n        {\\n            if (indexMars_1 >= 245)\\n            {\\n                if (indexVenus >= 350)\\n                {\\n                    indexJupiterG++;\\n                    startMint(indexJupiterG, baseURIJupiter);\\n                }\\n                indexVenus++;\\n                startMint(indexVenus, baseURIVenus);\\n            }\\n            else\\n            {\\n                indexMars_1++;\\n                startMint(indexMars_1, baseURIMars_1);\\n            }\\n        }\\n        else if (id >= 86 && id <= 100)\\n        {\\n            if (indexJupiterG >= 105)\\n            {\\n                if (indexVenus >= 350)\\n                {\\n                    indexMars_1++;\\n                    startMint(indexMars_1, baseURIMars_1);\\n                }\\n                indexVenus++;\\n                startMint(indexVenus, baseURIVenus);\\n            }\\n            else\\n            {\\n                indexJupiterG++;\\n                startMint(indexJupiterG, baseURIJupiter);\\n            }\\n        }\\n    }\\n\\n    function diamond() internal {\\n        uint id = random(1, 1000);\\n        if (id >= 1 && id <= 350)\\n        {\\n            if (indexJupiterD >= 105)\\n            {\\n                if (indexUranus >= 90)\\n                {\\n                    if (indexNeptune >= 53)\\n                    {\\n                        indexMars_2++;\\n                        startMint(indexMars_2, baseURIMars_2);\\n                    }\\n                    else\\n                    {\\n                        indexNeptune++;\\n                        startMint(indexNeptune, baseURINeptune);\\n                    }\\n                }\\n                else\\n                {\\n                    indexUranus++;\\n                    startMint(indexUranus, baseURIUranus);\\n                }\\n            }\\n            else\\n            {\\n                indexJupiterD++;\\n                startMint(indexJupiterD, baseURIJupiter);\\n            }\\n        }\\n        else if (id >= 351 && id <= 650)\\n        {\\n            if (indexUranus >= 90)\\n            {\\n                if (indexJupiterD >= 105)\\n                {\\n                    if (indexNeptune >= 53)\\n                    {\\n                        indexMars_2++;\\n                        startMint(indexMars_2, baseURIMars_2);\\n                    }\\n                    else\\n                    {\\n                        indexNeptune++;\\n                        startMint(indexNeptune, baseURINeptune);\\n                    }\\n                }\\n                else\\n                {\\n                    indexJupiterD++;\\n                    startMint(indexJupiterD, baseURIJupiter);\\n                }\\n            }\\n            else\\n            {\\n                indexUranus++;\\n                startMint(indexUranus, baseURIUranus);\\n            }\\n        }\\n        else if (id >= 651 && id <= 827)\\n        {\\n            if (indexNeptune >= 53)\\n            {\\n                if (indexJupiterD >= 105)\\n                {\\n                    if (indexUranus >= 90)\\n                    {\\n                        indexMars_2++;\\n                        startMint(indexMars_2, baseURIMars_2);\\n                    }\\n                    else\\n                    {\\n                        indexUranus++;\\n                        startMint(indexUranus, baseURIUranus);\\n                    }\\n                }\\n                else\\n                {\\n                    indexJupiterD++;\\n                    startMint(indexJupiterD, baseURIJupiter);\\n                }\\n            }\\n            else\\n            {\\n                indexNeptune++;\\n                startMint(indexNeptune, baseURINeptune);\\n            }\\n        }\\n        else if (id >= 828 && id <= 1000)\\n        {\\n            if (indexMars_2 >= 52)\\n            {\\n                if (indexJupiterD >= 105)\\n                {\\n                    if (indexUranus >= 90)\\n                    {\\n                        indexNeptune++;\\n                        startMint(indexNeptune, baseURINeptune);\\n                    }\\n                    else\\n                    {\\n                        indexUranus++;\\n                        startMint(indexUranus, baseURIUranus);\\n                    }\\n                }\\n                else\\n                {\\n                    indexJupiterD++;\\n                    startMint(indexJupiterD, baseURIJupiter);\\n                }\\n            }\\n            else\\n            {\\n                indexMars_2++;\\n                startMint(indexMars_2, baseURIMars_2);\\n            }\\n        }\\n    } \\n\\n    function preMintGold () external payable preMintAllowed {\\n        require(users[msg.sender].goldsBought < 5, \\\"You cannot mint anymore gold capsule\\\");\\n        require(msg.value == goldCost, \\\"Price is 25 Matic\\\");\\n        require(goldsMinted._value <= 700, \\\"All gold capsules have been minted\\\");\\n        gold();\\n        incAccount.transfer(msg.value);\\n        goldsMinted.increment();\\n        users[msg.sender].goldsBought++;\\n    }\\n\\n    function preMintDiamond () external payable preMintAllowed {\\n        require(users[msg.sender].diamondsBought < 2, \\\"You cannot mint anymore diamond capsule\\\");\\n        require(msg.value == diamondCost, \\\"Price is 130 Matic\\\");\\n        require(diamondsMinted._value <= 300, \\\"All diamond capsules have been minted\\\");\\n        diamond();\\n        incAccount.transfer(msg.value);\\n        diamondsMinted.increment();\\n        users[msg.sender].goldsBought++;\\n    }\\n\\n    function withdrawAll() external onlyOwner {\\n        address ownr = owner(); \\n        payable(ownr).transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0x6d7354eea8a555d7fd38030a7f3d3cc22a92760d59421ef81ff28bb0d35d4325\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":192,"contract":"contracts/Mint.sol:Mint","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":194,"contract":"contracts/Mint.sol:Mint","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":198,"contract":"contracts/Mint.sol:Mint","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":202,"contract":"contracts/Mint.sol:Mint","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":206,"contract":"contracts/Mint.sol:Mint","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":212,"contract":"contracts/Mint.sol:Mint","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1258,"contract":"contracts/Mint.sol:Mint","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":7,"contract":"contracts/Mint.sol:Mint","label":"_owner","offset":0,"slot":"7","type":"t_address"},{"astId":2917,"contract":"contracts/Mint.sol:Mint","label":"goldsMinted","offset":0,"slot":"8","type":"t_struct(Counter)1755_storage"},{"astId":2920,"contract":"contracts/Mint.sol:Mint","label":"diamondsMinted","offset":0,"slot":"9","type":"t_struct(Counter)1755_storage"},{"astId":2923,"contract":"contracts/Mint.sol:Mint","label":"totalMinted","offset":0,"slot":"10","type":"t_struct(Counter)1755_storage"},{"astId":2928,"contract":"contracts/Mint.sol:Mint","label":"baseURIVenus","offset":0,"slot":"11","type":"t_string_storage"},{"astId":2930,"contract":"contracts/Mint.sol:Mint","label":"baseURIMars_1","offset":0,"slot":"12","type":"t_string_storage"},{"astId":2932,"contract":"contracts/Mint.sol:Mint","label":"baseURIJupiter","offset":0,"slot":"13","type":"t_string_storage"},{"astId":2934,"contract":"contracts/Mint.sol:Mint","label":"baseURIUranus","offset":0,"slot":"14","type":"t_string_storage"},{"astId":2936,"contract":"contracts/Mint.sol:Mint","label":"baseURINeptune","offset":0,"slot":"15","type":"t_string_storage"},{"astId":2938,"contract":"contracts/Mint.sol:Mint","label":"baseURIMars_2","offset":0,"slot":"16","type":"t_string_storage"},{"astId":2940,"contract":"contracts/Mint.sol:Mint","label":"indexVenus","offset":0,"slot":"17","type":"t_uint256"},{"astId":2942,"contract":"contracts/Mint.sol:Mint","label":"indexMars_1","offset":0,"slot":"18","type":"t_uint256"},{"astId":2944,"contract":"contracts/Mint.sol:Mint","label":"indexJupiterG","offset":0,"slot":"19","type":"t_uint256"},{"astId":2946,"contract":"contracts/Mint.sol:Mint","label":"indexJupiterD","offset":0,"slot":"20","type":"t_uint256"},{"astId":2948,"contract":"contracts/Mint.sol:Mint","label":"indexUranus","offset":0,"slot":"21","type":"t_uint256"},{"astId":2950,"contract":"contracts/Mint.sol:Mint","label":"indexNeptune","offset":0,"slot":"22","type":"t_uint256"},{"astId":2952,"contract":"contracts/Mint.sol:Mint","label":"indexMars_2","offset":0,"slot":"23","type":"t_uint256"},{"astId":2954,"contract":"contracts/Mint.sol:Mint","label":"incAccount","offset":0,"slot":"24","type":"t_address_payable"},{"astId":2956,"contract":"contracts/Mint.sol:Mint","label":"balance","offset":0,"slot":"25","type":"t_uint256"},{"astId":2958,"contract":"contracts/Mint.sol:Mint","label":"canWhitelistforPreMint","offset":0,"slot":"26","type":"t_bool"},{"astId":2960,"contract":"contracts/Mint.sol:Mint","label":"canWhitelistforFreeMint","offset":1,"slot":"26","type":"t_bool"},{"astId":2963,"contract":"contracts/Mint.sol:Mint","label":"goldCost","offset":0,"slot":"27","type":"t_uint256"},{"astId":2966,"contract":"contracts/Mint.sol:Mint","label":"diamondCost","offset":0,"slot":"28","type":"t_uint256"},{"astId":2968,"contract":"contracts/Mint.sol:Mint","label":"nonce","offset":0,"slot":"29","type":"t_uint256"},{"astId":2978,"contract":"contracts/Mint.sol:Mint","label":"users","offset":0,"slot":"30","type":"t_mapping(t_address,t_struct(User)2973_storage)"},{"astId":2982,"contract":"contracts/Mint.sol:Mint","label":"canPreMint","offset":0,"slot":"31","type":"t_mapping(t_address,t_bool)"},{"astId":2986,"contract":"contracts/Mint.sol:Mint","label":"canFreeMint","offset":0,"slot":"32","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_struct(User)2973_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Mint.User)","numberOfBytes":"32","value":"t_struct(User)2973_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)1755_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":1754,"contract":"contracts/Mint.sol:Mint","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(User)2973_storage":{"encoding":"inplace","label":"struct Mint.User","members":[{"astId":2970,"contract":"contracts/Mint.sol:Mint","label":"diamondsBought","offset":0,"slot":"0","type":"t_uint256"},{"astId":2972,"contract":"contracts/Mint.sol:Mint","label":"goldsBought","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}